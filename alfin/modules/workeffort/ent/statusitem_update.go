// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statustype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusvalidchange"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// StatusItemUpdate is the builder for updating StatusItem entities.
type StatusItemUpdate struct {
	config
	hooks    []Hook
	mutation *StatusItemMutation
}

// Where adds a new predicate for the StatusItemUpdate builder.
func (siu *StatusItemUpdate) Where(ps ...predicate.StatusItem) *StatusItemUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetStringRef sets the "string_ref" field.
func (siu *StatusItemUpdate) SetStringRef(s string) *StatusItemUpdate {
	siu.mutation.SetStringRef(s)
	return siu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStringRef(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetStringRef(*s)
	}
	return siu
}

// ClearStringRef clears the value of the "string_ref" field.
func (siu *StatusItemUpdate) ClearStringRef() *StatusItemUpdate {
	siu.mutation.ClearStringRef()
	return siu
}

// SetStatusCode sets the "status_code" field.
func (siu *StatusItemUpdate) SetStatusCode(s string) *StatusItemUpdate {
	siu.mutation.SetStatusCode(s)
	return siu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStatusCode(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetStatusCode(*s)
	}
	return siu
}

// ClearStatusCode clears the value of the "status_code" field.
func (siu *StatusItemUpdate) ClearStatusCode() *StatusItemUpdate {
	siu.mutation.ClearStatusCode()
	return siu
}

// SetSequenceID sets the "sequence_id" field.
func (siu *StatusItemUpdate) SetSequenceID(i int) *StatusItemUpdate {
	siu.mutation.ResetSequenceID()
	siu.mutation.SetSequenceID(i)
	return siu
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableSequenceID(i *int) *StatusItemUpdate {
	if i != nil {
		siu.SetSequenceID(*i)
	}
	return siu
}

// AddSequenceID adds i to the "sequence_id" field.
func (siu *StatusItemUpdate) AddSequenceID(i int) *StatusItemUpdate {
	siu.mutation.AddSequenceID(i)
	return siu
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (siu *StatusItemUpdate) ClearSequenceID() *StatusItemUpdate {
	siu.mutation.ClearSequenceID()
	return siu
}

// SetDescription sets the "description" field.
func (siu *StatusItemUpdate) SetDescription(s string) *StatusItemUpdate {
	siu.mutation.SetDescription(s)
	return siu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableDescription(s *string) *StatusItemUpdate {
	if s != nil {
		siu.SetDescription(*s)
	}
	return siu
}

// ClearDescription clears the value of the "description" field.
func (siu *StatusItemUpdate) ClearDescription() *StatusItemUpdate {
	siu.mutation.ClearDescription()
	return siu
}

// SetStatusTypeID sets the "status_type" edge to the StatusType entity by ID.
func (siu *StatusItemUpdate) SetStatusTypeID(id int) *StatusItemUpdate {
	siu.mutation.SetStatusTypeID(id)
	return siu
}

// SetNillableStatusTypeID sets the "status_type" edge to the StatusType entity by ID if the given value is not nil.
func (siu *StatusItemUpdate) SetNillableStatusTypeID(id *int) *StatusItemUpdate {
	if id != nil {
		siu = siu.SetStatusTypeID(*id)
	}
	return siu
}

// SetStatusType sets the "status_type" edge to the StatusType entity.
func (siu *StatusItemUpdate) SetStatusType(s *StatusType) *StatusItemUpdate {
	return siu.SetStatusTypeID(s.ID)
}

// AddPartyIDs adds the "parties" edge to the Party entity by IDs.
func (siu *StatusItemUpdate) AddPartyIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddPartyIDs(ids...)
	return siu
}

// AddParties adds the "parties" edges to the Party entity.
func (siu *StatusItemUpdate) AddParties(p ...*Party) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddPartyIDs(ids...)
}

// AddPartyStatusIDs adds the "party_statuses" edge to the PartyStatus entity by IDs.
func (siu *StatusItemUpdate) AddPartyStatusIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddPartyStatusIDs(ids...)
	return siu
}

// AddPartyStatuses adds the "party_statuses" edges to the PartyStatus entity.
func (siu *StatusItemUpdate) AddPartyStatuses(p ...*PartyStatus) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.AddPartyStatusIDs(ids...)
}

// AddMainStatusValidChangeIDs adds the "main_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siu *StatusItemUpdate) AddMainStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddMainStatusValidChangeIDs(ids...)
	return siu
}

// AddMainStatusValidChanges adds the "main_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) AddMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddMainStatusValidChangeIDs(ids...)
}

// AddToStatusValidChangeIDs adds the "to_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siu *StatusItemUpdate) AddToStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddToStatusValidChangeIDs(ids...)
	return siu
}

// AddToStatusValidChanges adds the "to_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) AddToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddToStatusValidChangeIDs(ids...)
}

// AddCurrentWorkEffortIDs adds the "current_work_efforts" edge to the WorkEffort entity by IDs.
func (siu *StatusItemUpdate) AddCurrentWorkEffortIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddCurrentWorkEffortIDs(ids...)
	return siu
}

// AddCurrentWorkEfforts adds the "current_work_efforts" edges to the WorkEffort entity.
func (siu *StatusItemUpdate) AddCurrentWorkEfforts(w ...*WorkEffort) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.AddCurrentWorkEffortIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (siu *StatusItemUpdate) AddWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return siu
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siu *StatusItemUpdate) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// AddAvailabilityWorkEffortFixedAssetAssignIDs adds the "availability_work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (siu *StatusItemUpdate) AddAvailabilityWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
	return siu
}

// AddAvailabilityWorkEffortFixedAssetAssigns adds the "availability_work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siu *StatusItemUpdate) AddAvailabilityWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.AddAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
}

// AddAssignmentWorkEffortPartyAssignmentIDs adds the "assignment_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (siu *StatusItemUpdate) AddAssignmentWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddAssignmentWorkEffortPartyAssignmentIDs(ids...)
	return siu
}

// AddAssignmentWorkEffortPartyAssignments adds the "assignment_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siu *StatusItemUpdate) AddAssignmentWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.AddAssignmentWorkEffortPartyAssignmentIDs(ids...)
}

// AddAvailabilityWorkEffortPartyAssignmentIDs adds the "availability_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (siu *StatusItemUpdate) AddAvailabilityWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.AddAvailabilityWorkEffortPartyAssignmentIDs(ids...)
	return siu
}

// AddAvailabilityWorkEffortPartyAssignments adds the "availability_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siu *StatusItemUpdate) AddAvailabilityWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.AddAvailabilityWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the StatusItemMutation object of the builder.
func (siu *StatusItemUpdate) Mutation() *StatusItemMutation {
	return siu.mutation
}

// ClearStatusType clears the "status_type" edge to the StatusType entity.
func (siu *StatusItemUpdate) ClearStatusType() *StatusItemUpdate {
	siu.mutation.ClearStatusType()
	return siu
}

// ClearParties clears all "parties" edges to the Party entity.
func (siu *StatusItemUpdate) ClearParties() *StatusItemUpdate {
	siu.mutation.ClearParties()
	return siu
}

// RemovePartyIDs removes the "parties" edge to Party entities by IDs.
func (siu *StatusItemUpdate) RemovePartyIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemovePartyIDs(ids...)
	return siu
}

// RemoveParties removes "parties" edges to Party entities.
func (siu *StatusItemUpdate) RemoveParties(p ...*Party) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemovePartyIDs(ids...)
}

// ClearPartyStatuses clears all "party_statuses" edges to the PartyStatus entity.
func (siu *StatusItemUpdate) ClearPartyStatuses() *StatusItemUpdate {
	siu.mutation.ClearPartyStatuses()
	return siu
}

// RemovePartyStatusIDs removes the "party_statuses" edge to PartyStatus entities by IDs.
func (siu *StatusItemUpdate) RemovePartyStatusIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemovePartyStatusIDs(ids...)
	return siu
}

// RemovePartyStatuses removes "party_statuses" edges to PartyStatus entities.
func (siu *StatusItemUpdate) RemovePartyStatuses(p ...*PartyStatus) *StatusItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siu.RemovePartyStatusIDs(ids...)
}

// ClearMainStatusValidChanges clears all "main_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) ClearMainStatusValidChanges() *StatusItemUpdate {
	siu.mutation.ClearMainStatusValidChanges()
	return siu
}

// RemoveMainStatusValidChangeIDs removes the "main_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siu *StatusItemUpdate) RemoveMainStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveMainStatusValidChangeIDs(ids...)
	return siu
}

// RemoveMainStatusValidChanges removes "main_status_valid_changes" edges to StatusValidChange entities.
func (siu *StatusItemUpdate) RemoveMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveMainStatusValidChangeIDs(ids...)
}

// ClearToStatusValidChanges clears all "to_status_valid_changes" edges to the StatusValidChange entity.
func (siu *StatusItemUpdate) ClearToStatusValidChanges() *StatusItemUpdate {
	siu.mutation.ClearToStatusValidChanges()
	return siu
}

// RemoveToStatusValidChangeIDs removes the "to_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siu *StatusItemUpdate) RemoveToStatusValidChangeIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveToStatusValidChangeIDs(ids...)
	return siu
}

// RemoveToStatusValidChanges removes "to_status_valid_changes" edges to StatusValidChange entities.
func (siu *StatusItemUpdate) RemoveToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveToStatusValidChangeIDs(ids...)
}

// ClearCurrentWorkEfforts clears all "current_work_efforts" edges to the WorkEffort entity.
func (siu *StatusItemUpdate) ClearCurrentWorkEfforts() *StatusItemUpdate {
	siu.mutation.ClearCurrentWorkEfforts()
	return siu
}

// RemoveCurrentWorkEffortIDs removes the "current_work_efforts" edge to WorkEffort entities by IDs.
func (siu *StatusItemUpdate) RemoveCurrentWorkEffortIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveCurrentWorkEffortIDs(ids...)
	return siu
}

// RemoveCurrentWorkEfforts removes "current_work_efforts" edges to WorkEffort entities.
func (siu *StatusItemUpdate) RemoveCurrentWorkEfforts(w ...*WorkEffort) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.RemoveCurrentWorkEffortIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siu *StatusItemUpdate) ClearWorkEffortFixedAssetAssigns() *StatusItemUpdate {
	siu.mutation.ClearWorkEffortFixedAssetAssigns()
	return siu
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (siu *StatusItemUpdate) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return siu
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (siu *StatusItemUpdate) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearAvailabilityWorkEffortFixedAssetAssigns clears all "availability_work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siu *StatusItemUpdate) ClearAvailabilityWorkEffortFixedAssetAssigns() *StatusItemUpdate {
	siu.mutation.ClearAvailabilityWorkEffortFixedAssetAssigns()
	return siu
}

// RemoveAvailabilityWorkEffortFixedAssetAssignIDs removes the "availability_work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (siu *StatusItemUpdate) RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
	return siu
}

// RemoveAvailabilityWorkEffortFixedAssetAssigns removes "availability_work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (siu *StatusItemUpdate) RemoveAvailabilityWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearAssignmentWorkEffortPartyAssignments clears all "assignment_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siu *StatusItemUpdate) ClearAssignmentWorkEffortPartyAssignments() *StatusItemUpdate {
	siu.mutation.ClearAssignmentWorkEffortPartyAssignments()
	return siu
}

// RemoveAssignmentWorkEffortPartyAssignmentIDs removes the "assignment_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (siu *StatusItemUpdate) RemoveAssignmentWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveAssignmentWorkEffortPartyAssignmentIDs(ids...)
	return siu
}

// RemoveAssignmentWorkEffortPartyAssignments removes "assignment_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (siu *StatusItemUpdate) RemoveAssignmentWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.RemoveAssignmentWorkEffortPartyAssignmentIDs(ids...)
}

// ClearAvailabilityWorkEffortPartyAssignments clears all "availability_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siu *StatusItemUpdate) ClearAvailabilityWorkEffortPartyAssignments() *StatusItemUpdate {
	siu.mutation.ClearAvailabilityWorkEffortPartyAssignments()
	return siu
}

// RemoveAvailabilityWorkEffortPartyAssignmentIDs removes the "availability_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (siu *StatusItemUpdate) RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdate {
	siu.mutation.RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids...)
	return siu
}

// RemoveAvailabilityWorkEffortPartyAssignments removes "availability_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (siu *StatusItemUpdate) RemoveAvailabilityWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siu.RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *StatusItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	siu.defaults()
	if len(siu.hooks) == 0 {
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *StatusItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *StatusItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *StatusItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *StatusItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdateTime(); !ok {
		v := statusitem.UpdateDefaultUpdateTime()
		siu.mutation.SetUpdateTime(v)
	}
}

func (siu *StatusItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusitem.Table,
			Columns: statusitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldUpdateTime,
		})
	}
	if value, ok := siu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStringRef,
		})
	}
	if siu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStringRef,
		})
	}
	if value, ok := siu.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStatusCode,
		})
	}
	if siu.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStatusCode,
		})
	}
	if value, ok := siu.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siu.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if siu.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldDescription,
		})
	}
	if siu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldDescription,
		})
	}
	if siu.mutation.StatusTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.StatusTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedPartiesIDs(); len(nodes) > 0 && !siu.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.PartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedPartyStatusesIDs(); len(nodes) > 0 && !siu.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.PartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedMainStatusValidChangesIDs(); len(nodes) > 0 && !siu.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.MainStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedToStatusValidChangesIDs(); len(nodes) > 0 && !siu.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ToStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.CurrentWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedCurrentWorkEffortsIDs(); len(nodes) > 0 && !siu.mutation.CurrentWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.CurrentWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !siu.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.AvailabilityWorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedAvailabilityWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !siu.mutation.AvailabilityWorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.AvailabilityWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.AssignmentWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedAssignmentWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !siu.mutation.AssignmentWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.AssignmentWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.AvailabilityWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedAvailabilityWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !siu.mutation.AvailabilityWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.AvailabilityWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusItemUpdateOne is the builder for updating a single StatusItem entity.
type StatusItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusItemMutation
}

// SetStringRef sets the "string_ref" field.
func (siuo *StatusItemUpdateOne) SetStringRef(s string) *StatusItemUpdateOne {
	siuo.mutation.SetStringRef(s)
	return siuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStringRef(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetStringRef(*s)
	}
	return siuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (siuo *StatusItemUpdateOne) ClearStringRef() *StatusItemUpdateOne {
	siuo.mutation.ClearStringRef()
	return siuo
}

// SetStatusCode sets the "status_code" field.
func (siuo *StatusItemUpdateOne) SetStatusCode(s string) *StatusItemUpdateOne {
	siuo.mutation.SetStatusCode(s)
	return siuo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStatusCode(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetStatusCode(*s)
	}
	return siuo
}

// ClearStatusCode clears the value of the "status_code" field.
func (siuo *StatusItemUpdateOne) ClearStatusCode() *StatusItemUpdateOne {
	siuo.mutation.ClearStatusCode()
	return siuo
}

// SetSequenceID sets the "sequence_id" field.
func (siuo *StatusItemUpdateOne) SetSequenceID(i int) *StatusItemUpdateOne {
	siuo.mutation.ResetSequenceID()
	siuo.mutation.SetSequenceID(i)
	return siuo
}

// SetNillableSequenceID sets the "sequence_id" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableSequenceID(i *int) *StatusItemUpdateOne {
	if i != nil {
		siuo.SetSequenceID(*i)
	}
	return siuo
}

// AddSequenceID adds i to the "sequence_id" field.
func (siuo *StatusItemUpdateOne) AddSequenceID(i int) *StatusItemUpdateOne {
	siuo.mutation.AddSequenceID(i)
	return siuo
}

// ClearSequenceID clears the value of the "sequence_id" field.
func (siuo *StatusItemUpdateOne) ClearSequenceID() *StatusItemUpdateOne {
	siuo.mutation.ClearSequenceID()
	return siuo
}

// SetDescription sets the "description" field.
func (siuo *StatusItemUpdateOne) SetDescription(s string) *StatusItemUpdateOne {
	siuo.mutation.SetDescription(s)
	return siuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableDescription(s *string) *StatusItemUpdateOne {
	if s != nil {
		siuo.SetDescription(*s)
	}
	return siuo
}

// ClearDescription clears the value of the "description" field.
func (siuo *StatusItemUpdateOne) ClearDescription() *StatusItemUpdateOne {
	siuo.mutation.ClearDescription()
	return siuo
}

// SetStatusTypeID sets the "status_type" edge to the StatusType entity by ID.
func (siuo *StatusItemUpdateOne) SetStatusTypeID(id int) *StatusItemUpdateOne {
	siuo.mutation.SetStatusTypeID(id)
	return siuo
}

// SetNillableStatusTypeID sets the "status_type" edge to the StatusType entity by ID if the given value is not nil.
func (siuo *StatusItemUpdateOne) SetNillableStatusTypeID(id *int) *StatusItemUpdateOne {
	if id != nil {
		siuo = siuo.SetStatusTypeID(*id)
	}
	return siuo
}

// SetStatusType sets the "status_type" edge to the StatusType entity.
func (siuo *StatusItemUpdateOne) SetStatusType(s *StatusType) *StatusItemUpdateOne {
	return siuo.SetStatusTypeID(s.ID)
}

// AddPartyIDs adds the "parties" edge to the Party entity by IDs.
func (siuo *StatusItemUpdateOne) AddPartyIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddPartyIDs(ids...)
	return siuo
}

// AddParties adds the "parties" edges to the Party entity.
func (siuo *StatusItemUpdateOne) AddParties(p ...*Party) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddPartyIDs(ids...)
}

// AddPartyStatusIDs adds the "party_statuses" edge to the PartyStatus entity by IDs.
func (siuo *StatusItemUpdateOne) AddPartyStatusIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddPartyStatusIDs(ids...)
	return siuo
}

// AddPartyStatuses adds the "party_statuses" edges to the PartyStatus entity.
func (siuo *StatusItemUpdateOne) AddPartyStatuses(p ...*PartyStatus) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.AddPartyStatusIDs(ids...)
}

// AddMainStatusValidChangeIDs adds the "main_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siuo *StatusItemUpdateOne) AddMainStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddMainStatusValidChangeIDs(ids...)
	return siuo
}

// AddMainStatusValidChanges adds the "main_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) AddMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddMainStatusValidChangeIDs(ids...)
}

// AddToStatusValidChangeIDs adds the "to_status_valid_changes" edge to the StatusValidChange entity by IDs.
func (siuo *StatusItemUpdateOne) AddToStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddToStatusValidChangeIDs(ids...)
	return siuo
}

// AddToStatusValidChanges adds the "to_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) AddToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddToStatusValidChangeIDs(ids...)
}

// AddCurrentWorkEffortIDs adds the "current_work_efforts" edge to the WorkEffort entity by IDs.
func (siuo *StatusItemUpdateOne) AddCurrentWorkEffortIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddCurrentWorkEffortIDs(ids...)
	return siuo
}

// AddCurrentWorkEfforts adds the "current_work_efforts" edges to the WorkEffort entity.
func (siuo *StatusItemUpdateOne) AddCurrentWorkEfforts(w ...*WorkEffort) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.AddCurrentWorkEffortIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (siuo *StatusItemUpdateOne) AddWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return siuo
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siuo *StatusItemUpdateOne) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// AddAvailabilityWorkEffortFixedAssetAssignIDs adds the "availability_work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (siuo *StatusItemUpdateOne) AddAvailabilityWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
	return siuo
}

// AddAvailabilityWorkEffortFixedAssetAssigns adds the "availability_work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siuo *StatusItemUpdateOne) AddAvailabilityWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.AddAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
}

// AddAssignmentWorkEffortPartyAssignmentIDs adds the "assignment_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (siuo *StatusItemUpdateOne) AddAssignmentWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddAssignmentWorkEffortPartyAssignmentIDs(ids...)
	return siuo
}

// AddAssignmentWorkEffortPartyAssignments adds the "assignment_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siuo *StatusItemUpdateOne) AddAssignmentWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.AddAssignmentWorkEffortPartyAssignmentIDs(ids...)
}

// AddAvailabilityWorkEffortPartyAssignmentIDs adds the "availability_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (siuo *StatusItemUpdateOne) AddAvailabilityWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.AddAvailabilityWorkEffortPartyAssignmentIDs(ids...)
	return siuo
}

// AddAvailabilityWorkEffortPartyAssignments adds the "availability_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siuo *StatusItemUpdateOne) AddAvailabilityWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.AddAvailabilityWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the StatusItemMutation object of the builder.
func (siuo *StatusItemUpdateOne) Mutation() *StatusItemMutation {
	return siuo.mutation
}

// ClearStatusType clears the "status_type" edge to the StatusType entity.
func (siuo *StatusItemUpdateOne) ClearStatusType() *StatusItemUpdateOne {
	siuo.mutation.ClearStatusType()
	return siuo
}

// ClearParties clears all "parties" edges to the Party entity.
func (siuo *StatusItemUpdateOne) ClearParties() *StatusItemUpdateOne {
	siuo.mutation.ClearParties()
	return siuo
}

// RemovePartyIDs removes the "parties" edge to Party entities by IDs.
func (siuo *StatusItemUpdateOne) RemovePartyIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemovePartyIDs(ids...)
	return siuo
}

// RemoveParties removes "parties" edges to Party entities.
func (siuo *StatusItemUpdateOne) RemoveParties(p ...*Party) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemovePartyIDs(ids...)
}

// ClearPartyStatuses clears all "party_statuses" edges to the PartyStatus entity.
func (siuo *StatusItemUpdateOne) ClearPartyStatuses() *StatusItemUpdateOne {
	siuo.mutation.ClearPartyStatuses()
	return siuo
}

// RemovePartyStatusIDs removes the "party_statuses" edge to PartyStatus entities by IDs.
func (siuo *StatusItemUpdateOne) RemovePartyStatusIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemovePartyStatusIDs(ids...)
	return siuo
}

// RemovePartyStatuses removes "party_statuses" edges to PartyStatus entities.
func (siuo *StatusItemUpdateOne) RemovePartyStatuses(p ...*PartyStatus) *StatusItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return siuo.RemovePartyStatusIDs(ids...)
}

// ClearMainStatusValidChanges clears all "main_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) ClearMainStatusValidChanges() *StatusItemUpdateOne {
	siuo.mutation.ClearMainStatusValidChanges()
	return siuo
}

// RemoveMainStatusValidChangeIDs removes the "main_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveMainStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveMainStatusValidChangeIDs(ids...)
	return siuo
}

// RemoveMainStatusValidChanges removes "main_status_valid_changes" edges to StatusValidChange entities.
func (siuo *StatusItemUpdateOne) RemoveMainStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveMainStatusValidChangeIDs(ids...)
}

// ClearToStatusValidChanges clears all "to_status_valid_changes" edges to the StatusValidChange entity.
func (siuo *StatusItemUpdateOne) ClearToStatusValidChanges() *StatusItemUpdateOne {
	siuo.mutation.ClearToStatusValidChanges()
	return siuo
}

// RemoveToStatusValidChangeIDs removes the "to_status_valid_changes" edge to StatusValidChange entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveToStatusValidChangeIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveToStatusValidChangeIDs(ids...)
	return siuo
}

// RemoveToStatusValidChanges removes "to_status_valid_changes" edges to StatusValidChange entities.
func (siuo *StatusItemUpdateOne) RemoveToStatusValidChanges(s ...*StatusValidChange) *StatusItemUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveToStatusValidChangeIDs(ids...)
}

// ClearCurrentWorkEfforts clears all "current_work_efforts" edges to the WorkEffort entity.
func (siuo *StatusItemUpdateOne) ClearCurrentWorkEfforts() *StatusItemUpdateOne {
	siuo.mutation.ClearCurrentWorkEfforts()
	return siuo
}

// RemoveCurrentWorkEffortIDs removes the "current_work_efforts" edge to WorkEffort entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveCurrentWorkEffortIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveCurrentWorkEffortIDs(ids...)
	return siuo
}

// RemoveCurrentWorkEfforts removes "current_work_efforts" edges to WorkEffort entities.
func (siuo *StatusItemUpdateOne) RemoveCurrentWorkEfforts(w ...*WorkEffort) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.RemoveCurrentWorkEffortIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siuo *StatusItemUpdateOne) ClearWorkEffortFixedAssetAssigns() *StatusItemUpdateOne {
	siuo.mutation.ClearWorkEffortFixedAssetAssigns()
	return siuo
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return siuo
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (siuo *StatusItemUpdateOne) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearAvailabilityWorkEffortFixedAssetAssigns clears all "availability_work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (siuo *StatusItemUpdateOne) ClearAvailabilityWorkEffortFixedAssetAssigns() *StatusItemUpdateOne {
	siuo.mutation.ClearAvailabilityWorkEffortFixedAssetAssigns()
	return siuo
}

// RemoveAvailabilityWorkEffortFixedAssetAssignIDs removes the "availability_work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
	return siuo
}

// RemoveAvailabilityWorkEffortFixedAssetAssigns removes "availability_work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (siuo *StatusItemUpdateOne) RemoveAvailabilityWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.RemoveAvailabilityWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearAssignmentWorkEffortPartyAssignments clears all "assignment_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siuo *StatusItemUpdateOne) ClearAssignmentWorkEffortPartyAssignments() *StatusItemUpdateOne {
	siuo.mutation.ClearAssignmentWorkEffortPartyAssignments()
	return siuo
}

// RemoveAssignmentWorkEffortPartyAssignmentIDs removes the "assignment_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveAssignmentWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveAssignmentWorkEffortPartyAssignmentIDs(ids...)
	return siuo
}

// RemoveAssignmentWorkEffortPartyAssignments removes "assignment_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (siuo *StatusItemUpdateOne) RemoveAssignmentWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.RemoveAssignmentWorkEffortPartyAssignmentIDs(ids...)
}

// ClearAvailabilityWorkEffortPartyAssignments clears all "availability_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (siuo *StatusItemUpdateOne) ClearAvailabilityWorkEffortPartyAssignments() *StatusItemUpdateOne {
	siuo.mutation.ClearAvailabilityWorkEffortPartyAssignments()
	return siuo
}

// RemoveAvailabilityWorkEffortPartyAssignmentIDs removes the "availability_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (siuo *StatusItemUpdateOne) RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids ...int) *StatusItemUpdateOne {
	siuo.mutation.RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids...)
	return siuo
}

// RemoveAvailabilityWorkEffortPartyAssignments removes "availability_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (siuo *StatusItemUpdateOne) RemoveAvailabilityWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *StatusItemUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return siuo.RemoveAvailabilityWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *StatusItemUpdateOne) Select(field string, fields ...string) *StatusItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated StatusItem entity.
func (siuo *StatusItemUpdateOne) Save(ctx context.Context) (*StatusItem, error) {
	var (
		err  error
		node *StatusItem
	)
	siuo.defaults()
	if len(siuo.hooks) == 0 {
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *StatusItemUpdateOne) SaveX(ctx context.Context) *StatusItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *StatusItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *StatusItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *StatusItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdateTime(); !ok {
		v := statusitem.UpdateDefaultUpdateTime()
		siuo.mutation.SetUpdateTime(v)
	}
}

func (siuo *StatusItemUpdateOne) sqlSave(ctx context.Context) (_node *StatusItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusitem.Table,
			Columns: statusitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusitem.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statusitem.FieldID)
		for _, f := range fields {
			if !statusitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statusitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusitem.FieldUpdateTime,
		})
	}
	if value, ok := siuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStringRef,
		})
	}
	if siuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStringRef,
		})
	}
	if value, ok := siuo.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldStatusCode,
		})
	}
	if siuo.mutation.StatusCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldStatusCode,
		})
	}
	if value, ok := siuo.mutation.SequenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siuo.mutation.AddedSequenceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statusitem.FieldSequenceID,
		})
	}
	if siuo.mutation.SequenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statusitem.FieldSequenceID,
		})
	}
	if value, ok := siuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusitem.FieldDescription,
		})
	}
	if siuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusitem.FieldDescription,
		})
	}
	if siuo.mutation.StatusTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.StatusTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusitem.StatusTypeTable,
			Columns: []string{statusitem.StatusTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedPartiesIDs(); len(nodes) > 0 && !siuo.mutation.PartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.PartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartiesTable,
			Columns: []string{statusitem.PartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedPartyStatusesIDs(); len(nodes) > 0 && !siuo.mutation.PartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.PartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.PartyStatusesTable,
			Columns: []string{statusitem.PartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedMainStatusValidChangesIDs(); len(nodes) > 0 && !siuo.mutation.MainStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.MainStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.MainStatusValidChangesTable,
			Columns: []string{statusitem.MainStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedToStatusValidChangesIDs(); len(nodes) > 0 && !siuo.mutation.ToStatusValidChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ToStatusValidChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.ToStatusValidChangesTable,
			Columns: []string{statusitem.ToStatusValidChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusvalidchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.CurrentWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedCurrentWorkEffortsIDs(); len(nodes) > 0 && !siuo.mutation.CurrentWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.CurrentWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.CurrentWorkEffortsTable,
			Columns: []string{statusitem.CurrentWorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !siuo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.WorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.AvailabilityWorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedAvailabilityWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !siuo.mutation.AvailabilityWorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.AvailabilityWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortFixedAssetAssignsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.AssignmentWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedAssignmentWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !siuo.mutation.AssignmentWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.AssignmentWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AssignmentWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AssignmentWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.AvailabilityWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedAvailabilityWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !siuo.mutation.AvailabilityWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.AvailabilityWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusitem.AvailabilityWorkEffortPartyAssignmentsTable,
			Columns: []string{statusitem.AvailabilityWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatusItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
