// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusvalidchange"
)

// StatusValidChange is the model entity for the StatusValidChange schema.
type StatusValidChange struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// ConditionExpression holds the value of the "condition_expression" field.
	ConditionExpression string `json:"condition_expression,omitempty"`
	// TransitionName holds the value of the "transition_name" field.
	TransitionName string `json:"transition_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusValidChangeQuery when eager-loading is set.
	Edges                                 StatusValidChangeEdges `json:"edges"`
	status_item_main_status_valid_changes *int
	status_item_to_status_valid_changes   *int
}

// StatusValidChangeEdges holds the relations/edges for other nodes in the graph.
type StatusValidChangeEdges struct {
	// MainStatusItem holds the value of the main_status_item edge.
	MainStatusItem *StatusItem `json:"main_status_item,omitempty"`
	// ToStatusItem holds the value of the to_status_item edge.
	ToStatusItem *StatusItem `json:"to_status_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MainStatusItemOrErr returns the MainStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusValidChangeEdges) MainStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[0] {
		if e.MainStatusItem == nil {
			// The edge main_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.MainStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "main_status_item"}
}

// ToStatusItemOrErr returns the ToStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusValidChangeEdges) ToStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[1] {
		if e.ToStatusItem == nil {
			// The edge to_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.ToStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "to_status_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusValidChange) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case statusvalidchange.FieldID:
			values[i] = new(sql.NullInt64)
		case statusvalidchange.FieldStringRef, statusvalidchange.FieldConditionExpression, statusvalidchange.FieldTransitionName:
			values[i] = new(sql.NullString)
		case statusvalidchange.FieldCreateTime, statusvalidchange.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case statusvalidchange.ForeignKeys[0]: // status_item_main_status_valid_changes
			values[i] = new(sql.NullInt64)
		case statusvalidchange.ForeignKeys[1]: // status_item_to_status_valid_changes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StatusValidChange", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusValidChange fields.
func (svc *StatusValidChange) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statusvalidchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			svc.ID = int(value.Int64)
		case statusvalidchange.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				svc.CreateTime = value.Time
			}
		case statusvalidchange.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				svc.UpdateTime = value.Time
			}
		case statusvalidchange.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				svc.StringRef = value.String
			}
		case statusvalidchange.FieldConditionExpression:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition_expression", values[i])
			} else if value.Valid {
				svc.ConditionExpression = value.String
			}
		case statusvalidchange.FieldTransitionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transition_name", values[i])
			} else if value.Valid {
				svc.TransitionName = value.String
			}
		case statusvalidchange.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_main_status_valid_changes", value)
			} else if value.Valid {
				svc.status_item_main_status_valid_changes = new(int)
				*svc.status_item_main_status_valid_changes = int(value.Int64)
			}
		case statusvalidchange.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_to_status_valid_changes", value)
			} else if value.Valid {
				svc.status_item_to_status_valid_changes = new(int)
				*svc.status_item_to_status_valid_changes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMainStatusItem queries the "main_status_item" edge of the StatusValidChange entity.
func (svc *StatusValidChange) QueryMainStatusItem() *StatusItemQuery {
	return (&StatusValidChangeClient{config: svc.config}).QueryMainStatusItem(svc)
}

// QueryToStatusItem queries the "to_status_item" edge of the StatusValidChange entity.
func (svc *StatusValidChange) QueryToStatusItem() *StatusItemQuery {
	return (&StatusValidChangeClient{config: svc.config}).QueryToStatusItem(svc)
}

// Update returns a builder for updating this StatusValidChange.
// Note that you need to call StatusValidChange.Unwrap() before calling this method if this StatusValidChange
// was returned from a transaction, and the transaction was committed or rolled back.
func (svc *StatusValidChange) Update() *StatusValidChangeUpdateOne {
	return (&StatusValidChangeClient{config: svc.config}).UpdateOne(svc)
}

// Unwrap unwraps the StatusValidChange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (svc *StatusValidChange) Unwrap() *StatusValidChange {
	tx, ok := svc.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusValidChange is not a transactional entity")
	}
	svc.config.driver = tx.drv
	return svc
}

// String implements the fmt.Stringer.
func (svc *StatusValidChange) String() string {
	var builder strings.Builder
	builder.WriteString("StatusValidChange(")
	builder.WriteString(fmt.Sprintf("id=%v", svc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(svc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(svc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(svc.StringRef)
	builder.WriteString(", condition_expression=")
	builder.WriteString(svc.ConditionExpression)
	builder.WriteString(", transition_name=")
	builder.WriteString(svc.TransitionName)
	builder.WriteByte(')')
	return builder.String()
}

// StatusValidChanges is a parsable slice of StatusValidChange.
type StatusValidChanges []*StatusValidChange

func (svc StatusValidChanges) config(cfg config) {
	for _i := range svc {
		svc[_i].config = cfg
	}
}
