// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusvalidchange"
)

// StatusValidChangeUpdate is the builder for updating StatusValidChange entities.
type StatusValidChangeUpdate struct {
	config
	hooks    []Hook
	mutation *StatusValidChangeMutation
}

// Where adds a new predicate for the StatusValidChangeUpdate builder.
func (svcu *StatusValidChangeUpdate) Where(ps ...predicate.StatusValidChange) *StatusValidChangeUpdate {
	svcu.mutation.predicates = append(svcu.mutation.predicates, ps...)
	return svcu
}

// SetStringRef sets the "string_ref" field.
func (svcu *StatusValidChangeUpdate) SetStringRef(s string) *StatusValidChangeUpdate {
	svcu.mutation.SetStringRef(s)
	return svcu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (svcu *StatusValidChangeUpdate) SetNillableStringRef(s *string) *StatusValidChangeUpdate {
	if s != nil {
		svcu.SetStringRef(*s)
	}
	return svcu
}

// ClearStringRef clears the value of the "string_ref" field.
func (svcu *StatusValidChangeUpdate) ClearStringRef() *StatusValidChangeUpdate {
	svcu.mutation.ClearStringRef()
	return svcu
}

// SetConditionExpression sets the "condition_expression" field.
func (svcu *StatusValidChangeUpdate) SetConditionExpression(s string) *StatusValidChangeUpdate {
	svcu.mutation.SetConditionExpression(s)
	return svcu
}

// SetNillableConditionExpression sets the "condition_expression" field if the given value is not nil.
func (svcu *StatusValidChangeUpdate) SetNillableConditionExpression(s *string) *StatusValidChangeUpdate {
	if s != nil {
		svcu.SetConditionExpression(*s)
	}
	return svcu
}

// ClearConditionExpression clears the value of the "condition_expression" field.
func (svcu *StatusValidChangeUpdate) ClearConditionExpression() *StatusValidChangeUpdate {
	svcu.mutation.ClearConditionExpression()
	return svcu
}

// SetTransitionName sets the "transition_name" field.
func (svcu *StatusValidChangeUpdate) SetTransitionName(s string) *StatusValidChangeUpdate {
	svcu.mutation.SetTransitionName(s)
	return svcu
}

// SetNillableTransitionName sets the "transition_name" field if the given value is not nil.
func (svcu *StatusValidChangeUpdate) SetNillableTransitionName(s *string) *StatusValidChangeUpdate {
	if s != nil {
		svcu.SetTransitionName(*s)
	}
	return svcu
}

// ClearTransitionName clears the value of the "transition_name" field.
func (svcu *StatusValidChangeUpdate) ClearTransitionName() *StatusValidChangeUpdate {
	svcu.mutation.ClearTransitionName()
	return svcu
}

// SetMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID.
func (svcu *StatusValidChangeUpdate) SetMainStatusItemID(id int) *StatusValidChangeUpdate {
	svcu.mutation.SetMainStatusItemID(id)
	return svcu
}

// SetNillableMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcu *StatusValidChangeUpdate) SetNillableMainStatusItemID(id *int) *StatusValidChangeUpdate {
	if id != nil {
		svcu = svcu.SetMainStatusItemID(*id)
	}
	return svcu
}

// SetMainStatusItem sets the "main_status_item" edge to the StatusItem entity.
func (svcu *StatusValidChangeUpdate) SetMainStatusItem(s *StatusItem) *StatusValidChangeUpdate {
	return svcu.SetMainStatusItemID(s.ID)
}

// SetToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID.
func (svcu *StatusValidChangeUpdate) SetToStatusItemID(id int) *StatusValidChangeUpdate {
	svcu.mutation.SetToStatusItemID(id)
	return svcu
}

// SetNillableToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcu *StatusValidChangeUpdate) SetNillableToStatusItemID(id *int) *StatusValidChangeUpdate {
	if id != nil {
		svcu = svcu.SetToStatusItemID(*id)
	}
	return svcu
}

// SetToStatusItem sets the "to_status_item" edge to the StatusItem entity.
func (svcu *StatusValidChangeUpdate) SetToStatusItem(s *StatusItem) *StatusValidChangeUpdate {
	return svcu.SetToStatusItemID(s.ID)
}

// Mutation returns the StatusValidChangeMutation object of the builder.
func (svcu *StatusValidChangeUpdate) Mutation() *StatusValidChangeMutation {
	return svcu.mutation
}

// ClearMainStatusItem clears the "main_status_item" edge to the StatusItem entity.
func (svcu *StatusValidChangeUpdate) ClearMainStatusItem() *StatusValidChangeUpdate {
	svcu.mutation.ClearMainStatusItem()
	return svcu
}

// ClearToStatusItem clears the "to_status_item" edge to the StatusItem entity.
func (svcu *StatusValidChangeUpdate) ClearToStatusItem() *StatusValidChangeUpdate {
	svcu.mutation.ClearToStatusItem()
	return svcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svcu *StatusValidChangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	svcu.defaults()
	if len(svcu.hooks) == 0 {
		affected, err = svcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusValidChangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svcu.mutation = mutation
			affected, err = svcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(svcu.hooks) - 1; i >= 0; i-- {
			mut = svcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (svcu *StatusValidChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := svcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svcu *StatusValidChangeUpdate) Exec(ctx context.Context) error {
	_, err := svcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcu *StatusValidChangeUpdate) ExecX(ctx context.Context) {
	if err := svcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svcu *StatusValidChangeUpdate) defaults() {
	if _, ok := svcu.mutation.UpdateTime(); !ok {
		v := statusvalidchange.UpdateDefaultUpdateTime()
		svcu.mutation.SetUpdateTime(v)
	}
}

func (svcu *StatusValidChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusvalidchange.Table,
			Columns: statusvalidchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusvalidchange.FieldID,
			},
		},
	}
	if ps := svcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusvalidchange.FieldUpdateTime,
		})
	}
	if value, ok := svcu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldStringRef,
		})
	}
	if svcu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldStringRef,
		})
	}
	if value, ok := svcu.mutation.ConditionExpression(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldConditionExpression,
		})
	}
	if svcu.mutation.ConditionExpressionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldConditionExpression,
		})
	}
	if value, ok := svcu.mutation.TransitionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldTransitionName,
		})
	}
	if svcu.mutation.TransitionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldTransitionName,
		})
	}
	if svcu.mutation.MainStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.MainStatusItemTable,
			Columns: []string{statusvalidchange.MainStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svcu.mutation.MainStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.MainStatusItemTable,
			Columns: []string{statusvalidchange.MainStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svcu.mutation.ToStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.ToStatusItemTable,
			Columns: []string{statusvalidchange.ToStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svcu.mutation.ToStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.ToStatusItemTable,
			Columns: []string{statusvalidchange.ToStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusvalidchange.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusValidChangeUpdateOne is the builder for updating a single StatusValidChange entity.
type StatusValidChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusValidChangeMutation
}

// SetStringRef sets the "string_ref" field.
func (svcuo *StatusValidChangeUpdateOne) SetStringRef(s string) *StatusValidChangeUpdateOne {
	svcuo.mutation.SetStringRef(s)
	return svcuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (svcuo *StatusValidChangeUpdateOne) SetNillableStringRef(s *string) *StatusValidChangeUpdateOne {
	if s != nil {
		svcuo.SetStringRef(*s)
	}
	return svcuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (svcuo *StatusValidChangeUpdateOne) ClearStringRef() *StatusValidChangeUpdateOne {
	svcuo.mutation.ClearStringRef()
	return svcuo
}

// SetConditionExpression sets the "condition_expression" field.
func (svcuo *StatusValidChangeUpdateOne) SetConditionExpression(s string) *StatusValidChangeUpdateOne {
	svcuo.mutation.SetConditionExpression(s)
	return svcuo
}

// SetNillableConditionExpression sets the "condition_expression" field if the given value is not nil.
func (svcuo *StatusValidChangeUpdateOne) SetNillableConditionExpression(s *string) *StatusValidChangeUpdateOne {
	if s != nil {
		svcuo.SetConditionExpression(*s)
	}
	return svcuo
}

// ClearConditionExpression clears the value of the "condition_expression" field.
func (svcuo *StatusValidChangeUpdateOne) ClearConditionExpression() *StatusValidChangeUpdateOne {
	svcuo.mutation.ClearConditionExpression()
	return svcuo
}

// SetTransitionName sets the "transition_name" field.
func (svcuo *StatusValidChangeUpdateOne) SetTransitionName(s string) *StatusValidChangeUpdateOne {
	svcuo.mutation.SetTransitionName(s)
	return svcuo
}

// SetNillableTransitionName sets the "transition_name" field if the given value is not nil.
func (svcuo *StatusValidChangeUpdateOne) SetNillableTransitionName(s *string) *StatusValidChangeUpdateOne {
	if s != nil {
		svcuo.SetTransitionName(*s)
	}
	return svcuo
}

// ClearTransitionName clears the value of the "transition_name" field.
func (svcuo *StatusValidChangeUpdateOne) ClearTransitionName() *StatusValidChangeUpdateOne {
	svcuo.mutation.ClearTransitionName()
	return svcuo
}

// SetMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID.
func (svcuo *StatusValidChangeUpdateOne) SetMainStatusItemID(id int) *StatusValidChangeUpdateOne {
	svcuo.mutation.SetMainStatusItemID(id)
	return svcuo
}

// SetNillableMainStatusItemID sets the "main_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcuo *StatusValidChangeUpdateOne) SetNillableMainStatusItemID(id *int) *StatusValidChangeUpdateOne {
	if id != nil {
		svcuo = svcuo.SetMainStatusItemID(*id)
	}
	return svcuo
}

// SetMainStatusItem sets the "main_status_item" edge to the StatusItem entity.
func (svcuo *StatusValidChangeUpdateOne) SetMainStatusItem(s *StatusItem) *StatusValidChangeUpdateOne {
	return svcuo.SetMainStatusItemID(s.ID)
}

// SetToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID.
func (svcuo *StatusValidChangeUpdateOne) SetToStatusItemID(id int) *StatusValidChangeUpdateOne {
	svcuo.mutation.SetToStatusItemID(id)
	return svcuo
}

// SetNillableToStatusItemID sets the "to_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (svcuo *StatusValidChangeUpdateOne) SetNillableToStatusItemID(id *int) *StatusValidChangeUpdateOne {
	if id != nil {
		svcuo = svcuo.SetToStatusItemID(*id)
	}
	return svcuo
}

// SetToStatusItem sets the "to_status_item" edge to the StatusItem entity.
func (svcuo *StatusValidChangeUpdateOne) SetToStatusItem(s *StatusItem) *StatusValidChangeUpdateOne {
	return svcuo.SetToStatusItemID(s.ID)
}

// Mutation returns the StatusValidChangeMutation object of the builder.
func (svcuo *StatusValidChangeUpdateOne) Mutation() *StatusValidChangeMutation {
	return svcuo.mutation
}

// ClearMainStatusItem clears the "main_status_item" edge to the StatusItem entity.
func (svcuo *StatusValidChangeUpdateOne) ClearMainStatusItem() *StatusValidChangeUpdateOne {
	svcuo.mutation.ClearMainStatusItem()
	return svcuo
}

// ClearToStatusItem clears the "to_status_item" edge to the StatusItem entity.
func (svcuo *StatusValidChangeUpdateOne) ClearToStatusItem() *StatusValidChangeUpdateOne {
	svcuo.mutation.ClearToStatusItem()
	return svcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svcuo *StatusValidChangeUpdateOne) Select(field string, fields ...string) *StatusValidChangeUpdateOne {
	svcuo.fields = append([]string{field}, fields...)
	return svcuo
}

// Save executes the query and returns the updated StatusValidChange entity.
func (svcuo *StatusValidChangeUpdateOne) Save(ctx context.Context) (*StatusValidChange, error) {
	var (
		err  error
		node *StatusValidChange
	)
	svcuo.defaults()
	if len(svcuo.hooks) == 0 {
		node, err = svcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusValidChangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svcuo.mutation = mutation
			node, err = svcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(svcuo.hooks) - 1; i >= 0; i-- {
			mut = svcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (svcuo *StatusValidChangeUpdateOne) SaveX(ctx context.Context) *StatusValidChange {
	node, err := svcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svcuo *StatusValidChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := svcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcuo *StatusValidChangeUpdateOne) ExecX(ctx context.Context) {
	if err := svcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svcuo *StatusValidChangeUpdateOne) defaults() {
	if _, ok := svcuo.mutation.UpdateTime(); !ok {
		v := statusvalidchange.UpdateDefaultUpdateTime()
		svcuo.mutation.SetUpdateTime(v)
	}
}

func (svcuo *StatusValidChangeUpdateOne) sqlSave(ctx context.Context) (_node *StatusValidChange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusvalidchange.Table,
			Columns: statusvalidchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusvalidchange.FieldID,
			},
		},
	}
	id, ok := svcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusValidChange.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := svcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statusvalidchange.FieldID)
		for _, f := range fields {
			if !statusvalidchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statusvalidchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statusvalidchange.FieldUpdateTime,
		})
	}
	if value, ok := svcuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldStringRef,
		})
	}
	if svcuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldStringRef,
		})
	}
	if value, ok := svcuo.mutation.ConditionExpression(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldConditionExpression,
		})
	}
	if svcuo.mutation.ConditionExpressionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldConditionExpression,
		})
	}
	if value, ok := svcuo.mutation.TransitionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusvalidchange.FieldTransitionName,
		})
	}
	if svcuo.mutation.TransitionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: statusvalidchange.FieldTransitionName,
		})
	}
	if svcuo.mutation.MainStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.MainStatusItemTable,
			Columns: []string{statusvalidchange.MainStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svcuo.mutation.MainStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.MainStatusItemTable,
			Columns: []string{statusvalidchange.MainStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svcuo.mutation.ToStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.ToStatusItemTable,
			Columns: []string{statusvalidchange.ToStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svcuo.mutation.ToStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statusvalidchange.ToStatusItemTable,
			Columns: []string{statusvalidchange.ToStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatusValidChange{config: svcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusvalidchange.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
