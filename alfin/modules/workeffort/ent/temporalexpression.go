// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
)

// TemporalExpression is the model entity for the TemporalExpression schema.
type TemporalExpression struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TempExprTypeID holds the value of the "temp_expr_type_id" field.
	TempExprTypeID int `json:"temp_expr_type_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Date1 holds the value of the "date_1" field.
	Date1 time.Time `json:"date_1,omitempty"`
	// Date2 holds the value of the "date_2" field.
	Date2 time.Time `json:"date_2,omitempty"`
	// Integer1 holds the value of the "integer_1" field.
	Integer1 int `json:"integer_1,omitempty"`
	// Integer2 holds the value of the "integer_2" field.
	Integer2 int `json:"integer_2,omitempty"`
	// String1 holds the value of the "string_1" field.
	String1 int `json:"string_1,omitempty"`
	// String2 holds the value of the "string_2" field.
	String2 int `json:"string_2,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemporalExpressionQuery when eager-loading is set.
	Edges TemporalExpressionEdges `json:"edges"`
}

// TemporalExpressionEdges holds the relations/edges for other nodes in the graph.
type TemporalExpressionEdges struct {
	// FromTemporalExpressionAssocs holds the value of the from_temporal_expression_assocs edge.
	FromTemporalExpressionAssocs []*TemporalExpressionAssoc `json:"from_temporal_expression_assocs,omitempty"`
	// ToTemporalExpressionAssocs holds the value of the to_temporal_expression_assocs edge.
	ToTemporalExpressionAssocs []*TemporalExpressionAssoc `json:"to_temporal_expression_assocs,omitempty"`
	// WorkEfforts holds the value of the work_efforts edge.
	WorkEfforts []*WorkEffort `json:"work_efforts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FromTemporalExpressionAssocsOrErr returns the FromTemporalExpressionAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e TemporalExpressionEdges) FromTemporalExpressionAssocsOrErr() ([]*TemporalExpressionAssoc, error) {
	if e.loadedTypes[0] {
		return e.FromTemporalExpressionAssocs, nil
	}
	return nil, &NotLoadedError{edge: "from_temporal_expression_assocs"}
}

// ToTemporalExpressionAssocsOrErr returns the ToTemporalExpressionAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e TemporalExpressionEdges) ToTemporalExpressionAssocsOrErr() ([]*TemporalExpressionAssoc, error) {
	if e.loadedTypes[1] {
		return e.ToTemporalExpressionAssocs, nil
	}
	return nil, &NotLoadedError{edge: "to_temporal_expression_assocs"}
}

// WorkEffortsOrErr returns the WorkEfforts value or an error if the edge
// was not loaded in eager-loading.
func (e TemporalExpressionEdges) WorkEffortsOrErr() ([]*WorkEffort, error) {
	if e.loadedTypes[2] {
		return e.WorkEfforts, nil
	}
	return nil, &NotLoadedError{edge: "work_efforts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemporalExpression) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case temporalexpression.FieldID, temporalexpression.FieldTempExprTypeID, temporalexpression.FieldInteger1, temporalexpression.FieldInteger2, temporalexpression.FieldString1, temporalexpression.FieldString2:
			values[i] = new(sql.NullInt64)
		case temporalexpression.FieldDescription:
			values[i] = new(sql.NullString)
		case temporalexpression.FieldDate1, temporalexpression.FieldDate2:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TemporalExpression", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemporalExpression fields.
func (te *TemporalExpression) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case temporalexpression.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			te.ID = int(value.Int64)
		case temporalexpression.FieldTempExprTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field temp_expr_type_id", values[i])
			} else if value.Valid {
				te.TempExprTypeID = int(value.Int64)
			}
		case temporalexpression.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				te.Description = value.String
			}
		case temporalexpression.FieldDate1:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_1", values[i])
			} else if value.Valid {
				te.Date1 = value.Time
			}
		case temporalexpression.FieldDate2:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_2", values[i])
			} else if value.Valid {
				te.Date2 = value.Time
			}
		case temporalexpression.FieldInteger1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field integer_1", values[i])
			} else if value.Valid {
				te.Integer1 = int(value.Int64)
			}
		case temporalexpression.FieldInteger2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field integer_2", values[i])
			} else if value.Valid {
				te.Integer2 = int(value.Int64)
			}
		case temporalexpression.FieldString1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field string_1", values[i])
			} else if value.Valid {
				te.String1 = int(value.Int64)
			}
		case temporalexpression.FieldString2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field string_2", values[i])
			} else if value.Valid {
				te.String2 = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFromTemporalExpressionAssocs queries the "from_temporal_expression_assocs" edge of the TemporalExpression entity.
func (te *TemporalExpression) QueryFromTemporalExpressionAssocs() *TemporalExpressionAssocQuery {
	return (&TemporalExpressionClient{config: te.config}).QueryFromTemporalExpressionAssocs(te)
}

// QueryToTemporalExpressionAssocs queries the "to_temporal_expression_assocs" edge of the TemporalExpression entity.
func (te *TemporalExpression) QueryToTemporalExpressionAssocs() *TemporalExpressionAssocQuery {
	return (&TemporalExpressionClient{config: te.config}).QueryToTemporalExpressionAssocs(te)
}

// QueryWorkEfforts queries the "work_efforts" edge of the TemporalExpression entity.
func (te *TemporalExpression) QueryWorkEfforts() *WorkEffortQuery {
	return (&TemporalExpressionClient{config: te.config}).QueryWorkEfforts(te)
}

// Update returns a builder for updating this TemporalExpression.
// Note that you need to call TemporalExpression.Unwrap() before calling this method if this TemporalExpression
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TemporalExpression) Update() *TemporalExpressionUpdateOne {
	return (&TemporalExpressionClient{config: te.config}).UpdateOne(te)
}

// Unwrap unwraps the TemporalExpression entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TemporalExpression) Unwrap() *TemporalExpression {
	tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TemporalExpression is not a transactional entity")
	}
	te.config.driver = tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TemporalExpression) String() string {
	var builder strings.Builder
	builder.WriteString("TemporalExpression(")
	builder.WriteString(fmt.Sprintf("id=%v", te.ID))
	builder.WriteString(", temp_expr_type_id=")
	builder.WriteString(fmt.Sprintf("%v", te.TempExprTypeID))
	builder.WriteString(", description=")
	builder.WriteString(te.Description)
	builder.WriteString(", date_1=")
	builder.WriteString(te.Date1.Format(time.ANSIC))
	builder.WriteString(", date_2=")
	builder.WriteString(te.Date2.Format(time.ANSIC))
	builder.WriteString(", integer_1=")
	builder.WriteString(fmt.Sprintf("%v", te.Integer1))
	builder.WriteString(", integer_2=")
	builder.WriteString(fmt.Sprintf("%v", te.Integer2))
	builder.WriteString(", string_1=")
	builder.WriteString(fmt.Sprintf("%v", te.String1))
	builder.WriteString(", string_2=")
	builder.WriteString(fmt.Sprintf("%v", te.String2))
	builder.WriteByte(')')
	return builder.String()
}

// TemporalExpressions is a parsable slice of TemporalExpression.
type TemporalExpressions []*TemporalExpression

func (te TemporalExpressions) config(cfg config) {
	for _i := range te {
		te[_i].config = cfg
	}
}
