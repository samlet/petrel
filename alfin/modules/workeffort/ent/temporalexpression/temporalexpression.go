// Code generated by entc, DO NOT EDIT.

package temporalexpression

import (
	"time"
)

const (
	// Label holds the string label denoting the temporalexpression type in the database.
	Label = "temporal_expression"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTempExprTypeID holds the string denoting the temp_expr_type_id field in the database.
	FieldTempExprTypeID = "temp_expr_type_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDate1 holds the string denoting the date_1 field in the database.
	FieldDate1 = "date_1"
	// FieldDate2 holds the string denoting the date_2 field in the database.
	FieldDate2 = "date_2"
	// FieldInteger1 holds the string denoting the integer_1 field in the database.
	FieldInteger1 = "integer_1"
	// FieldInteger2 holds the string denoting the integer_2 field in the database.
	FieldInteger2 = "integer_2"
	// FieldString1 holds the string denoting the string_1 field in the database.
	FieldString1 = "string_1"
	// FieldString2 holds the string denoting the string_2 field in the database.
	FieldString2 = "string_2"
	// EdgeFromTemporalExpressionAssocs holds the string denoting the from_temporal_expression_assocs edge name in mutations.
	EdgeFromTemporalExpressionAssocs = "from_temporal_expression_assocs"
	// EdgeToTemporalExpressionAssocs holds the string denoting the to_temporal_expression_assocs edge name in mutations.
	EdgeToTemporalExpressionAssocs = "to_temporal_expression_assocs"
	// EdgeWorkEfforts holds the string denoting the work_efforts edge name in mutations.
	EdgeWorkEfforts = "work_efforts"
	// Table holds the table name of the temporalexpression in the database.
	Table = "temporal_expressions"
	// FromTemporalExpressionAssocsTable is the table the holds the from_temporal_expression_assocs relation/edge.
	FromTemporalExpressionAssocsTable = "temporal_expression_assocs"
	// FromTemporalExpressionAssocsInverseTable is the table name for the TemporalExpressionAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "temporalexpressionassoc" package.
	FromTemporalExpressionAssocsInverseTable = "temporal_expression_assocs"
	// FromTemporalExpressionAssocsColumn is the table column denoting the from_temporal_expression_assocs relation/edge.
	FromTemporalExpressionAssocsColumn = "temporal_expression_from_temporal_expression_assocs"
	// ToTemporalExpressionAssocsTable is the table the holds the to_temporal_expression_assocs relation/edge.
	ToTemporalExpressionAssocsTable = "temporal_expression_assocs"
	// ToTemporalExpressionAssocsInverseTable is the table name for the TemporalExpressionAssoc entity.
	// It exists in this package in order to avoid circular dependency with the "temporalexpressionassoc" package.
	ToTemporalExpressionAssocsInverseTable = "temporal_expression_assocs"
	// ToTemporalExpressionAssocsColumn is the table column denoting the to_temporal_expression_assocs relation/edge.
	ToTemporalExpressionAssocsColumn = "temporal_expression_to_temporal_expression_assocs"
	// WorkEffortsTable is the table the holds the work_efforts relation/edge.
	WorkEffortsTable = "work_efforts"
	// WorkEffortsInverseTable is the table name for the WorkEffort entity.
	// It exists in this package in order to avoid circular dependency with the "workeffort" package.
	WorkEffortsInverseTable = "work_efforts"
	// WorkEffortsColumn is the table column denoting the work_efforts relation/edge.
	WorkEffortsColumn = "temporal_expression_work_efforts"
)

// Columns holds all SQL columns for temporalexpression fields.
var Columns = []string{
	FieldID,
	FieldTempExprTypeID,
	FieldDescription,
	FieldDate1,
	FieldDate2,
	FieldInteger1,
	FieldInteger2,
	FieldString1,
	FieldString2,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDate1 holds the default value on creation for the "date_1" field.
	DefaultDate1 func() time.Time
	// DefaultDate2 holds the default value on creation for the "date_2" field.
	DefaultDate2 func() time.Time
)
