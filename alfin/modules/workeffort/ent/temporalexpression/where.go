// Code generated by entc, DO NOT EDIT.

package temporalexpression

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// TempExprTypeID applies equality check predicate on the "temp_expr_type_id" field. It's identical to TempExprTypeIDEQ.
func TempExprTypeID(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTempExprTypeID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Date1 applies equality check predicate on the "date_1" field. It's identical to Date1EQ.
func Date1(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate1), v))
	})
}

// Date2 applies equality check predicate on the "date_2" field. It's identical to Date2EQ.
func Date2(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate2), v))
	})
}

// Integer1 applies equality check predicate on the "integer_1" field. It's identical to Integer1EQ.
func Integer1(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInteger1), v))
	})
}

// Integer2 applies equality check predicate on the "integer_2" field. It's identical to Integer2EQ.
func Integer2(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInteger2), v))
	})
}

// String1 applies equality check predicate on the "string_1" field. It's identical to String1EQ.
func String1(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String2 applies equality check predicate on the "string_2" field. It's identical to String2EQ.
func String2(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// TempExprTypeIDEQ applies the EQ predicate on the "temp_expr_type_id" field.
func TempExprTypeIDEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDNEQ applies the NEQ predicate on the "temp_expr_type_id" field.
func TempExprTypeIDNEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDIn applies the In predicate on the "temp_expr_type_id" field.
func TempExprTypeIDIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTempExprTypeID), v...))
	})
}

// TempExprTypeIDNotIn applies the NotIn predicate on the "temp_expr_type_id" field.
func TempExprTypeIDNotIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTempExprTypeID), v...))
	})
}

// TempExprTypeIDGT applies the GT predicate on the "temp_expr_type_id" field.
func TempExprTypeIDGT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDGTE applies the GTE predicate on the "temp_expr_type_id" field.
func TempExprTypeIDGTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDLT applies the LT predicate on the "temp_expr_type_id" field.
func TempExprTypeIDLT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDLTE applies the LTE predicate on the "temp_expr_type_id" field.
func TempExprTypeIDLTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTempExprTypeID), v))
	})
}

// TempExprTypeIDIsNil applies the IsNil predicate on the "temp_expr_type_id" field.
func TempExprTypeIDIsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTempExprTypeID)))
	})
}

// TempExprTypeIDNotNil applies the NotNil predicate on the "temp_expr_type_id" field.
func TempExprTypeIDNotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTempExprTypeID)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// Date1EQ applies the EQ predicate on the "date_1" field.
func Date1EQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate1), v))
	})
}

// Date1NEQ applies the NEQ predicate on the "date_1" field.
func Date1NEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate1), v))
	})
}

// Date1In applies the In predicate on the "date_1" field.
func Date1In(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate1), v...))
	})
}

// Date1NotIn applies the NotIn predicate on the "date_1" field.
func Date1NotIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate1), v...))
	})
}

// Date1GT applies the GT predicate on the "date_1" field.
func Date1GT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate1), v))
	})
}

// Date1GTE applies the GTE predicate on the "date_1" field.
func Date1GTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate1), v))
	})
}

// Date1LT applies the LT predicate on the "date_1" field.
func Date1LT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate1), v))
	})
}

// Date1LTE applies the LTE predicate on the "date_1" field.
func Date1LTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate1), v))
	})
}

// Date1IsNil applies the IsNil predicate on the "date_1" field.
func Date1IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDate1)))
	})
}

// Date1NotNil applies the NotNil predicate on the "date_1" field.
func Date1NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDate1)))
	})
}

// Date2EQ applies the EQ predicate on the "date_2" field.
func Date2EQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate2), v))
	})
}

// Date2NEQ applies the NEQ predicate on the "date_2" field.
func Date2NEQ(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate2), v))
	})
}

// Date2In applies the In predicate on the "date_2" field.
func Date2In(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate2), v...))
	})
}

// Date2NotIn applies the NotIn predicate on the "date_2" field.
func Date2NotIn(vs ...time.Time) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate2), v...))
	})
}

// Date2GT applies the GT predicate on the "date_2" field.
func Date2GT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate2), v))
	})
}

// Date2GTE applies the GTE predicate on the "date_2" field.
func Date2GTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate2), v))
	})
}

// Date2LT applies the LT predicate on the "date_2" field.
func Date2LT(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate2), v))
	})
}

// Date2LTE applies the LTE predicate on the "date_2" field.
func Date2LTE(v time.Time) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate2), v))
	})
}

// Date2IsNil applies the IsNil predicate on the "date_2" field.
func Date2IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDate2)))
	})
}

// Date2NotNil applies the NotNil predicate on the "date_2" field.
func Date2NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDate2)))
	})
}

// Integer1EQ applies the EQ predicate on the "integer_1" field.
func Integer1EQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInteger1), v))
	})
}

// Integer1NEQ applies the NEQ predicate on the "integer_1" field.
func Integer1NEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInteger1), v))
	})
}

// Integer1In applies the In predicate on the "integer_1" field.
func Integer1In(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInteger1), v...))
	})
}

// Integer1NotIn applies the NotIn predicate on the "integer_1" field.
func Integer1NotIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInteger1), v...))
	})
}

// Integer1GT applies the GT predicate on the "integer_1" field.
func Integer1GT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInteger1), v))
	})
}

// Integer1GTE applies the GTE predicate on the "integer_1" field.
func Integer1GTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInteger1), v))
	})
}

// Integer1LT applies the LT predicate on the "integer_1" field.
func Integer1LT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInteger1), v))
	})
}

// Integer1LTE applies the LTE predicate on the "integer_1" field.
func Integer1LTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInteger1), v))
	})
}

// Integer1IsNil applies the IsNil predicate on the "integer_1" field.
func Integer1IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInteger1)))
	})
}

// Integer1NotNil applies the NotNil predicate on the "integer_1" field.
func Integer1NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInteger1)))
	})
}

// Integer2EQ applies the EQ predicate on the "integer_2" field.
func Integer2EQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInteger2), v))
	})
}

// Integer2NEQ applies the NEQ predicate on the "integer_2" field.
func Integer2NEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInteger2), v))
	})
}

// Integer2In applies the In predicate on the "integer_2" field.
func Integer2In(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInteger2), v...))
	})
}

// Integer2NotIn applies the NotIn predicate on the "integer_2" field.
func Integer2NotIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInteger2), v...))
	})
}

// Integer2GT applies the GT predicate on the "integer_2" field.
func Integer2GT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInteger2), v))
	})
}

// Integer2GTE applies the GTE predicate on the "integer_2" field.
func Integer2GTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInteger2), v))
	})
}

// Integer2LT applies the LT predicate on the "integer_2" field.
func Integer2LT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInteger2), v))
	})
}

// Integer2LTE applies the LTE predicate on the "integer_2" field.
func Integer2LTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInteger2), v))
	})
}

// Integer2IsNil applies the IsNil predicate on the "integer_2" field.
func Integer2IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInteger2)))
	})
}

// Integer2NotNil applies the NotNil predicate on the "integer_2" field.
func Integer2NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInteger2)))
	})
}

// String1EQ applies the EQ predicate on the "string_1" field.
func String1EQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString1), v))
	})
}

// String1NEQ applies the NEQ predicate on the "string_1" field.
func String1NEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString1), v))
	})
}

// String1In applies the In predicate on the "string_1" field.
func String1In(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString1), v...))
	})
}

// String1NotIn applies the NotIn predicate on the "string_1" field.
func String1NotIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString1), v...))
	})
}

// String1GT applies the GT predicate on the "string_1" field.
func String1GT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString1), v))
	})
}

// String1GTE applies the GTE predicate on the "string_1" field.
func String1GTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString1), v))
	})
}

// String1LT applies the LT predicate on the "string_1" field.
func String1LT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString1), v))
	})
}

// String1LTE applies the LTE predicate on the "string_1" field.
func String1LTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString1), v))
	})
}

// String1IsNil applies the IsNil predicate on the "string_1" field.
func String1IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldString1)))
	})
}

// String1NotNil applies the NotNil predicate on the "string_1" field.
func String1NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldString1)))
	})
}

// String2EQ applies the EQ predicate on the "string_2" field.
func String2EQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldString2), v))
	})
}

// String2NEQ applies the NEQ predicate on the "string_2" field.
func String2NEQ(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldString2), v))
	})
}

// String2In applies the In predicate on the "string_2" field.
func String2In(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldString2), v...))
	})
}

// String2NotIn applies the NotIn predicate on the "string_2" field.
func String2NotIn(vs ...int) predicate.TemporalExpression {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpression(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldString2), v...))
	})
}

// String2GT applies the GT predicate on the "string_2" field.
func String2GT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldString2), v))
	})
}

// String2GTE applies the GTE predicate on the "string_2" field.
func String2GTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldString2), v))
	})
}

// String2LT applies the LT predicate on the "string_2" field.
func String2LT(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldString2), v))
	})
}

// String2LTE applies the LTE predicate on the "string_2" field.
func String2LTE(v int) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldString2), v))
	})
}

// String2IsNil applies the IsNil predicate on the "string_2" field.
func String2IsNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldString2)))
	})
}

// String2NotNil applies the NotNil predicate on the "string_2" field.
func String2NotNil() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldString2)))
	})
}

// HasFromTemporalExpressionAssocs applies the HasEdge predicate on the "from_temporal_expression_assocs" edge.
func HasFromTemporalExpressionAssocs() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromTemporalExpressionAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FromTemporalExpressionAssocsTable, FromTemporalExpressionAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromTemporalExpressionAssocsWith applies the HasEdge predicate on the "from_temporal_expression_assocs" edge with a given conditions (other predicates).
func HasFromTemporalExpressionAssocsWith(preds ...predicate.TemporalExpressionAssoc) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromTemporalExpressionAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FromTemporalExpressionAssocsTable, FromTemporalExpressionAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToTemporalExpressionAssocs applies the HasEdge predicate on the "to_temporal_expression_assocs" edge.
func HasToTemporalExpressionAssocs() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTemporalExpressionAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToTemporalExpressionAssocsTable, ToTemporalExpressionAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTemporalExpressionAssocsWith applies the HasEdge predicate on the "to_temporal_expression_assocs" edge with a given conditions (other predicates).
func HasToTemporalExpressionAssocsWith(preds ...predicate.TemporalExpressionAssoc) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTemporalExpressionAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToTemporalExpressionAssocsTable, ToTemporalExpressionAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEfforts applies the HasEdge predicate on the "work_efforts" edge.
func HasWorkEfforts() predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortsTable, WorkEffortsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortsWith applies the HasEdge predicate on the "work_efforts" edge with a given conditions (other predicates).
func HasWorkEffortsWith(preds ...predicate.WorkEffort) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortsTable, WorkEffortsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemporalExpression) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemporalExpression) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemporalExpression) predicate.TemporalExpression {
	return predicate.TemporalExpression(func(s *sql.Selector) {
		p(s.Not())
	})
}
