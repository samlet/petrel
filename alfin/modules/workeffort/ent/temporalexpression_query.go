// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
)

// TemporalExpressionQuery is the builder for querying TemporalExpression entities.
type TemporalExpressionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TemporalExpression
	// eager-loading edges.
	withFromTemporalExpressionAssocs *TemporalExpressionAssocQuery
	withToTemporalExpressionAssocs   *TemporalExpressionAssocQuery
	withWorkEfforts                  *WorkEffortQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TemporalExpressionQuery builder.
func (teq *TemporalExpressionQuery) Where(ps ...predicate.TemporalExpression) *TemporalExpressionQuery {
	teq.predicates = append(teq.predicates, ps...)
	return teq
}

// Limit adds a limit step to the query.
func (teq *TemporalExpressionQuery) Limit(limit int) *TemporalExpressionQuery {
	teq.limit = &limit
	return teq
}

// Offset adds an offset step to the query.
func (teq *TemporalExpressionQuery) Offset(offset int) *TemporalExpressionQuery {
	teq.offset = &offset
	return teq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (teq *TemporalExpressionQuery) Unique(unique bool) *TemporalExpressionQuery {
	teq.unique = &unique
	return teq
}

// Order adds an order step to the query.
func (teq *TemporalExpressionQuery) Order(o ...OrderFunc) *TemporalExpressionQuery {
	teq.order = append(teq.order, o...)
	return teq
}

// QueryFromTemporalExpressionAssocs chains the current query on the "from_temporal_expression_assocs" edge.
func (teq *TemporalExpressionQuery) QueryFromTemporalExpressionAssocs() *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: teq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, selector),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.FromTemporalExpressionAssocsTable, temporalexpression.FromTemporalExpressionAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(teq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToTemporalExpressionAssocs chains the current query on the "to_temporal_expression_assocs" edge.
func (teq *TemporalExpressionQuery) QueryToTemporalExpressionAssocs() *TemporalExpressionAssocQuery {
	query := &TemporalExpressionAssocQuery{config: teq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, selector),
			sqlgraph.To(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.ToTemporalExpressionAssocsTable, temporalexpression.ToTemporalExpressionAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(teq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEfforts chains the current query on the "work_efforts" edge.
func (teq *TemporalExpressionQuery) QueryWorkEfforts() *WorkEffortQuery {
	query := &WorkEffortQuery{config: teq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpression.Table, temporalexpression.FieldID, selector),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, temporalexpression.WorkEffortsTable, temporalexpression.WorkEffortsColumn),
		)
		fromU = sqlgraph.SetNeighbors(teq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TemporalExpression entity from the query.
// Returns a *NotFoundError when no TemporalExpression was found.
func (teq *TemporalExpressionQuery) First(ctx context.Context) (*TemporalExpression, error) {
	nodes, err := teq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{temporalexpression.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (teq *TemporalExpressionQuery) FirstX(ctx context.Context) *TemporalExpression {
	node, err := teq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TemporalExpression ID from the query.
// Returns a *NotFoundError when no TemporalExpression ID was found.
func (teq *TemporalExpressionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{temporalexpression.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (teq *TemporalExpressionQuery) FirstIDX(ctx context.Context) int {
	id, err := teq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TemporalExpression entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TemporalExpression entity is not found.
// Returns a *NotFoundError when no TemporalExpression entities are found.
func (teq *TemporalExpressionQuery) Only(ctx context.Context) (*TemporalExpression, error) {
	nodes, err := teq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{temporalexpression.Label}
	default:
		return nil, &NotSingularError{temporalexpression.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (teq *TemporalExpressionQuery) OnlyX(ctx context.Context) *TemporalExpression {
	node, err := teq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TemporalExpression ID in the query.
// Returns a *NotSingularError when exactly one TemporalExpression ID is not found.
// Returns a *NotFoundError when no entities are found.
func (teq *TemporalExpressionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = &NotSingularError{temporalexpression.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (teq *TemporalExpressionQuery) OnlyIDX(ctx context.Context) int {
	id, err := teq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TemporalExpressions.
func (teq *TemporalExpressionQuery) All(ctx context.Context) ([]*TemporalExpression, error) {
	if err := teq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return teq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (teq *TemporalExpressionQuery) AllX(ctx context.Context) []*TemporalExpression {
	nodes, err := teq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TemporalExpression IDs.
func (teq *TemporalExpressionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := teq.Select(temporalexpression.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (teq *TemporalExpressionQuery) IDsX(ctx context.Context) []int {
	ids, err := teq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (teq *TemporalExpressionQuery) Count(ctx context.Context) (int, error) {
	if err := teq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return teq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (teq *TemporalExpressionQuery) CountX(ctx context.Context) int {
	count, err := teq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (teq *TemporalExpressionQuery) Exist(ctx context.Context) (bool, error) {
	if err := teq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return teq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (teq *TemporalExpressionQuery) ExistX(ctx context.Context) bool {
	exist, err := teq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TemporalExpressionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (teq *TemporalExpressionQuery) Clone() *TemporalExpressionQuery {
	if teq == nil {
		return nil
	}
	return &TemporalExpressionQuery{
		config:                           teq.config,
		limit:                            teq.limit,
		offset:                           teq.offset,
		order:                            append([]OrderFunc{}, teq.order...),
		predicates:                       append([]predicate.TemporalExpression{}, teq.predicates...),
		withFromTemporalExpressionAssocs: teq.withFromTemporalExpressionAssocs.Clone(),
		withToTemporalExpressionAssocs:   teq.withToTemporalExpressionAssocs.Clone(),
		withWorkEfforts:                  teq.withWorkEfforts.Clone(),
		// clone intermediate query.
		sql:  teq.sql.Clone(),
		path: teq.path,
	}
}

// WithFromTemporalExpressionAssocs tells the query-builder to eager-load the nodes that are connected to
// the "from_temporal_expression_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (teq *TemporalExpressionQuery) WithFromTemporalExpressionAssocs(opts ...func(*TemporalExpressionAssocQuery)) *TemporalExpressionQuery {
	query := &TemporalExpressionAssocQuery{config: teq.config}
	for _, opt := range opts {
		opt(query)
	}
	teq.withFromTemporalExpressionAssocs = query
	return teq
}

// WithToTemporalExpressionAssocs tells the query-builder to eager-load the nodes that are connected to
// the "to_temporal_expression_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (teq *TemporalExpressionQuery) WithToTemporalExpressionAssocs(opts ...func(*TemporalExpressionAssocQuery)) *TemporalExpressionQuery {
	query := &TemporalExpressionAssocQuery{config: teq.config}
	for _, opt := range opts {
		opt(query)
	}
	teq.withToTemporalExpressionAssocs = query
	return teq
}

// WithWorkEfforts tells the query-builder to eager-load the nodes that are connected to
// the "work_efforts" edge. The optional arguments are used to configure the query builder of the edge.
func (teq *TemporalExpressionQuery) WithWorkEfforts(opts ...func(*WorkEffortQuery)) *TemporalExpressionQuery {
	query := &WorkEffortQuery{config: teq.config}
	for _, opt := range opts {
		opt(query)
	}
	teq.withWorkEfforts = query
	return teq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TemporalExpression.Query().
//		GroupBy(temporalexpression.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (teq *TemporalExpressionQuery) GroupBy(field string, fields ...string) *TemporalExpressionGroupBy {
	group := &TemporalExpressionGroupBy{config: teq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := teq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return teq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TemporalExpression.Query().
//		Select(temporalexpression.FieldCreateTime).
//		Scan(ctx, &v)
//
func (teq *TemporalExpressionQuery) Select(field string, fields ...string) *TemporalExpressionSelect {
	teq.fields = append([]string{field}, fields...)
	return &TemporalExpressionSelect{TemporalExpressionQuery: teq}
}

func (teq *TemporalExpressionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range teq.fields {
		if !temporalexpression.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if teq.path != nil {
		prev, err := teq.path(ctx)
		if err != nil {
			return err
		}
		teq.sql = prev
	}
	return nil
}

func (teq *TemporalExpressionQuery) sqlAll(ctx context.Context) ([]*TemporalExpression, error) {
	var (
		nodes       = []*TemporalExpression{}
		_spec       = teq.querySpec()
		loadedTypes = [3]bool{
			teq.withFromTemporalExpressionAssocs != nil,
			teq.withToTemporalExpressionAssocs != nil,
			teq.withWorkEfforts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TemporalExpression{config: teq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, teq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := teq.withFromTemporalExpressionAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TemporalExpression)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FromTemporalExpressionAssocs = []*TemporalExpressionAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(temporalexpression.FromTemporalExpressionAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.temporal_expression_from_temporal_expression_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "temporal_expression_from_temporal_expression_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_from_temporal_expression_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.FromTemporalExpressionAssocs = append(node.Edges.FromTemporalExpressionAssocs, n)
		}
	}

	if query := teq.withToTemporalExpressionAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TemporalExpression)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ToTemporalExpressionAssocs = []*TemporalExpressionAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(temporalexpression.ToTemporalExpressionAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.temporal_expression_to_temporal_expression_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "temporal_expression_to_temporal_expression_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_to_temporal_expression_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ToTemporalExpressionAssocs = append(node.Edges.ToTemporalExpressionAssocs, n)
		}
	}

	if query := teq.withWorkEfforts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TemporalExpression)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEfforts = []*WorkEffort{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffort(func(s *sql.Selector) {
			s.Where(sql.InValues(temporalexpression.WorkEffortsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.temporal_expression_work_efforts
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "temporal_expression_work_efforts" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_work_efforts" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEfforts = append(node.Edges.WorkEfforts, n)
		}
	}

	return nodes, nil
}

func (teq *TemporalExpressionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := teq.querySpec()
	return sqlgraph.CountNodes(ctx, teq.driver, _spec)
}

func (teq *TemporalExpressionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := teq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (teq *TemporalExpressionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpression.Table,
			Columns: temporalexpression.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpression.FieldID,
			},
		},
		From:   teq.sql,
		Unique: true,
	}
	if unique := teq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := teq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temporalexpression.FieldID)
		for i := range fields {
			if fields[i] != temporalexpression.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := teq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := teq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := teq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := teq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (teq *TemporalExpressionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(teq.driver.Dialect())
	t1 := builder.Table(temporalexpression.Table)
	columns := teq.fields
	if len(columns) == 0 {
		columns = temporalexpression.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if teq.sql != nil {
		selector = teq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range teq.predicates {
		p(selector)
	}
	for _, p := range teq.order {
		p(selector)
	}
	if offset := teq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := teq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TemporalExpressionGroupBy is the group-by builder for TemporalExpression entities.
type TemporalExpressionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tegb *TemporalExpressionGroupBy) Aggregate(fns ...AggregateFunc) *TemporalExpressionGroupBy {
	tegb.fns = append(tegb.fns, fns...)
	return tegb
}

// Scan applies the group-by query and scans the result into the given value.
func (tegb *TemporalExpressionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tegb.path(ctx)
	if err != nil {
		return err
	}
	tegb.sql = query
	return tegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tegb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) StringsX(ctx context.Context) []string {
	v, err := tegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) StringX(ctx context.Context) string {
	v, err := tegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tegb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) IntsX(ctx context.Context) []int {
	v, err := tegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) IntX(ctx context.Context) int {
	v, err := tegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tegb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tegb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tegb *TemporalExpressionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tegb *TemporalExpressionGroupBy) BoolX(ctx context.Context) bool {
	v, err := tegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tegb *TemporalExpressionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tegb.fields {
		if !temporalexpression.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tegb *TemporalExpressionGroupBy) sqlQuery() *sql.Selector {
	selector := tegb.sql.Select()
	aggregation := make([]string, 0, len(tegb.fns))
	for _, fn := range tegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tegb.fields)+len(tegb.fns))
		for _, f := range tegb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tegb.fields...)...)
}

// TemporalExpressionSelect is the builder for selecting fields of TemporalExpression entities.
type TemporalExpressionSelect struct {
	*TemporalExpressionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tes *TemporalExpressionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tes.prepareQuery(ctx); err != nil {
		return err
	}
	tes.sql = tes.TemporalExpressionQuery.sqlQuery(ctx)
	return tes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tes *TemporalExpressionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tes.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tes *TemporalExpressionSelect) StringsX(ctx context.Context) []string {
	v, err := tes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tes *TemporalExpressionSelect) StringX(ctx context.Context) string {
	v, err := tes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tes.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tes *TemporalExpressionSelect) IntsX(ctx context.Context) []int {
	v, err := tes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tes *TemporalExpressionSelect) IntX(ctx context.Context) int {
	v, err := tes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tes.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tes *TemporalExpressionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tes *TemporalExpressionSelect) Float64X(ctx context.Context) float64 {
	v, err := tes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tes.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tes *TemporalExpressionSelect) BoolsX(ctx context.Context) []bool {
	v, err := tes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tes *TemporalExpressionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpression.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tes *TemporalExpressionSelect) BoolX(ctx context.Context) bool {
	v, err := tes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tes *TemporalExpressionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tes.sql.Query()
	if err := tes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
