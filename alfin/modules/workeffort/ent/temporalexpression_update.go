// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
)

// TemporalExpressionUpdate is the builder for updating TemporalExpression entities.
type TemporalExpressionUpdate struct {
	config
	hooks    []Hook
	mutation *TemporalExpressionMutation
}

// Where adds a new predicate for the TemporalExpressionUpdate builder.
func (teu *TemporalExpressionUpdate) Where(ps ...predicate.TemporalExpression) *TemporalExpressionUpdate {
	teu.mutation.predicates = append(teu.mutation.predicates, ps...)
	return teu
}

// SetStringRef sets the "string_ref" field.
func (teu *TemporalExpressionUpdate) SetStringRef(s string) *TemporalExpressionUpdate {
	teu.mutation.SetStringRef(s)
	return teu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableStringRef(s *string) *TemporalExpressionUpdate {
	if s != nil {
		teu.SetStringRef(*s)
	}
	return teu
}

// ClearStringRef clears the value of the "string_ref" field.
func (teu *TemporalExpressionUpdate) ClearStringRef() *TemporalExpressionUpdate {
	teu.mutation.ClearStringRef()
	return teu
}

// SetTempExprTypeID sets the "temp_expr_type_id" field.
func (teu *TemporalExpressionUpdate) SetTempExprTypeID(i int) *TemporalExpressionUpdate {
	teu.mutation.ResetTempExprTypeID()
	teu.mutation.SetTempExprTypeID(i)
	return teu
}

// SetNillableTempExprTypeID sets the "temp_expr_type_id" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableTempExprTypeID(i *int) *TemporalExpressionUpdate {
	if i != nil {
		teu.SetTempExprTypeID(*i)
	}
	return teu
}

// AddTempExprTypeID adds i to the "temp_expr_type_id" field.
func (teu *TemporalExpressionUpdate) AddTempExprTypeID(i int) *TemporalExpressionUpdate {
	teu.mutation.AddTempExprTypeID(i)
	return teu
}

// ClearTempExprTypeID clears the value of the "temp_expr_type_id" field.
func (teu *TemporalExpressionUpdate) ClearTempExprTypeID() *TemporalExpressionUpdate {
	teu.mutation.ClearTempExprTypeID()
	return teu
}

// SetDescription sets the "description" field.
func (teu *TemporalExpressionUpdate) SetDescription(s string) *TemporalExpressionUpdate {
	teu.mutation.SetDescription(s)
	return teu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableDescription(s *string) *TemporalExpressionUpdate {
	if s != nil {
		teu.SetDescription(*s)
	}
	return teu
}

// ClearDescription clears the value of the "description" field.
func (teu *TemporalExpressionUpdate) ClearDescription() *TemporalExpressionUpdate {
	teu.mutation.ClearDescription()
	return teu
}

// SetDate1 sets the "date_1" field.
func (teu *TemporalExpressionUpdate) SetDate1(t time.Time) *TemporalExpressionUpdate {
	teu.mutation.SetDate1(t)
	return teu
}

// SetNillableDate1 sets the "date_1" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableDate1(t *time.Time) *TemporalExpressionUpdate {
	if t != nil {
		teu.SetDate1(*t)
	}
	return teu
}

// ClearDate1 clears the value of the "date_1" field.
func (teu *TemporalExpressionUpdate) ClearDate1() *TemporalExpressionUpdate {
	teu.mutation.ClearDate1()
	return teu
}

// SetDate2 sets the "date_2" field.
func (teu *TemporalExpressionUpdate) SetDate2(t time.Time) *TemporalExpressionUpdate {
	teu.mutation.SetDate2(t)
	return teu
}

// SetNillableDate2 sets the "date_2" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableDate2(t *time.Time) *TemporalExpressionUpdate {
	if t != nil {
		teu.SetDate2(*t)
	}
	return teu
}

// ClearDate2 clears the value of the "date_2" field.
func (teu *TemporalExpressionUpdate) ClearDate2() *TemporalExpressionUpdate {
	teu.mutation.ClearDate2()
	return teu
}

// SetInteger1 sets the "integer_1" field.
func (teu *TemporalExpressionUpdate) SetInteger1(i int) *TemporalExpressionUpdate {
	teu.mutation.ResetInteger1()
	teu.mutation.SetInteger1(i)
	return teu
}

// SetNillableInteger1 sets the "integer_1" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableInteger1(i *int) *TemporalExpressionUpdate {
	if i != nil {
		teu.SetInteger1(*i)
	}
	return teu
}

// AddInteger1 adds i to the "integer_1" field.
func (teu *TemporalExpressionUpdate) AddInteger1(i int) *TemporalExpressionUpdate {
	teu.mutation.AddInteger1(i)
	return teu
}

// ClearInteger1 clears the value of the "integer_1" field.
func (teu *TemporalExpressionUpdate) ClearInteger1() *TemporalExpressionUpdate {
	teu.mutation.ClearInteger1()
	return teu
}

// SetInteger2 sets the "integer_2" field.
func (teu *TemporalExpressionUpdate) SetInteger2(i int) *TemporalExpressionUpdate {
	teu.mutation.ResetInteger2()
	teu.mutation.SetInteger2(i)
	return teu
}

// SetNillableInteger2 sets the "integer_2" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableInteger2(i *int) *TemporalExpressionUpdate {
	if i != nil {
		teu.SetInteger2(*i)
	}
	return teu
}

// AddInteger2 adds i to the "integer_2" field.
func (teu *TemporalExpressionUpdate) AddInteger2(i int) *TemporalExpressionUpdate {
	teu.mutation.AddInteger2(i)
	return teu
}

// ClearInteger2 clears the value of the "integer_2" field.
func (teu *TemporalExpressionUpdate) ClearInteger2() *TemporalExpressionUpdate {
	teu.mutation.ClearInteger2()
	return teu
}

// SetString1 sets the "string_1" field.
func (teu *TemporalExpressionUpdate) SetString1(i int) *TemporalExpressionUpdate {
	teu.mutation.ResetString1()
	teu.mutation.SetString1(i)
	return teu
}

// SetNillableString1 sets the "string_1" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableString1(i *int) *TemporalExpressionUpdate {
	if i != nil {
		teu.SetString1(*i)
	}
	return teu
}

// AddString1 adds i to the "string_1" field.
func (teu *TemporalExpressionUpdate) AddString1(i int) *TemporalExpressionUpdate {
	teu.mutation.AddString1(i)
	return teu
}

// ClearString1 clears the value of the "string_1" field.
func (teu *TemporalExpressionUpdate) ClearString1() *TemporalExpressionUpdate {
	teu.mutation.ClearString1()
	return teu
}

// SetString2 sets the "string_2" field.
func (teu *TemporalExpressionUpdate) SetString2(i int) *TemporalExpressionUpdate {
	teu.mutation.ResetString2()
	teu.mutation.SetString2(i)
	return teu
}

// SetNillableString2 sets the "string_2" field if the given value is not nil.
func (teu *TemporalExpressionUpdate) SetNillableString2(i *int) *TemporalExpressionUpdate {
	if i != nil {
		teu.SetString2(*i)
	}
	return teu
}

// AddString2 adds i to the "string_2" field.
func (teu *TemporalExpressionUpdate) AddString2(i int) *TemporalExpressionUpdate {
	teu.mutation.AddString2(i)
	return teu
}

// ClearString2 clears the value of the "string_2" field.
func (teu *TemporalExpressionUpdate) ClearString2() *TemporalExpressionUpdate {
	teu.mutation.ClearString2()
	return teu
}

// AddFromTemporalExpressionAssocIDs adds the "from_temporal_expression_assocs" edge to the TemporalExpressionAssoc entity by IDs.
func (teu *TemporalExpressionUpdate) AddFromTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.AddFromTemporalExpressionAssocIDs(ids...)
	return teu
}

// AddFromTemporalExpressionAssocs adds the "from_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teu *TemporalExpressionUpdate) AddFromTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teu.AddFromTemporalExpressionAssocIDs(ids...)
}

// AddToTemporalExpressionAssocIDs adds the "to_temporal_expression_assocs" edge to the TemporalExpressionAssoc entity by IDs.
func (teu *TemporalExpressionUpdate) AddToTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.AddToTemporalExpressionAssocIDs(ids...)
	return teu
}

// AddToTemporalExpressionAssocs adds the "to_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teu *TemporalExpressionUpdate) AddToTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teu.AddToTemporalExpressionAssocIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (teu *TemporalExpressionUpdate) AddWorkEffortIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.AddWorkEffortIDs(ids...)
	return teu
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (teu *TemporalExpressionUpdate) AddWorkEfforts(w ...*WorkEffort) *TemporalExpressionUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return teu.AddWorkEffortIDs(ids...)
}

// Mutation returns the TemporalExpressionMutation object of the builder.
func (teu *TemporalExpressionUpdate) Mutation() *TemporalExpressionMutation {
	return teu.mutation
}

// ClearFromTemporalExpressionAssocs clears all "from_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teu *TemporalExpressionUpdate) ClearFromTemporalExpressionAssocs() *TemporalExpressionUpdate {
	teu.mutation.ClearFromTemporalExpressionAssocs()
	return teu
}

// RemoveFromTemporalExpressionAssocIDs removes the "from_temporal_expression_assocs" edge to TemporalExpressionAssoc entities by IDs.
func (teu *TemporalExpressionUpdate) RemoveFromTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.RemoveFromTemporalExpressionAssocIDs(ids...)
	return teu
}

// RemoveFromTemporalExpressionAssocs removes "from_temporal_expression_assocs" edges to TemporalExpressionAssoc entities.
func (teu *TemporalExpressionUpdate) RemoveFromTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teu.RemoveFromTemporalExpressionAssocIDs(ids...)
}

// ClearToTemporalExpressionAssocs clears all "to_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teu *TemporalExpressionUpdate) ClearToTemporalExpressionAssocs() *TemporalExpressionUpdate {
	teu.mutation.ClearToTemporalExpressionAssocs()
	return teu
}

// RemoveToTemporalExpressionAssocIDs removes the "to_temporal_expression_assocs" edge to TemporalExpressionAssoc entities by IDs.
func (teu *TemporalExpressionUpdate) RemoveToTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.RemoveToTemporalExpressionAssocIDs(ids...)
	return teu
}

// RemoveToTemporalExpressionAssocs removes "to_temporal_expression_assocs" edges to TemporalExpressionAssoc entities.
func (teu *TemporalExpressionUpdate) RemoveToTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teu.RemoveToTemporalExpressionAssocIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (teu *TemporalExpressionUpdate) ClearWorkEfforts() *TemporalExpressionUpdate {
	teu.mutation.ClearWorkEfforts()
	return teu
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (teu *TemporalExpressionUpdate) RemoveWorkEffortIDs(ids ...int) *TemporalExpressionUpdate {
	teu.mutation.RemoveWorkEffortIDs(ids...)
	return teu
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (teu *TemporalExpressionUpdate) RemoveWorkEfforts(w ...*WorkEffort) *TemporalExpressionUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return teu.RemoveWorkEffortIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TemporalExpressionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teu.defaults()
	if len(teu.hooks) == 0 {
		affected, err = teu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalExpressionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teu.mutation = mutation
			affected, err = teu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teu.hooks) - 1; i >= 0; i-- {
			mut = teu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TemporalExpressionUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TemporalExpressionUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TemporalExpressionUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TemporalExpressionUpdate) defaults() {
	if _, ok := teu.mutation.UpdateTime(); !ok {
		v := temporalexpression.UpdateDefaultUpdateTime()
		teu.mutation.SetUpdateTime(v)
	}
}

func (teu *TemporalExpressionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpression.Table,
			Columns: temporalexpression.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpression.FieldID,
			},
		},
	}
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldUpdateTime,
		})
	}
	if value, ok := teu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalexpression.FieldStringRef,
		})
	}
	if teu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: temporalexpression.FieldStringRef,
		})
	}
	if value, ok := teu.mutation.TempExprTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if value, ok := teu.mutation.AddedTempExprTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if teu.mutation.TempExprTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if value, ok := teu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalexpression.FieldDescription,
		})
	}
	if teu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: temporalexpression.FieldDescription,
		})
	}
	if value, ok := teu.mutation.Date1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldDate1,
		})
	}
	if teu.mutation.Date1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: temporalexpression.FieldDate1,
		})
	}
	if value, ok := teu.mutation.Date2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldDate2,
		})
	}
	if teu.mutation.Date2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: temporalexpression.FieldDate2,
		})
	}
	if value, ok := teu.mutation.Integer1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if value, ok := teu.mutation.AddedInteger1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if teu.mutation.Integer1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if value, ok := teu.mutation.Integer2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if value, ok := teu.mutation.AddedInteger2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if teu.mutation.Integer2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if value, ok := teu.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString1,
		})
	}
	if value, ok := teu.mutation.AddedString1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString1,
		})
	}
	if teu.mutation.String1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldString1,
		})
	}
	if value, ok := teu.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString2,
		})
	}
	if value, ok := teu.mutation.AddedString2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString2,
		})
	}
	if teu.mutation.String2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldString2,
		})
	}
	if teu.mutation.FromTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.RemovedFromTemporalExpressionAssocsIDs(); len(nodes) > 0 && !teu.mutation.FromTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.FromTemporalExpressionAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teu.mutation.ToTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.RemovedToTemporalExpressionAssocsIDs(); len(nodes) > 0 && !teu.mutation.ToTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.ToTemporalExpressionAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teu.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !teu.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalexpression.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TemporalExpressionUpdateOne is the builder for updating a single TemporalExpression entity.
type TemporalExpressionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemporalExpressionMutation
}

// SetStringRef sets the "string_ref" field.
func (teuo *TemporalExpressionUpdateOne) SetStringRef(s string) *TemporalExpressionUpdateOne {
	teuo.mutation.SetStringRef(s)
	return teuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableStringRef(s *string) *TemporalExpressionUpdateOne {
	if s != nil {
		teuo.SetStringRef(*s)
	}
	return teuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (teuo *TemporalExpressionUpdateOne) ClearStringRef() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearStringRef()
	return teuo
}

// SetTempExprTypeID sets the "temp_expr_type_id" field.
func (teuo *TemporalExpressionUpdateOne) SetTempExprTypeID(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.ResetTempExprTypeID()
	teuo.mutation.SetTempExprTypeID(i)
	return teuo
}

// SetNillableTempExprTypeID sets the "temp_expr_type_id" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableTempExprTypeID(i *int) *TemporalExpressionUpdateOne {
	if i != nil {
		teuo.SetTempExprTypeID(*i)
	}
	return teuo
}

// AddTempExprTypeID adds i to the "temp_expr_type_id" field.
func (teuo *TemporalExpressionUpdateOne) AddTempExprTypeID(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddTempExprTypeID(i)
	return teuo
}

// ClearTempExprTypeID clears the value of the "temp_expr_type_id" field.
func (teuo *TemporalExpressionUpdateOne) ClearTempExprTypeID() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearTempExprTypeID()
	return teuo
}

// SetDescription sets the "description" field.
func (teuo *TemporalExpressionUpdateOne) SetDescription(s string) *TemporalExpressionUpdateOne {
	teuo.mutation.SetDescription(s)
	return teuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableDescription(s *string) *TemporalExpressionUpdateOne {
	if s != nil {
		teuo.SetDescription(*s)
	}
	return teuo
}

// ClearDescription clears the value of the "description" field.
func (teuo *TemporalExpressionUpdateOne) ClearDescription() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearDescription()
	return teuo
}

// SetDate1 sets the "date_1" field.
func (teuo *TemporalExpressionUpdateOne) SetDate1(t time.Time) *TemporalExpressionUpdateOne {
	teuo.mutation.SetDate1(t)
	return teuo
}

// SetNillableDate1 sets the "date_1" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableDate1(t *time.Time) *TemporalExpressionUpdateOne {
	if t != nil {
		teuo.SetDate1(*t)
	}
	return teuo
}

// ClearDate1 clears the value of the "date_1" field.
func (teuo *TemporalExpressionUpdateOne) ClearDate1() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearDate1()
	return teuo
}

// SetDate2 sets the "date_2" field.
func (teuo *TemporalExpressionUpdateOne) SetDate2(t time.Time) *TemporalExpressionUpdateOne {
	teuo.mutation.SetDate2(t)
	return teuo
}

// SetNillableDate2 sets the "date_2" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableDate2(t *time.Time) *TemporalExpressionUpdateOne {
	if t != nil {
		teuo.SetDate2(*t)
	}
	return teuo
}

// ClearDate2 clears the value of the "date_2" field.
func (teuo *TemporalExpressionUpdateOne) ClearDate2() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearDate2()
	return teuo
}

// SetInteger1 sets the "integer_1" field.
func (teuo *TemporalExpressionUpdateOne) SetInteger1(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.ResetInteger1()
	teuo.mutation.SetInteger1(i)
	return teuo
}

// SetNillableInteger1 sets the "integer_1" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableInteger1(i *int) *TemporalExpressionUpdateOne {
	if i != nil {
		teuo.SetInteger1(*i)
	}
	return teuo
}

// AddInteger1 adds i to the "integer_1" field.
func (teuo *TemporalExpressionUpdateOne) AddInteger1(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddInteger1(i)
	return teuo
}

// ClearInteger1 clears the value of the "integer_1" field.
func (teuo *TemporalExpressionUpdateOne) ClearInteger1() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearInteger1()
	return teuo
}

// SetInteger2 sets the "integer_2" field.
func (teuo *TemporalExpressionUpdateOne) SetInteger2(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.ResetInteger2()
	teuo.mutation.SetInteger2(i)
	return teuo
}

// SetNillableInteger2 sets the "integer_2" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableInteger2(i *int) *TemporalExpressionUpdateOne {
	if i != nil {
		teuo.SetInteger2(*i)
	}
	return teuo
}

// AddInteger2 adds i to the "integer_2" field.
func (teuo *TemporalExpressionUpdateOne) AddInteger2(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddInteger2(i)
	return teuo
}

// ClearInteger2 clears the value of the "integer_2" field.
func (teuo *TemporalExpressionUpdateOne) ClearInteger2() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearInteger2()
	return teuo
}

// SetString1 sets the "string_1" field.
func (teuo *TemporalExpressionUpdateOne) SetString1(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.ResetString1()
	teuo.mutation.SetString1(i)
	return teuo
}

// SetNillableString1 sets the "string_1" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableString1(i *int) *TemporalExpressionUpdateOne {
	if i != nil {
		teuo.SetString1(*i)
	}
	return teuo
}

// AddString1 adds i to the "string_1" field.
func (teuo *TemporalExpressionUpdateOne) AddString1(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddString1(i)
	return teuo
}

// ClearString1 clears the value of the "string_1" field.
func (teuo *TemporalExpressionUpdateOne) ClearString1() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearString1()
	return teuo
}

// SetString2 sets the "string_2" field.
func (teuo *TemporalExpressionUpdateOne) SetString2(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.ResetString2()
	teuo.mutation.SetString2(i)
	return teuo
}

// SetNillableString2 sets the "string_2" field if the given value is not nil.
func (teuo *TemporalExpressionUpdateOne) SetNillableString2(i *int) *TemporalExpressionUpdateOne {
	if i != nil {
		teuo.SetString2(*i)
	}
	return teuo
}

// AddString2 adds i to the "string_2" field.
func (teuo *TemporalExpressionUpdateOne) AddString2(i int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddString2(i)
	return teuo
}

// ClearString2 clears the value of the "string_2" field.
func (teuo *TemporalExpressionUpdateOne) ClearString2() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearString2()
	return teuo
}

// AddFromTemporalExpressionAssocIDs adds the "from_temporal_expression_assocs" edge to the TemporalExpressionAssoc entity by IDs.
func (teuo *TemporalExpressionUpdateOne) AddFromTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddFromTemporalExpressionAssocIDs(ids...)
	return teuo
}

// AddFromTemporalExpressionAssocs adds the "from_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teuo *TemporalExpressionUpdateOne) AddFromTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teuo.AddFromTemporalExpressionAssocIDs(ids...)
}

// AddToTemporalExpressionAssocIDs adds the "to_temporal_expression_assocs" edge to the TemporalExpressionAssoc entity by IDs.
func (teuo *TemporalExpressionUpdateOne) AddToTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddToTemporalExpressionAssocIDs(ids...)
	return teuo
}

// AddToTemporalExpressionAssocs adds the "to_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teuo *TemporalExpressionUpdateOne) AddToTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teuo.AddToTemporalExpressionAssocIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (teuo *TemporalExpressionUpdateOne) AddWorkEffortIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.AddWorkEffortIDs(ids...)
	return teuo
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (teuo *TemporalExpressionUpdateOne) AddWorkEfforts(w ...*WorkEffort) *TemporalExpressionUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return teuo.AddWorkEffortIDs(ids...)
}

// Mutation returns the TemporalExpressionMutation object of the builder.
func (teuo *TemporalExpressionUpdateOne) Mutation() *TemporalExpressionMutation {
	return teuo.mutation
}

// ClearFromTemporalExpressionAssocs clears all "from_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teuo *TemporalExpressionUpdateOne) ClearFromTemporalExpressionAssocs() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearFromTemporalExpressionAssocs()
	return teuo
}

// RemoveFromTemporalExpressionAssocIDs removes the "from_temporal_expression_assocs" edge to TemporalExpressionAssoc entities by IDs.
func (teuo *TemporalExpressionUpdateOne) RemoveFromTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.RemoveFromTemporalExpressionAssocIDs(ids...)
	return teuo
}

// RemoveFromTemporalExpressionAssocs removes "from_temporal_expression_assocs" edges to TemporalExpressionAssoc entities.
func (teuo *TemporalExpressionUpdateOne) RemoveFromTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teuo.RemoveFromTemporalExpressionAssocIDs(ids...)
}

// ClearToTemporalExpressionAssocs clears all "to_temporal_expression_assocs" edges to the TemporalExpressionAssoc entity.
func (teuo *TemporalExpressionUpdateOne) ClearToTemporalExpressionAssocs() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearToTemporalExpressionAssocs()
	return teuo
}

// RemoveToTemporalExpressionAssocIDs removes the "to_temporal_expression_assocs" edge to TemporalExpressionAssoc entities by IDs.
func (teuo *TemporalExpressionUpdateOne) RemoveToTemporalExpressionAssocIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.RemoveToTemporalExpressionAssocIDs(ids...)
	return teuo
}

// RemoveToTemporalExpressionAssocs removes "to_temporal_expression_assocs" edges to TemporalExpressionAssoc entities.
func (teuo *TemporalExpressionUpdateOne) RemoveToTemporalExpressionAssocs(t ...*TemporalExpressionAssoc) *TemporalExpressionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return teuo.RemoveToTemporalExpressionAssocIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (teuo *TemporalExpressionUpdateOne) ClearWorkEfforts() *TemporalExpressionUpdateOne {
	teuo.mutation.ClearWorkEfforts()
	return teuo
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (teuo *TemporalExpressionUpdateOne) RemoveWorkEffortIDs(ids ...int) *TemporalExpressionUpdateOne {
	teuo.mutation.RemoveWorkEffortIDs(ids...)
	return teuo
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (teuo *TemporalExpressionUpdateOne) RemoveWorkEfforts(w ...*WorkEffort) *TemporalExpressionUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return teuo.RemoveWorkEffortIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TemporalExpressionUpdateOne) Select(field string, fields ...string) *TemporalExpressionUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TemporalExpression entity.
func (teuo *TemporalExpressionUpdateOne) Save(ctx context.Context) (*TemporalExpression, error) {
	var (
		err  error
		node *TemporalExpression
	)
	teuo.defaults()
	if len(teuo.hooks) == 0 {
		node, err = teuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalExpressionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teuo.mutation = mutation
			node, err = teuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teuo.hooks) - 1; i >= 0; i-- {
			mut = teuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TemporalExpressionUpdateOne) SaveX(ctx context.Context) *TemporalExpression {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TemporalExpressionUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TemporalExpressionUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TemporalExpressionUpdateOne) defaults() {
	if _, ok := teuo.mutation.UpdateTime(); !ok {
		v := temporalexpression.UpdateDefaultUpdateTime()
		teuo.mutation.SetUpdateTime(v)
	}
}

func (teuo *TemporalExpressionUpdateOne) sqlSave(ctx context.Context) (_node *TemporalExpression, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpression.Table,
			Columns: temporalexpression.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpression.FieldID,
			},
		},
	}
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TemporalExpression.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temporalexpression.FieldID)
		for _, f := range fields {
			if !temporalexpression.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != temporalexpression.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldUpdateTime,
		})
	}
	if value, ok := teuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalexpression.FieldStringRef,
		})
	}
	if teuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: temporalexpression.FieldStringRef,
		})
	}
	if value, ok := teuo.mutation.TempExprTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if value, ok := teuo.mutation.AddedTempExprTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if teuo.mutation.TempExprTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldTempExprTypeID,
		})
	}
	if value, ok := teuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: temporalexpression.FieldDescription,
		})
	}
	if teuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: temporalexpression.FieldDescription,
		})
	}
	if value, ok := teuo.mutation.Date1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldDate1,
		})
	}
	if teuo.mutation.Date1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: temporalexpression.FieldDate1,
		})
	}
	if value, ok := teuo.mutation.Date2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: temporalexpression.FieldDate2,
		})
	}
	if teuo.mutation.Date2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: temporalexpression.FieldDate2,
		})
	}
	if value, ok := teuo.mutation.Integer1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if value, ok := teuo.mutation.AddedInteger1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if teuo.mutation.Integer1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldInteger1,
		})
	}
	if value, ok := teuo.mutation.Integer2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if value, ok := teuo.mutation.AddedInteger2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if teuo.mutation.Integer2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldInteger2,
		})
	}
	if value, ok := teuo.mutation.String1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString1,
		})
	}
	if value, ok := teuo.mutation.AddedString1(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString1,
		})
	}
	if teuo.mutation.String1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldString1,
		})
	}
	if value, ok := teuo.mutation.String2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString2,
		})
	}
	if value, ok := teuo.mutation.AddedString2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpression.FieldString2,
		})
	}
	if teuo.mutation.String2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpression.FieldString2,
		})
	}
	if teuo.mutation.FromTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.RemovedFromTemporalExpressionAssocsIDs(); len(nodes) > 0 && !teuo.mutation.FromTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.FromTemporalExpressionAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.FromTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.FromTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teuo.mutation.ToTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.RemovedToTemporalExpressionAssocsIDs(); len(nodes) > 0 && !teuo.mutation.ToTemporalExpressionAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.ToTemporalExpressionAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.ToTemporalExpressionAssocsTable,
			Columns: []string{temporalexpression.ToTemporalExpressionAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpressionassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teuo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !teuo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   temporalexpression.WorkEffortsTable,
			Columns: []string{temporalexpression.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemporalExpression{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalexpression.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
