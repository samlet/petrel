// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
)

// TemporalExpressionAssoc is the model entity for the TemporalExpressionAssoc schema.
type TemporalExpressionAssoc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExprAssocType holds the value of the "expr_assoc_type" field.
	ExprAssocType int `json:"expr_assoc_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemporalExpressionAssocQuery when eager-loading is set.
	Edges                                               TemporalExpressionAssocEdges `json:"edges"`
	temporal_expression_from_temporal_expression_assocs *int
	temporal_expression_to_temporal_expression_assocs   *int
}

// TemporalExpressionAssocEdges holds the relations/edges for other nodes in the graph.
type TemporalExpressionAssocEdges struct {
	// FromTemporalExpression holds the value of the from_temporal_expression edge.
	FromTemporalExpression *TemporalExpression `json:"from_temporal_expression,omitempty"`
	// ToTemporalExpression holds the value of the to_temporal_expression edge.
	ToTemporalExpression *TemporalExpression `json:"to_temporal_expression,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromTemporalExpressionOrErr returns the FromTemporalExpression value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemporalExpressionAssocEdges) FromTemporalExpressionOrErr() (*TemporalExpression, error) {
	if e.loadedTypes[0] {
		if e.FromTemporalExpression == nil {
			// The edge from_temporal_expression was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: temporalexpression.Label}
		}
		return e.FromTemporalExpression, nil
	}
	return nil, &NotLoadedError{edge: "from_temporal_expression"}
}

// ToTemporalExpressionOrErr returns the ToTemporalExpression value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemporalExpressionAssocEdges) ToTemporalExpressionOrErr() (*TemporalExpression, error) {
	if e.loadedTypes[1] {
		if e.ToTemporalExpression == nil {
			// The edge to_temporal_expression was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: temporalexpression.Label}
		}
		return e.ToTemporalExpression, nil
	}
	return nil, &NotLoadedError{edge: "to_temporal_expression"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemporalExpressionAssoc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case temporalexpressionassoc.FieldID, temporalexpressionassoc.FieldExprAssocType:
			values[i] = new(sql.NullInt64)
		case temporalexpressionassoc.ForeignKeys[0]: // temporal_expression_from_temporal_expression_assocs
			values[i] = new(sql.NullInt64)
		case temporalexpressionassoc.ForeignKeys[1]: // temporal_expression_to_temporal_expression_assocs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TemporalExpressionAssoc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemporalExpressionAssoc fields.
func (tea *TemporalExpressionAssoc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case temporalexpressionassoc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tea.ID = int(value.Int64)
		case temporalexpressionassoc.FieldExprAssocType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expr_assoc_type", values[i])
			} else if value.Valid {
				tea.ExprAssocType = int(value.Int64)
			}
		case temporalexpressionassoc.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field temporal_expression_from_temporal_expression_assocs", value)
			} else if value.Valid {
				tea.temporal_expression_from_temporal_expression_assocs = new(int)
				*tea.temporal_expression_from_temporal_expression_assocs = int(value.Int64)
			}
		case temporalexpressionassoc.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field temporal_expression_to_temporal_expression_assocs", value)
			} else if value.Valid {
				tea.temporal_expression_to_temporal_expression_assocs = new(int)
				*tea.temporal_expression_to_temporal_expression_assocs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFromTemporalExpression queries the "from_temporal_expression" edge of the TemporalExpressionAssoc entity.
func (tea *TemporalExpressionAssoc) QueryFromTemporalExpression() *TemporalExpressionQuery {
	return (&TemporalExpressionAssocClient{config: tea.config}).QueryFromTemporalExpression(tea)
}

// QueryToTemporalExpression queries the "to_temporal_expression" edge of the TemporalExpressionAssoc entity.
func (tea *TemporalExpressionAssoc) QueryToTemporalExpression() *TemporalExpressionQuery {
	return (&TemporalExpressionAssocClient{config: tea.config}).QueryToTemporalExpression(tea)
}

// Update returns a builder for updating this TemporalExpressionAssoc.
// Note that you need to call TemporalExpressionAssoc.Unwrap() before calling this method if this TemporalExpressionAssoc
// was returned from a transaction, and the transaction was committed or rolled back.
func (tea *TemporalExpressionAssoc) Update() *TemporalExpressionAssocUpdateOne {
	return (&TemporalExpressionAssocClient{config: tea.config}).UpdateOne(tea)
}

// Unwrap unwraps the TemporalExpressionAssoc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tea *TemporalExpressionAssoc) Unwrap() *TemporalExpressionAssoc {
	tx, ok := tea.config.driver.(*txDriver)
	if !ok {
		panic("ent: TemporalExpressionAssoc is not a transactional entity")
	}
	tea.config.driver = tx.drv
	return tea
}

// String implements the fmt.Stringer.
func (tea *TemporalExpressionAssoc) String() string {
	var builder strings.Builder
	builder.WriteString("TemporalExpressionAssoc(")
	builder.WriteString(fmt.Sprintf("id=%v", tea.ID))
	builder.WriteString(", expr_assoc_type=")
	builder.WriteString(fmt.Sprintf("%v", tea.ExprAssocType))
	builder.WriteByte(')')
	return builder.String()
}

// TemporalExpressionAssocs is a parsable slice of TemporalExpressionAssoc.
type TemporalExpressionAssocs []*TemporalExpressionAssoc

func (tea TemporalExpressionAssocs) config(cfg config) {
	for _i := range tea {
		tea[_i].config = cfg
	}
}
