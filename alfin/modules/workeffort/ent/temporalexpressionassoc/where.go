// Code generated by entc, DO NOT EDIT.

package temporalexpressionassoc

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ExprAssocType applies equality check predicate on the "expr_assoc_type" field. It's identical to ExprAssocTypeEQ.
func ExprAssocType(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeEQ applies the EQ predicate on the "expr_assoc_type" field.
func ExprAssocTypeEQ(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeNEQ applies the NEQ predicate on the "expr_assoc_type" field.
func ExprAssocTypeNEQ(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeIn applies the In predicate on the "expr_assoc_type" field.
func ExprAssocTypeIn(vs ...int) predicate.TemporalExpressionAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExprAssocType), v...))
	})
}

// ExprAssocTypeNotIn applies the NotIn predicate on the "expr_assoc_type" field.
func ExprAssocTypeNotIn(vs ...int) predicate.TemporalExpressionAssoc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExprAssocType), v...))
	})
}

// ExprAssocTypeGT applies the GT predicate on the "expr_assoc_type" field.
func ExprAssocTypeGT(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeGTE applies the GTE predicate on the "expr_assoc_type" field.
func ExprAssocTypeGTE(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeLT applies the LT predicate on the "expr_assoc_type" field.
func ExprAssocTypeLT(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeLTE applies the LTE predicate on the "expr_assoc_type" field.
func ExprAssocTypeLTE(v int) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExprAssocType), v))
	})
}

// ExprAssocTypeIsNil applies the IsNil predicate on the "expr_assoc_type" field.
func ExprAssocTypeIsNil() predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExprAssocType)))
	})
}

// ExprAssocTypeNotNil applies the NotNil predicate on the "expr_assoc_type" field.
func ExprAssocTypeNotNil() predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExprAssocType)))
	})
}

// HasFromTemporalExpression applies the HasEdge predicate on the "from_temporal_expression" edge.
func HasFromTemporalExpression() predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromTemporalExpressionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromTemporalExpressionTable, FromTemporalExpressionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromTemporalExpressionWith applies the HasEdge predicate on the "from_temporal_expression" edge with a given conditions (other predicates).
func HasFromTemporalExpressionWith(preds ...predicate.TemporalExpression) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromTemporalExpressionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromTemporalExpressionTable, FromTemporalExpressionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToTemporalExpression applies the HasEdge predicate on the "to_temporal_expression" edge.
func HasToTemporalExpression() predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTemporalExpressionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToTemporalExpressionTable, ToTemporalExpressionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToTemporalExpressionWith applies the HasEdge predicate on the "to_temporal_expression" edge with a given conditions (other predicates).
func HasToTemporalExpressionWith(preds ...predicate.TemporalExpression) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToTemporalExpressionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToTemporalExpressionTable, ToTemporalExpressionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemporalExpressionAssoc) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemporalExpressionAssoc) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemporalExpressionAssoc) predicate.TemporalExpressionAssoc {
	return predicate.TemporalExpressionAssoc(func(s *sql.Selector) {
		p(s.Not())
	})
}
