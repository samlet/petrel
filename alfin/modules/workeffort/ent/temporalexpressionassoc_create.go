// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
)

// TemporalExpressionAssocCreate is the builder for creating a TemporalExpressionAssoc entity.
type TemporalExpressionAssocCreate struct {
	config
	mutation *TemporalExpressionAssocMutation
	hooks    []Hook
}

// SetExprAssocType sets the "expr_assoc_type" field.
func (teac *TemporalExpressionAssocCreate) SetExprAssocType(i int) *TemporalExpressionAssocCreate {
	teac.mutation.SetExprAssocType(i)
	return teac
}

// SetNillableExprAssocType sets the "expr_assoc_type" field if the given value is not nil.
func (teac *TemporalExpressionAssocCreate) SetNillableExprAssocType(i *int) *TemporalExpressionAssocCreate {
	if i != nil {
		teac.SetExprAssocType(*i)
	}
	return teac
}

// SetFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID.
func (teac *TemporalExpressionAssocCreate) SetFromTemporalExpressionID(id int) *TemporalExpressionAssocCreate {
	teac.mutation.SetFromTemporalExpressionID(id)
	return teac
}

// SetNillableFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teac *TemporalExpressionAssocCreate) SetNillableFromTemporalExpressionID(id *int) *TemporalExpressionAssocCreate {
	if id != nil {
		teac = teac.SetFromTemporalExpressionID(*id)
	}
	return teac
}

// SetFromTemporalExpression sets the "from_temporal_expression" edge to the TemporalExpression entity.
func (teac *TemporalExpressionAssocCreate) SetFromTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocCreate {
	return teac.SetFromTemporalExpressionID(t.ID)
}

// SetToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID.
func (teac *TemporalExpressionAssocCreate) SetToTemporalExpressionID(id int) *TemporalExpressionAssocCreate {
	teac.mutation.SetToTemporalExpressionID(id)
	return teac
}

// SetNillableToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teac *TemporalExpressionAssocCreate) SetNillableToTemporalExpressionID(id *int) *TemporalExpressionAssocCreate {
	if id != nil {
		teac = teac.SetToTemporalExpressionID(*id)
	}
	return teac
}

// SetToTemporalExpression sets the "to_temporal_expression" edge to the TemporalExpression entity.
func (teac *TemporalExpressionAssocCreate) SetToTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocCreate {
	return teac.SetToTemporalExpressionID(t.ID)
}

// Mutation returns the TemporalExpressionAssocMutation object of the builder.
func (teac *TemporalExpressionAssocCreate) Mutation() *TemporalExpressionAssocMutation {
	return teac.mutation
}

// Save creates the TemporalExpressionAssoc in the database.
func (teac *TemporalExpressionAssocCreate) Save(ctx context.Context) (*TemporalExpressionAssoc, error) {
	var (
		err  error
		node *TemporalExpressionAssoc
	)
	if len(teac.hooks) == 0 {
		if err = teac.check(); err != nil {
			return nil, err
		}
		node, err = teac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalExpressionAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = teac.check(); err != nil {
				return nil, err
			}
			teac.mutation = mutation
			node, err = teac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teac.hooks) - 1; i >= 0; i-- {
			mut = teac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (teac *TemporalExpressionAssocCreate) SaveX(ctx context.Context) *TemporalExpressionAssoc {
	v, err := teac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (teac *TemporalExpressionAssocCreate) check() error {
	return nil
}

func (teac *TemporalExpressionAssocCreate) sqlSave(ctx context.Context) (*TemporalExpressionAssoc, error) {
	_node, _spec := teac.createSpec()
	if err := sqlgraph.CreateNode(ctx, teac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (teac *TemporalExpressionAssocCreate) createSpec() (*TemporalExpressionAssoc, *sqlgraph.CreateSpec) {
	var (
		_node = &TemporalExpressionAssoc{config: teac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: temporalexpressionassoc.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpressionassoc.FieldID,
			},
		}
	)
	if value, ok := teac.mutation.ExprAssocType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
		_node.ExprAssocType = value
	}
	if nodes := teac.mutation.FromTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.FromTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.FromTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.temporal_expression_from_temporal_expression_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := teac.mutation.ToTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.ToTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.ToTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.temporal_expression_to_temporal_expression_assocs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemporalExpressionAssocCreateBulk is the builder for creating many TemporalExpressionAssoc entities in bulk.
type TemporalExpressionAssocCreateBulk struct {
	config
	builders []*TemporalExpressionAssocCreate
}

// Save creates the TemporalExpressionAssoc entities in the database.
func (teacb *TemporalExpressionAssocCreateBulk) Save(ctx context.Context) ([]*TemporalExpressionAssoc, error) {
	specs := make([]*sqlgraph.CreateSpec, len(teacb.builders))
	nodes := make([]*TemporalExpressionAssoc, len(teacb.builders))
	mutators := make([]Mutator, len(teacb.builders))
	for i := range teacb.builders {
		func(i int, root context.Context) {
			builder := teacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemporalExpressionAssocMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, teacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, teacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, teacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (teacb *TemporalExpressionAssocCreateBulk) SaveX(ctx context.Context) []*TemporalExpressionAssoc {
	v, err := teacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
