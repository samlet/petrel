// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
)

// TemporalExpressionAssocQuery is the builder for querying TemporalExpressionAssoc entities.
type TemporalExpressionAssocQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TemporalExpressionAssoc
	// eager-loading edges.
	withFromTemporalExpression *TemporalExpressionQuery
	withToTemporalExpression   *TemporalExpressionQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TemporalExpressionAssocQuery builder.
func (teaq *TemporalExpressionAssocQuery) Where(ps ...predicate.TemporalExpressionAssoc) *TemporalExpressionAssocQuery {
	teaq.predicates = append(teaq.predicates, ps...)
	return teaq
}

// Limit adds a limit step to the query.
func (teaq *TemporalExpressionAssocQuery) Limit(limit int) *TemporalExpressionAssocQuery {
	teaq.limit = &limit
	return teaq
}

// Offset adds an offset step to the query.
func (teaq *TemporalExpressionAssocQuery) Offset(offset int) *TemporalExpressionAssocQuery {
	teaq.offset = &offset
	return teaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (teaq *TemporalExpressionAssocQuery) Unique(unique bool) *TemporalExpressionAssocQuery {
	teaq.unique = &unique
	return teaq
}

// Order adds an order step to the query.
func (teaq *TemporalExpressionAssocQuery) Order(o ...OrderFunc) *TemporalExpressionAssocQuery {
	teaq.order = append(teaq.order, o...)
	return teaq
}

// QueryFromTemporalExpression chains the current query on the "from_temporal_expression" edge.
func (teaq *TemporalExpressionAssocQuery) QueryFromTemporalExpression() *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: teaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, selector),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.FromTemporalExpressionTable, temporalexpressionassoc.FromTemporalExpressionColumn),
		)
		fromU = sqlgraph.SetNeighbors(teaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToTemporalExpression chains the current query on the "to_temporal_expression" edge.
func (teaq *TemporalExpressionAssocQuery) QueryToTemporalExpression() *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: teaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := teaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := teaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(temporalexpressionassoc.Table, temporalexpressionassoc.FieldID, selector),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, temporalexpressionassoc.ToTemporalExpressionTable, temporalexpressionassoc.ToTemporalExpressionColumn),
		)
		fromU = sqlgraph.SetNeighbors(teaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TemporalExpressionAssoc entity from the query.
// Returns a *NotFoundError when no TemporalExpressionAssoc was found.
func (teaq *TemporalExpressionAssocQuery) First(ctx context.Context) (*TemporalExpressionAssoc, error) {
	nodes, err := teaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{temporalexpressionassoc.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) FirstX(ctx context.Context) *TemporalExpressionAssoc {
	node, err := teaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TemporalExpressionAssoc ID from the query.
// Returns a *NotFoundError when no TemporalExpressionAssoc ID was found.
func (teaq *TemporalExpressionAssocQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{temporalexpressionassoc.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) FirstIDX(ctx context.Context) int {
	id, err := teaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TemporalExpressionAssoc entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TemporalExpressionAssoc entity is not found.
// Returns a *NotFoundError when no TemporalExpressionAssoc entities are found.
func (teaq *TemporalExpressionAssocQuery) Only(ctx context.Context) (*TemporalExpressionAssoc, error) {
	nodes, err := teaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{temporalexpressionassoc.Label}
	default:
		return nil, &NotSingularError{temporalexpressionassoc.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) OnlyX(ctx context.Context) *TemporalExpressionAssoc {
	node, err := teaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TemporalExpressionAssoc ID in the query.
// Returns a *NotSingularError when exactly one TemporalExpressionAssoc ID is not found.
// Returns a *NotFoundError when no entities are found.
func (teaq *TemporalExpressionAssocQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = teaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = &NotSingularError{temporalexpressionassoc.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) OnlyIDX(ctx context.Context) int {
	id, err := teaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TemporalExpressionAssocs.
func (teaq *TemporalExpressionAssocQuery) All(ctx context.Context) ([]*TemporalExpressionAssoc, error) {
	if err := teaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return teaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) AllX(ctx context.Context) []*TemporalExpressionAssoc {
	nodes, err := teaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TemporalExpressionAssoc IDs.
func (teaq *TemporalExpressionAssocQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := teaq.Select(temporalexpressionassoc.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) IDsX(ctx context.Context) []int {
	ids, err := teaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (teaq *TemporalExpressionAssocQuery) Count(ctx context.Context) (int, error) {
	if err := teaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return teaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) CountX(ctx context.Context) int {
	count, err := teaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (teaq *TemporalExpressionAssocQuery) Exist(ctx context.Context) (bool, error) {
	if err := teaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return teaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (teaq *TemporalExpressionAssocQuery) ExistX(ctx context.Context) bool {
	exist, err := teaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TemporalExpressionAssocQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (teaq *TemporalExpressionAssocQuery) Clone() *TemporalExpressionAssocQuery {
	if teaq == nil {
		return nil
	}
	return &TemporalExpressionAssocQuery{
		config:                     teaq.config,
		limit:                      teaq.limit,
		offset:                     teaq.offset,
		order:                      append([]OrderFunc{}, teaq.order...),
		predicates:                 append([]predicate.TemporalExpressionAssoc{}, teaq.predicates...),
		withFromTemporalExpression: teaq.withFromTemporalExpression.Clone(),
		withToTemporalExpression:   teaq.withToTemporalExpression.Clone(),
		// clone intermediate query.
		sql:  teaq.sql.Clone(),
		path: teaq.path,
	}
}

// WithFromTemporalExpression tells the query-builder to eager-load the nodes that are connected to
// the "from_temporal_expression" edge. The optional arguments are used to configure the query builder of the edge.
func (teaq *TemporalExpressionAssocQuery) WithFromTemporalExpression(opts ...func(*TemporalExpressionQuery)) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionQuery{config: teaq.config}
	for _, opt := range opts {
		opt(query)
	}
	teaq.withFromTemporalExpression = query
	return teaq
}

// WithToTemporalExpression tells the query-builder to eager-load the nodes that are connected to
// the "to_temporal_expression" edge. The optional arguments are used to configure the query builder of the edge.
func (teaq *TemporalExpressionAssocQuery) WithToTemporalExpression(opts ...func(*TemporalExpressionQuery)) *TemporalExpressionAssocQuery {
	query := &TemporalExpressionQuery{config: teaq.config}
	for _, opt := range opts {
		opt(query)
	}
	teaq.withToTemporalExpression = query
	return teaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TemporalExpressionAssoc.Query().
//		GroupBy(temporalexpressionassoc.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (teaq *TemporalExpressionAssocQuery) GroupBy(field string, fields ...string) *TemporalExpressionAssocGroupBy {
	group := &TemporalExpressionAssocGroupBy{config: teaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := teaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return teaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TemporalExpressionAssoc.Query().
//		Select(temporalexpressionassoc.FieldCreateTime).
//		Scan(ctx, &v)
//
func (teaq *TemporalExpressionAssocQuery) Select(field string, fields ...string) *TemporalExpressionAssocSelect {
	teaq.fields = append([]string{field}, fields...)
	return &TemporalExpressionAssocSelect{TemporalExpressionAssocQuery: teaq}
}

func (teaq *TemporalExpressionAssocQuery) prepareQuery(ctx context.Context) error {
	for _, f := range teaq.fields {
		if !temporalexpressionassoc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if teaq.path != nil {
		prev, err := teaq.path(ctx)
		if err != nil {
			return err
		}
		teaq.sql = prev
	}
	return nil
}

func (teaq *TemporalExpressionAssocQuery) sqlAll(ctx context.Context) ([]*TemporalExpressionAssoc, error) {
	var (
		nodes       = []*TemporalExpressionAssoc{}
		withFKs     = teaq.withFKs
		_spec       = teaq.querySpec()
		loadedTypes = [2]bool{
			teaq.withFromTemporalExpression != nil,
			teaq.withToTemporalExpression != nil,
		}
	)
	if teaq.withFromTemporalExpression != nil || teaq.withToTemporalExpression != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, temporalexpressionassoc.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TemporalExpressionAssoc{config: teaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, teaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := teaq.withFromTemporalExpression; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TemporalExpressionAssoc)
		for i := range nodes {
			if nodes[i].temporal_expression_from_temporal_expression_assocs == nil {
				continue
			}
			fk := *nodes[i].temporal_expression_from_temporal_expression_assocs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(temporalexpression.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_from_temporal_expression_assocs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FromTemporalExpression = n
			}
		}
	}

	if query := teaq.withToTemporalExpression; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TemporalExpressionAssoc)
		for i := range nodes {
			if nodes[i].temporal_expression_to_temporal_expression_assocs == nil {
				continue
			}
			fk := *nodes[i].temporal_expression_to_temporal_expression_assocs
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(temporalexpression.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_to_temporal_expression_assocs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ToTemporalExpression = n
			}
		}
	}

	return nodes, nil
}

func (teaq *TemporalExpressionAssocQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := teaq.querySpec()
	return sqlgraph.CountNodes(ctx, teaq.driver, _spec)
}

func (teaq *TemporalExpressionAssocQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := teaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (teaq *TemporalExpressionAssocQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpressionassoc.Table,
			Columns: temporalexpressionassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpressionassoc.FieldID,
			},
		},
		From:   teaq.sql,
		Unique: true,
	}
	if unique := teaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := teaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temporalexpressionassoc.FieldID)
		for i := range fields {
			if fields[i] != temporalexpressionassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := teaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := teaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := teaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := teaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (teaq *TemporalExpressionAssocQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(teaq.driver.Dialect())
	t1 := builder.Table(temporalexpressionassoc.Table)
	columns := teaq.fields
	if len(columns) == 0 {
		columns = temporalexpressionassoc.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if teaq.sql != nil {
		selector = teaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range teaq.predicates {
		p(selector)
	}
	for _, p := range teaq.order {
		p(selector)
	}
	if offset := teaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := teaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TemporalExpressionAssocGroupBy is the group-by builder for TemporalExpressionAssoc entities.
type TemporalExpressionAssocGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (teagb *TemporalExpressionAssocGroupBy) Aggregate(fns ...AggregateFunc) *TemporalExpressionAssocGroupBy {
	teagb.fns = append(teagb.fns, fns...)
	return teagb
}

// Scan applies the group-by query and scans the result into the given value.
func (teagb *TemporalExpressionAssocGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := teagb.path(ctx)
	if err != nil {
		return err
	}
	teagb.sql = query
	return teagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := teagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(teagb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := teagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) StringsX(ctx context.Context) []string {
	v, err := teagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = teagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) StringX(ctx context.Context) string {
	v, err := teagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(teagb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := teagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) IntsX(ctx context.Context) []int {
	v, err := teagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = teagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) IntX(ctx context.Context) int {
	v, err := teagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(teagb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := teagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := teagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = teagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) Float64X(ctx context.Context) float64 {
	v, err := teagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(teagb.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := teagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := teagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (teagb *TemporalExpressionAssocGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = teagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (teagb *TemporalExpressionAssocGroupBy) BoolX(ctx context.Context) bool {
	v, err := teagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (teagb *TemporalExpressionAssocGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range teagb.fields {
		if !temporalexpressionassoc.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := teagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := teagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (teagb *TemporalExpressionAssocGroupBy) sqlQuery() *sql.Selector {
	selector := teagb.sql.Select()
	aggregation := make([]string, 0, len(teagb.fns))
	for _, fn := range teagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(teagb.fields)+len(teagb.fns))
		for _, f := range teagb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(teagb.fields...)...)
}

// TemporalExpressionAssocSelect is the builder for selecting fields of TemporalExpressionAssoc entities.
type TemporalExpressionAssocSelect struct {
	*TemporalExpressionAssocQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (teas *TemporalExpressionAssocSelect) Scan(ctx context.Context, v interface{}) error {
	if err := teas.prepareQuery(ctx); err != nil {
		return err
	}
	teas.sql = teas.TemporalExpressionAssocQuery.sqlQuery(ctx)
	return teas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) ScanX(ctx context.Context, v interface{}) {
	if err := teas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Strings(ctx context.Context) ([]string, error) {
	if len(teas.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := teas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) StringsX(ctx context.Context) []string {
	v, err := teas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = teas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) StringX(ctx context.Context) string {
	v, err := teas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Ints(ctx context.Context) ([]int, error) {
	if len(teas.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := teas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) IntsX(ctx context.Context) []int {
	v, err := teas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = teas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) IntX(ctx context.Context) int {
	v, err := teas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(teas.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := teas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) Float64sX(ctx context.Context) []float64 {
	v, err := teas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = teas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) Float64X(ctx context.Context) float64 {
	v, err := teas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(teas.fields) > 1 {
		return nil, errors.New("ent: TemporalExpressionAssocSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := teas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) BoolsX(ctx context.Context) []bool {
	v, err := teas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (teas *TemporalExpressionAssocSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = teas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{temporalexpressionassoc.Label}
	default:
		err = fmt.Errorf("ent: TemporalExpressionAssocSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (teas *TemporalExpressionAssocSelect) BoolX(ctx context.Context) bool {
	v, err := teas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (teas *TemporalExpressionAssocSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := teas.sql.Query()
	if err := teas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
