// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpressionassoc"
)

// TemporalExpressionAssocUpdate is the builder for updating TemporalExpressionAssoc entities.
type TemporalExpressionAssocUpdate struct {
	config
	hooks    []Hook
	mutation *TemporalExpressionAssocMutation
}

// Where adds a new predicate for the TemporalExpressionAssocUpdate builder.
func (teau *TemporalExpressionAssocUpdate) Where(ps ...predicate.TemporalExpressionAssoc) *TemporalExpressionAssocUpdate {
	teau.mutation.predicates = append(teau.mutation.predicates, ps...)
	return teau
}

// SetExprAssocType sets the "expr_assoc_type" field.
func (teau *TemporalExpressionAssocUpdate) SetExprAssocType(i int) *TemporalExpressionAssocUpdate {
	teau.mutation.ResetExprAssocType()
	teau.mutation.SetExprAssocType(i)
	return teau
}

// SetNillableExprAssocType sets the "expr_assoc_type" field if the given value is not nil.
func (teau *TemporalExpressionAssocUpdate) SetNillableExprAssocType(i *int) *TemporalExpressionAssocUpdate {
	if i != nil {
		teau.SetExprAssocType(*i)
	}
	return teau
}

// AddExprAssocType adds i to the "expr_assoc_type" field.
func (teau *TemporalExpressionAssocUpdate) AddExprAssocType(i int) *TemporalExpressionAssocUpdate {
	teau.mutation.AddExprAssocType(i)
	return teau
}

// ClearExprAssocType clears the value of the "expr_assoc_type" field.
func (teau *TemporalExpressionAssocUpdate) ClearExprAssocType() *TemporalExpressionAssocUpdate {
	teau.mutation.ClearExprAssocType()
	return teau
}

// SetFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID.
func (teau *TemporalExpressionAssocUpdate) SetFromTemporalExpressionID(id int) *TemporalExpressionAssocUpdate {
	teau.mutation.SetFromTemporalExpressionID(id)
	return teau
}

// SetNillableFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teau *TemporalExpressionAssocUpdate) SetNillableFromTemporalExpressionID(id *int) *TemporalExpressionAssocUpdate {
	if id != nil {
		teau = teau.SetFromTemporalExpressionID(*id)
	}
	return teau
}

// SetFromTemporalExpression sets the "from_temporal_expression" edge to the TemporalExpression entity.
func (teau *TemporalExpressionAssocUpdate) SetFromTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocUpdate {
	return teau.SetFromTemporalExpressionID(t.ID)
}

// SetToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID.
func (teau *TemporalExpressionAssocUpdate) SetToTemporalExpressionID(id int) *TemporalExpressionAssocUpdate {
	teau.mutation.SetToTemporalExpressionID(id)
	return teau
}

// SetNillableToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teau *TemporalExpressionAssocUpdate) SetNillableToTemporalExpressionID(id *int) *TemporalExpressionAssocUpdate {
	if id != nil {
		teau = teau.SetToTemporalExpressionID(*id)
	}
	return teau
}

// SetToTemporalExpression sets the "to_temporal_expression" edge to the TemporalExpression entity.
func (teau *TemporalExpressionAssocUpdate) SetToTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocUpdate {
	return teau.SetToTemporalExpressionID(t.ID)
}

// Mutation returns the TemporalExpressionAssocMutation object of the builder.
func (teau *TemporalExpressionAssocUpdate) Mutation() *TemporalExpressionAssocMutation {
	return teau.mutation
}

// ClearFromTemporalExpression clears the "from_temporal_expression" edge to the TemporalExpression entity.
func (teau *TemporalExpressionAssocUpdate) ClearFromTemporalExpression() *TemporalExpressionAssocUpdate {
	teau.mutation.ClearFromTemporalExpression()
	return teau
}

// ClearToTemporalExpression clears the "to_temporal_expression" edge to the TemporalExpression entity.
func (teau *TemporalExpressionAssocUpdate) ClearToTemporalExpression() *TemporalExpressionAssocUpdate {
	teau.mutation.ClearToTemporalExpression()
	return teau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teau *TemporalExpressionAssocUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(teau.hooks) == 0 {
		affected, err = teau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalExpressionAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teau.mutation = mutation
			affected, err = teau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teau.hooks) - 1; i >= 0; i-- {
			mut = teau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teau *TemporalExpressionAssocUpdate) SaveX(ctx context.Context) int {
	affected, err := teau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teau *TemporalExpressionAssocUpdate) Exec(ctx context.Context) error {
	_, err := teau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teau *TemporalExpressionAssocUpdate) ExecX(ctx context.Context) {
	if err := teau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teau *TemporalExpressionAssocUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpressionassoc.Table,
			Columns: temporalexpressionassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpressionassoc.FieldID,
			},
		},
	}
	if ps := teau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teau.mutation.ExprAssocType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if value, ok := teau.mutation.AddedExprAssocType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if teau.mutation.ExprAssocTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if teau.mutation.FromTemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.FromTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.FromTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teau.mutation.FromTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.FromTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.FromTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teau.mutation.ToTemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.ToTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.ToTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teau.mutation.ToTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.ToTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.ToTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalexpressionassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TemporalExpressionAssocUpdateOne is the builder for updating a single TemporalExpressionAssoc entity.
type TemporalExpressionAssocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemporalExpressionAssocMutation
}

// SetExprAssocType sets the "expr_assoc_type" field.
func (teauo *TemporalExpressionAssocUpdateOne) SetExprAssocType(i int) *TemporalExpressionAssocUpdateOne {
	teauo.mutation.ResetExprAssocType()
	teauo.mutation.SetExprAssocType(i)
	return teauo
}

// SetNillableExprAssocType sets the "expr_assoc_type" field if the given value is not nil.
func (teauo *TemporalExpressionAssocUpdateOne) SetNillableExprAssocType(i *int) *TemporalExpressionAssocUpdateOne {
	if i != nil {
		teauo.SetExprAssocType(*i)
	}
	return teauo
}

// AddExprAssocType adds i to the "expr_assoc_type" field.
func (teauo *TemporalExpressionAssocUpdateOne) AddExprAssocType(i int) *TemporalExpressionAssocUpdateOne {
	teauo.mutation.AddExprAssocType(i)
	return teauo
}

// ClearExprAssocType clears the value of the "expr_assoc_type" field.
func (teauo *TemporalExpressionAssocUpdateOne) ClearExprAssocType() *TemporalExpressionAssocUpdateOne {
	teauo.mutation.ClearExprAssocType()
	return teauo
}

// SetFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID.
func (teauo *TemporalExpressionAssocUpdateOne) SetFromTemporalExpressionID(id int) *TemporalExpressionAssocUpdateOne {
	teauo.mutation.SetFromTemporalExpressionID(id)
	return teauo
}

// SetNillableFromTemporalExpressionID sets the "from_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teauo *TemporalExpressionAssocUpdateOne) SetNillableFromTemporalExpressionID(id *int) *TemporalExpressionAssocUpdateOne {
	if id != nil {
		teauo = teauo.SetFromTemporalExpressionID(*id)
	}
	return teauo
}

// SetFromTemporalExpression sets the "from_temporal_expression" edge to the TemporalExpression entity.
func (teauo *TemporalExpressionAssocUpdateOne) SetFromTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocUpdateOne {
	return teauo.SetFromTemporalExpressionID(t.ID)
}

// SetToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID.
func (teauo *TemporalExpressionAssocUpdateOne) SetToTemporalExpressionID(id int) *TemporalExpressionAssocUpdateOne {
	teauo.mutation.SetToTemporalExpressionID(id)
	return teauo
}

// SetNillableToTemporalExpressionID sets the "to_temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (teauo *TemporalExpressionAssocUpdateOne) SetNillableToTemporalExpressionID(id *int) *TemporalExpressionAssocUpdateOne {
	if id != nil {
		teauo = teauo.SetToTemporalExpressionID(*id)
	}
	return teauo
}

// SetToTemporalExpression sets the "to_temporal_expression" edge to the TemporalExpression entity.
func (teauo *TemporalExpressionAssocUpdateOne) SetToTemporalExpression(t *TemporalExpression) *TemporalExpressionAssocUpdateOne {
	return teauo.SetToTemporalExpressionID(t.ID)
}

// Mutation returns the TemporalExpressionAssocMutation object of the builder.
func (teauo *TemporalExpressionAssocUpdateOne) Mutation() *TemporalExpressionAssocMutation {
	return teauo.mutation
}

// ClearFromTemporalExpression clears the "from_temporal_expression" edge to the TemporalExpression entity.
func (teauo *TemporalExpressionAssocUpdateOne) ClearFromTemporalExpression() *TemporalExpressionAssocUpdateOne {
	teauo.mutation.ClearFromTemporalExpression()
	return teauo
}

// ClearToTemporalExpression clears the "to_temporal_expression" edge to the TemporalExpression entity.
func (teauo *TemporalExpressionAssocUpdateOne) ClearToTemporalExpression() *TemporalExpressionAssocUpdateOne {
	teauo.mutation.ClearToTemporalExpression()
	return teauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teauo *TemporalExpressionAssocUpdateOne) Select(field string, fields ...string) *TemporalExpressionAssocUpdateOne {
	teauo.fields = append([]string{field}, fields...)
	return teauo
}

// Save executes the query and returns the updated TemporalExpressionAssoc entity.
func (teauo *TemporalExpressionAssocUpdateOne) Save(ctx context.Context) (*TemporalExpressionAssoc, error) {
	var (
		err  error
		node *TemporalExpressionAssoc
	)
	if len(teauo.hooks) == 0 {
		node, err = teauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemporalExpressionAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teauo.mutation = mutation
			node, err = teauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teauo.hooks) - 1; i >= 0; i-- {
			mut = teauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teauo *TemporalExpressionAssocUpdateOne) SaveX(ctx context.Context) *TemporalExpressionAssoc {
	node, err := teauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teauo *TemporalExpressionAssocUpdateOne) Exec(ctx context.Context) error {
	_, err := teauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teauo *TemporalExpressionAssocUpdateOne) ExecX(ctx context.Context) {
	if err := teauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teauo *TemporalExpressionAssocUpdateOne) sqlSave(ctx context.Context) (_node *TemporalExpressionAssoc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   temporalexpressionassoc.Table,
			Columns: temporalexpressionassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: temporalexpressionassoc.FieldID,
			},
		},
	}
	id, ok := teauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TemporalExpressionAssoc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := teauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temporalexpressionassoc.FieldID)
		for _, f := range fields {
			if !temporalexpressionassoc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != temporalexpressionassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teauo.mutation.ExprAssocType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if value, ok := teauo.mutation.AddedExprAssocType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if teauo.mutation.ExprAssocTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: temporalexpressionassoc.FieldExprAssocType,
		})
	}
	if teauo.mutation.FromTemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.FromTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.FromTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teauo.mutation.FromTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.FromTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.FromTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teauo.mutation.ToTemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.ToTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.ToTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teauo.mutation.ToTemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   temporalexpressionassoc.ToTemporalExpressionTable,
			Columns: []string{temporalexpressionassoc.ToTemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemporalExpressionAssoc{config: teauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temporalexpressionassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
