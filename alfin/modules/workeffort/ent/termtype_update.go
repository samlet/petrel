// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/termtype"
)

// TermTypeUpdate is the builder for updating TermType entities.
type TermTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TermTypeMutation
}

// Where adds a new predicate for the TermTypeUpdate builder.
func (ttu *TermTypeUpdate) Where(ps ...predicate.TermType) *TermTypeUpdate {
	ttu.mutation.predicates = append(ttu.mutation.predicates, ps...)
	return ttu
}

// SetStringRef sets the "string_ref" field.
func (ttu *TermTypeUpdate) SetStringRef(s string) *TermTypeUpdate {
	ttu.mutation.SetStringRef(s)
	return ttu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ttu *TermTypeUpdate) SetNillableStringRef(s *string) *TermTypeUpdate {
	if s != nil {
		ttu.SetStringRef(*s)
	}
	return ttu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ttu *TermTypeUpdate) ClearStringRef() *TermTypeUpdate {
	ttu.mutation.ClearStringRef()
	return ttu
}

// SetHasTable sets the "has_table" field.
func (ttu *TermTypeUpdate) SetHasTable(tt termtype.HasTable) *TermTypeUpdate {
	ttu.mutation.SetHasTable(tt)
	return ttu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ttu *TermTypeUpdate) SetNillableHasTable(tt *termtype.HasTable) *TermTypeUpdate {
	if tt != nil {
		ttu.SetHasTable(*tt)
	}
	return ttu
}

// ClearHasTable clears the value of the "has_table" field.
func (ttu *TermTypeUpdate) ClearHasTable() *TermTypeUpdate {
	ttu.mutation.ClearHasTable()
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TermTypeUpdate) SetDescription(s string) *TermTypeUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TermTypeUpdate) SetNillableDescription(s *string) *TermTypeUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// ClearDescription clears the value of the "description" field.
func (ttu *TermTypeUpdate) ClearDescription() *TermTypeUpdate {
	ttu.mutation.ClearDescription()
	return ttu
}

// SetParentID sets the "parent" edge to the TermType entity by ID.
func (ttu *TermTypeUpdate) SetParentID(id int) *TermTypeUpdate {
	ttu.mutation.SetParentID(id)
	return ttu
}

// SetNillableParentID sets the "parent" edge to the TermType entity by ID if the given value is not nil.
func (ttu *TermTypeUpdate) SetNillableParentID(id *int) *TermTypeUpdate {
	if id != nil {
		ttu = ttu.SetParentID(*id)
	}
	return ttu
}

// SetParent sets the "parent" edge to the TermType entity.
func (ttu *TermTypeUpdate) SetParent(t *TermType) *TermTypeUpdate {
	return ttu.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the TermType entity by IDs.
func (ttu *TermTypeUpdate) AddChildIDs(ids ...int) *TermTypeUpdate {
	ttu.mutation.AddChildIDs(ids...)
	return ttu
}

// AddChildren adds the "children" edges to the TermType entity.
func (ttu *TermTypeUpdate) AddChildren(t ...*TermType) *TermTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddChildIDs(ids...)
}

// AddChildTermTypeIDs adds the "child_term_types" edge to the TermType entity by IDs.
func (ttu *TermTypeUpdate) AddChildTermTypeIDs(ids ...int) *TermTypeUpdate {
	ttu.mutation.AddChildTermTypeIDs(ids...)
	return ttu
}

// AddChildTermTypes adds the "child_term_types" edges to the TermType entity.
func (ttu *TermTypeUpdate) AddChildTermTypes(t ...*TermType) *TermTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddChildTermTypeIDs(ids...)
}

// Mutation returns the TermTypeMutation object of the builder.
func (ttu *TermTypeUpdate) Mutation() *TermTypeMutation {
	return ttu.mutation
}

// ClearParent clears the "parent" edge to the TermType entity.
func (ttu *TermTypeUpdate) ClearParent() *TermTypeUpdate {
	ttu.mutation.ClearParent()
	return ttu
}

// ClearChildren clears all "children" edges to the TermType entity.
func (ttu *TermTypeUpdate) ClearChildren() *TermTypeUpdate {
	ttu.mutation.ClearChildren()
	return ttu
}

// RemoveChildIDs removes the "children" edge to TermType entities by IDs.
func (ttu *TermTypeUpdate) RemoveChildIDs(ids ...int) *TermTypeUpdate {
	ttu.mutation.RemoveChildIDs(ids...)
	return ttu
}

// RemoveChildren removes "children" edges to TermType entities.
func (ttu *TermTypeUpdate) RemoveChildren(t ...*TermType) *TermTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveChildIDs(ids...)
}

// ClearChildTermTypes clears all "child_term_types" edges to the TermType entity.
func (ttu *TermTypeUpdate) ClearChildTermTypes() *TermTypeUpdate {
	ttu.mutation.ClearChildTermTypes()
	return ttu
}

// RemoveChildTermTypeIDs removes the "child_term_types" edge to TermType entities by IDs.
func (ttu *TermTypeUpdate) RemoveChildTermTypeIDs(ids ...int) *TermTypeUpdate {
	ttu.mutation.RemoveChildTermTypeIDs(ids...)
	return ttu
}

// RemoveChildTermTypes removes "child_term_types" edges to TermType entities.
func (ttu *TermTypeUpdate) RemoveChildTermTypes(t ...*TermType) *TermTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveChildTermTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TermTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ttu.defaults()
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TermTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TermTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TermTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *TermTypeUpdate) defaults() {
	if _, ok := ttu.mutation.UpdateTime(); !ok {
		v := termtype.UpdateDefaultUpdateTime()
		ttu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TermTypeUpdate) check() error {
	if v, ok := ttu.mutation.HasTable(); ok {
		if err := termtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ttu *TermTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termtype.Table,
			Columns: termtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termtype.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: termtype.FieldUpdateTime,
		})
	}
	if value, ok := ttu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termtype.FieldStringRef,
		})
	}
	if ttu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termtype.FieldStringRef,
		})
	}
	if value, ok := ttu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: termtype.FieldHasTable,
		})
	}
	if ttu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: termtype.FieldHasTable,
		})
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termtype.FieldDescription,
		})
	}
	if ttu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termtype.FieldDescription,
		})
	}
	if ttu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termtype.ParentTable,
			Columns: []string{termtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termtype.ParentTable,
			Columns: []string{termtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ttu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.ChildTermTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedChildTermTypesIDs(); len(nodes) > 0 && !ttu.mutation.ChildTermTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ChildTermTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TermTypeUpdateOne is the builder for updating a single TermType entity.
type TermTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TermTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (ttuo *TermTypeUpdateOne) SetStringRef(s string) *TermTypeUpdateOne {
	ttuo.mutation.SetStringRef(s)
	return ttuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ttuo *TermTypeUpdateOne) SetNillableStringRef(s *string) *TermTypeUpdateOne {
	if s != nil {
		ttuo.SetStringRef(*s)
	}
	return ttuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ttuo *TermTypeUpdateOne) ClearStringRef() *TermTypeUpdateOne {
	ttuo.mutation.ClearStringRef()
	return ttuo
}

// SetHasTable sets the "has_table" field.
func (ttuo *TermTypeUpdateOne) SetHasTable(tt termtype.HasTable) *TermTypeUpdateOne {
	ttuo.mutation.SetHasTable(tt)
	return ttuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (ttuo *TermTypeUpdateOne) SetNillableHasTable(tt *termtype.HasTable) *TermTypeUpdateOne {
	if tt != nil {
		ttuo.SetHasTable(*tt)
	}
	return ttuo
}

// ClearHasTable clears the value of the "has_table" field.
func (ttuo *TermTypeUpdateOne) ClearHasTable() *TermTypeUpdateOne {
	ttuo.mutation.ClearHasTable()
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TermTypeUpdateOne) SetDescription(s string) *TermTypeUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TermTypeUpdateOne) SetNillableDescription(s *string) *TermTypeUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// ClearDescription clears the value of the "description" field.
func (ttuo *TermTypeUpdateOne) ClearDescription() *TermTypeUpdateOne {
	ttuo.mutation.ClearDescription()
	return ttuo
}

// SetParentID sets the "parent" edge to the TermType entity by ID.
func (ttuo *TermTypeUpdateOne) SetParentID(id int) *TermTypeUpdateOne {
	ttuo.mutation.SetParentID(id)
	return ttuo
}

// SetNillableParentID sets the "parent" edge to the TermType entity by ID if the given value is not nil.
func (ttuo *TermTypeUpdateOne) SetNillableParentID(id *int) *TermTypeUpdateOne {
	if id != nil {
		ttuo = ttuo.SetParentID(*id)
	}
	return ttuo
}

// SetParent sets the "parent" edge to the TermType entity.
func (ttuo *TermTypeUpdateOne) SetParent(t *TermType) *TermTypeUpdateOne {
	return ttuo.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the TermType entity by IDs.
func (ttuo *TermTypeUpdateOne) AddChildIDs(ids ...int) *TermTypeUpdateOne {
	ttuo.mutation.AddChildIDs(ids...)
	return ttuo
}

// AddChildren adds the "children" edges to the TermType entity.
func (ttuo *TermTypeUpdateOne) AddChildren(t ...*TermType) *TermTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddChildIDs(ids...)
}

// AddChildTermTypeIDs adds the "child_term_types" edge to the TermType entity by IDs.
func (ttuo *TermTypeUpdateOne) AddChildTermTypeIDs(ids ...int) *TermTypeUpdateOne {
	ttuo.mutation.AddChildTermTypeIDs(ids...)
	return ttuo
}

// AddChildTermTypes adds the "child_term_types" edges to the TermType entity.
func (ttuo *TermTypeUpdateOne) AddChildTermTypes(t ...*TermType) *TermTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddChildTermTypeIDs(ids...)
}

// Mutation returns the TermTypeMutation object of the builder.
func (ttuo *TermTypeUpdateOne) Mutation() *TermTypeMutation {
	return ttuo.mutation
}

// ClearParent clears the "parent" edge to the TermType entity.
func (ttuo *TermTypeUpdateOne) ClearParent() *TermTypeUpdateOne {
	ttuo.mutation.ClearParent()
	return ttuo
}

// ClearChildren clears all "children" edges to the TermType entity.
func (ttuo *TermTypeUpdateOne) ClearChildren() *TermTypeUpdateOne {
	ttuo.mutation.ClearChildren()
	return ttuo
}

// RemoveChildIDs removes the "children" edge to TermType entities by IDs.
func (ttuo *TermTypeUpdateOne) RemoveChildIDs(ids ...int) *TermTypeUpdateOne {
	ttuo.mutation.RemoveChildIDs(ids...)
	return ttuo
}

// RemoveChildren removes "children" edges to TermType entities.
func (ttuo *TermTypeUpdateOne) RemoveChildren(t ...*TermType) *TermTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveChildIDs(ids...)
}

// ClearChildTermTypes clears all "child_term_types" edges to the TermType entity.
func (ttuo *TermTypeUpdateOne) ClearChildTermTypes() *TermTypeUpdateOne {
	ttuo.mutation.ClearChildTermTypes()
	return ttuo
}

// RemoveChildTermTypeIDs removes the "child_term_types" edge to TermType entities by IDs.
func (ttuo *TermTypeUpdateOne) RemoveChildTermTypeIDs(ids ...int) *TermTypeUpdateOne {
	ttuo.mutation.RemoveChildTermTypeIDs(ids...)
	return ttuo
}

// RemoveChildTermTypes removes "child_term_types" edges to TermType entities.
func (ttuo *TermTypeUpdateOne) RemoveChildTermTypes(t ...*TermType) *TermTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveChildTermTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TermTypeUpdateOne) Select(field string, fields ...string) *TermTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TermType entity.
func (ttuo *TermTypeUpdateOne) Save(ctx context.Context) (*TermType, error) {
	var (
		err  error
		node *TermType
	)
	ttuo.defaults()
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TermTypeUpdateOne) SaveX(ctx context.Context) *TermType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TermTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TermTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *TermTypeUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdateTime(); !ok {
		v := termtype.UpdateDefaultUpdateTime()
		ttuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TermTypeUpdateOne) check() error {
	if v, ok := ttuo.mutation.HasTable(); ok {
		if err := termtype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (ttuo *TermTypeUpdateOne) sqlSave(ctx context.Context) (_node *TermType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termtype.Table,
			Columns: termtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termtype.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TermType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, termtype.FieldID)
		for _, f := range fields {
			if !termtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != termtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: termtype.FieldUpdateTime,
		})
	}
	if value, ok := ttuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termtype.FieldStringRef,
		})
	}
	if ttuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termtype.FieldStringRef,
		})
	}
	if value, ok := ttuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: termtype.FieldHasTable,
		})
	}
	if ttuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: termtype.FieldHasTable,
		})
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termtype.FieldDescription,
		})
	}
	if ttuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termtype.FieldDescription,
		})
	}
	if ttuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termtype.ParentTable,
			Columns: []string{termtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termtype.ParentTable,
			Columns: []string{termtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ttuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termtype.ChildrenTable,
			Columns: []string{termtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.ChildTermTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedChildTermTypesIDs(); len(nodes) > 0 && !ttuo.mutation.ChildTermTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ChildTermTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   termtype.ChildTermTypesTable,
			Columns: termtype.ChildTermTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TermType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
