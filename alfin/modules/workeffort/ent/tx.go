// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// CommunicationEventPrpTyp is the client for interacting with the CommunicationEventPrpTyp builders.
	CommunicationEventPrpTyp *CommunicationEventPrpTypClient
	// CommunicationEventType is the client for interacting with the CommunicationEventType builders.
	CommunicationEventType *CommunicationEventTypeClient
	// ContactMechPurposeType is the client for interacting with the ContactMechPurposeType builders.
	ContactMechPurposeType *ContactMechPurposeTypeClient
	// ContactMechType is the client for interacting with the ContactMechType builders.
	ContactMechType *ContactMechTypeClient
	// ContactMechTypePurpose is the client for interacting with the ContactMechTypePurpose builders.
	ContactMechTypePurpose *ContactMechTypePurposeClient
	// Enumeration is the client for interacting with the Enumeration builders.
	Enumeration *EnumerationClient
	// EnumerationType is the client for interacting with the EnumerationType builders.
	EnumerationType *EnumerationTypeClient
	// FixedAsset is the client for interacting with the FixedAsset builders.
	FixedAsset *FixedAssetClient
	// Party is the client for interacting with the Party builders.
	Party *PartyClient
	// PartyClassificationType is the client for interacting with the PartyClassificationType builders.
	PartyClassificationType *PartyClassificationTypeClient
	// PartyContactMech is the client for interacting with the PartyContactMech builders.
	PartyContactMech *PartyContactMechClient
	// PartyContentType is the client for interacting with the PartyContentType builders.
	PartyContentType *PartyContentTypeClient
	// PartyIdentificationType is the client for interacting with the PartyIdentificationType builders.
	PartyIdentificationType *PartyIdentificationTypeClient
	// PartyQualType is the client for interacting with the PartyQualType builders.
	PartyQualType *PartyQualTypeClient
	// PartyRelationshipType is the client for interacting with the PartyRelationshipType builders.
	PartyRelationshipType *PartyRelationshipTypeClient
	// PartyRole is the client for interacting with the PartyRole builders.
	PartyRole *PartyRoleClient
	// PartyStatus is the client for interacting with the PartyStatus builders.
	PartyStatus *PartyStatusClient
	// PartyType is the client for interacting with the PartyType builders.
	PartyType *PartyTypeClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// RoleType is the client for interacting with the RoleType builders.
	RoleType *RoleTypeClient
	// SecurityGroup is the client for interacting with the SecurityGroup builders.
	SecurityGroup *SecurityGroupClient
	// SecurityGroupPermission is the client for interacting with the SecurityGroupPermission builders.
	SecurityGroupPermission *SecurityGroupPermissionClient
	// SecurityPermission is the client for interacting with the SecurityPermission builders.
	SecurityPermission *SecurityPermissionClient
	// SkillType is the client for interacting with the SkillType builders.
	SkillType *SkillTypeClient
	// StatusItem is the client for interacting with the StatusItem builders.
	StatusItem *StatusItemClient
	// StatusType is the client for interacting with the StatusType builders.
	StatusType *StatusTypeClient
	// StatusValidChange is the client for interacting with the StatusValidChange builders.
	StatusValidChange *StatusValidChangeClient
	// TemporalExpression is the client for interacting with the TemporalExpression builders.
	TemporalExpression *TemporalExpressionClient
	// TemporalExpressionAssoc is the client for interacting with the TemporalExpressionAssoc builders.
	TemporalExpressionAssoc *TemporalExpressionAssocClient
	// TermType is the client for interacting with the TermType builders.
	TermType *TermTypeClient
	// UserLogin is the client for interacting with the UserLogin builders.
	UserLogin *UserLoginClient
	// UserLoginSecurityGroup is the client for interacting with the UserLoginSecurityGroup builders.
	UserLoginSecurityGroup *UserLoginSecurityGroupClient
	// UserPreference is the client for interacting with the UserPreference builders.
	UserPreference *UserPreferenceClient
	// WorkEffort is the client for interacting with the WorkEffort builders.
	WorkEffort *WorkEffortClient
	// WorkEffortAssoc is the client for interacting with the WorkEffortAssoc builders.
	WorkEffortAssoc *WorkEffortAssocClient
	// WorkEffortFixedAssetAssign is the client for interacting with the WorkEffortFixedAssetAssign builders.
	WorkEffortFixedAssetAssign *WorkEffortFixedAssetAssignClient
	// WorkEffortPartyAssignment is the client for interacting with the WorkEffortPartyAssignment builders.
	WorkEffortPartyAssignment *WorkEffortPartyAssignmentClient
	// WorkEffortSkillStandard is the client for interacting with the WorkEffortSkillStandard builders.
	WorkEffortSkillStandard *WorkEffortSkillStandardClient
	// WorkEffortType is the client for interacting with the WorkEffortType builders.
	WorkEffortType *WorkEffortTypeClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook

	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Committer method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	tx.mu.Lock()
	hooks := append([]CommitHook(nil), tx.onCommit...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

type (
	// Rollbacker is the interface that wraps the Rollbacker method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	tx.mu.Lock()
	hooks := append([]RollbackHook(nil), tx.onRollback...)
	tx.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.CommunicationEventPrpTyp = NewCommunicationEventPrpTypClient(tx.config)
	tx.CommunicationEventType = NewCommunicationEventTypeClient(tx.config)
	tx.ContactMechPurposeType = NewContactMechPurposeTypeClient(tx.config)
	tx.ContactMechType = NewContactMechTypeClient(tx.config)
	tx.ContactMechTypePurpose = NewContactMechTypePurposeClient(tx.config)
	tx.Enumeration = NewEnumerationClient(tx.config)
	tx.EnumerationType = NewEnumerationTypeClient(tx.config)
	tx.FixedAsset = NewFixedAssetClient(tx.config)
	tx.Party = NewPartyClient(tx.config)
	tx.PartyClassificationType = NewPartyClassificationTypeClient(tx.config)
	tx.PartyContactMech = NewPartyContactMechClient(tx.config)
	tx.PartyContentType = NewPartyContentTypeClient(tx.config)
	tx.PartyIdentificationType = NewPartyIdentificationTypeClient(tx.config)
	tx.PartyQualType = NewPartyQualTypeClient(tx.config)
	tx.PartyRelationshipType = NewPartyRelationshipTypeClient(tx.config)
	tx.PartyRole = NewPartyRoleClient(tx.config)
	tx.PartyStatus = NewPartyStatusClient(tx.config)
	tx.PartyType = NewPartyTypeClient(tx.config)
	tx.Person = NewPersonClient(tx.config)
	tx.RoleType = NewRoleTypeClient(tx.config)
	tx.SecurityGroup = NewSecurityGroupClient(tx.config)
	tx.SecurityGroupPermission = NewSecurityGroupPermissionClient(tx.config)
	tx.SecurityPermission = NewSecurityPermissionClient(tx.config)
	tx.SkillType = NewSkillTypeClient(tx.config)
	tx.StatusItem = NewStatusItemClient(tx.config)
	tx.StatusType = NewStatusTypeClient(tx.config)
	tx.StatusValidChange = NewStatusValidChangeClient(tx.config)
	tx.TemporalExpression = NewTemporalExpressionClient(tx.config)
	tx.TemporalExpressionAssoc = NewTemporalExpressionAssocClient(tx.config)
	tx.TermType = NewTermTypeClient(tx.config)
	tx.UserLogin = NewUserLoginClient(tx.config)
	tx.UserLoginSecurityGroup = NewUserLoginSecurityGroupClient(tx.config)
	tx.UserPreference = NewUserPreferenceClient(tx.config)
	tx.WorkEffort = NewWorkEffortClient(tx.config)
	tx.WorkEffortAssoc = NewWorkEffortAssocClient(tx.config)
	tx.WorkEffortFixedAssetAssign = NewWorkEffortFixedAssetAssignClient(tx.config)
	tx.WorkEffortPartyAssignment = NewWorkEffortPartyAssignmentClient(tx.config)
	tx.WorkEffortSkillStandard = NewWorkEffortSkillStandardClient(tx.config)
	tx.WorkEffortType = NewWorkEffortTypeClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: CommunicationEventPrpTyp.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
