// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
)

// UserLogin is the model entity for the UserLogin schema.
type UserLogin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// CurrentPassword holds the value of the "current_password" field.
	CurrentPassword string `json:"current_password,omitempty"`
	// PasswordHint holds the value of the "password_hint" field.
	PasswordHint string `json:"password_hint,omitempty"`
	// IsSystem holds the value of the "is_system" field.
	IsSystem userlogin.IsSystem `json:"is_system,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled userlogin.Enabled `json:"enabled,omitempty"`
	// HasLoggedOut holds the value of the "has_logged_out" field.
	HasLoggedOut userlogin.HasLoggedOut `json:"has_logged_out,omitempty"`
	// RequirePasswordChange holds the value of the "require_password_change" field.
	RequirePasswordChange userlogin.RequirePasswordChange `json:"require_password_change,omitempty"`
	// LastCurrencyUom holds the value of the "last_currency_uom" field.
	LastCurrencyUom int `json:"last_currency_uom,omitempty"`
	// LastLocale holds the value of the "last_locale" field.
	LastLocale string `json:"last_locale,omitempty"`
	// LastTimeZone holds the value of the "last_time_zone" field.
	LastTimeZone string `json:"last_time_zone,omitempty"`
	// DisabledDateTime holds the value of the "disabled_date_time" field.
	DisabledDateTime time.Time `json:"disabled_date_time,omitempty"`
	// SuccessiveFailedLogins holds the value of the "successive_failed_logins" field.
	SuccessiveFailedLogins int `json:"successive_failed_logins,omitempty"`
	// ExternalAuthID holds the value of the "external_auth_id" field.
	ExternalAuthID string `json:"external_auth_id,omitempty"`
	// UserLdapDn holds the value of the "user_ldap_dn" field.
	UserLdapDn string `json:"user_ldap_dn,omitempty"`
	// DisabledBy holds the value of the "disabled_by" field.
	DisabledBy string `json:"disabled_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLoginQuery when eager-loading is set.
	Edges              UserLoginEdges `json:"edges"`
	party_user_logins  *int
	person_user_logins *int
}

// UserLoginEdges holds the relations/edges for other nodes in the graph.
type UserLoginEdges struct {
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// CreatedByParties holds the value of the created_by_parties edge.
	CreatedByParties []*Party `json:"created_by_parties,omitempty"`
	// LastModifiedByParties holds the value of the last_modified_by_parties edge.
	LastModifiedByParties []*Party `json:"last_modified_by_parties,omitempty"`
	// ChangeByPartyStatuses holds the value of the change_by_party_statuses edge.
	ChangeByPartyStatuses []*PartyStatus `json:"change_by_party_statuses,omitempty"`
	// UserLoginSecurityGroups holds the value of the user_login_security_groups edge.
	UserLoginSecurityGroups []*UserLoginSecurityGroup `json:"user_login_security_groups,omitempty"`
	// AssignedByWorkEffortPartyAssignments holds the value of the assigned_by_work_effort_party_assignments edge.
	AssignedByWorkEffortPartyAssignments []*WorkEffortPartyAssignment `json:"assigned_by_work_effort_party_assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginEdges) PartyOrErr() (*Party, error) {
	if e.loadedTypes[0] {
		if e.Party == nil {
			// The edge party was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: party.Label}
		}
		return e.Party, nil
	}
	return nil, &NotLoadedError{edge: "party"}
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginEdges) PersonOrErr() (*Person, error) {
	if e.loadedTypes[1] {
		if e.Person == nil {
			// The edge person was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// CreatedByPartiesOrErr returns the CreatedByParties value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginEdges) CreatedByPartiesOrErr() ([]*Party, error) {
	if e.loadedTypes[2] {
		return e.CreatedByParties, nil
	}
	return nil, &NotLoadedError{edge: "created_by_parties"}
}

// LastModifiedByPartiesOrErr returns the LastModifiedByParties value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginEdges) LastModifiedByPartiesOrErr() ([]*Party, error) {
	if e.loadedTypes[3] {
		return e.LastModifiedByParties, nil
	}
	return nil, &NotLoadedError{edge: "last_modified_by_parties"}
}

// ChangeByPartyStatusesOrErr returns the ChangeByPartyStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginEdges) ChangeByPartyStatusesOrErr() ([]*PartyStatus, error) {
	if e.loadedTypes[4] {
		return e.ChangeByPartyStatuses, nil
	}
	return nil, &NotLoadedError{edge: "change_by_party_statuses"}
}

// UserLoginSecurityGroupsOrErr returns the UserLoginSecurityGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginEdges) UserLoginSecurityGroupsOrErr() ([]*UserLoginSecurityGroup, error) {
	if e.loadedTypes[5] {
		return e.UserLoginSecurityGroups, nil
	}
	return nil, &NotLoadedError{edge: "user_login_security_groups"}
}

// AssignedByWorkEffortPartyAssignmentsOrErr returns the AssignedByWorkEffortPartyAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginEdges) AssignedByWorkEffortPartyAssignmentsOrErr() ([]*WorkEffortPartyAssignment, error) {
	if e.loadedTypes[6] {
		return e.AssignedByWorkEffortPartyAssignments, nil
	}
	return nil, &NotLoadedError{edge: "assigned_by_work_effort_party_assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLogin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userlogin.FieldID, userlogin.FieldLastCurrencyUom, userlogin.FieldSuccessiveFailedLogins:
			values[i] = new(sql.NullInt64)
		case userlogin.FieldStringRef, userlogin.FieldCurrentPassword, userlogin.FieldPasswordHint, userlogin.FieldIsSystem, userlogin.FieldEnabled, userlogin.FieldHasLoggedOut, userlogin.FieldRequirePasswordChange, userlogin.FieldLastLocale, userlogin.FieldLastTimeZone, userlogin.FieldExternalAuthID, userlogin.FieldUserLdapDn, userlogin.FieldDisabledBy:
			values[i] = new(sql.NullString)
		case userlogin.FieldCreateTime, userlogin.FieldUpdateTime, userlogin.FieldDisabledDateTime:
			values[i] = new(sql.NullTime)
		case userlogin.ForeignKeys[0]: // party_user_logins
			values[i] = new(sql.NullInt64)
		case userlogin.ForeignKeys[1]: // person_user_logins
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserLogin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLogin fields.
func (ul *UserLogin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userlogin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ul.ID = int(value.Int64)
		case userlogin.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ul.CreateTime = value.Time
			}
		case userlogin.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ul.UpdateTime = value.Time
			}
		case userlogin.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				ul.StringRef = value.String
			}
		case userlogin.FieldCurrentPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_password", values[i])
			} else if value.Valid {
				ul.CurrentPassword = value.String
			}
		case userlogin.FieldPasswordHint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hint", values[i])
			} else if value.Valid {
				ul.PasswordHint = value.String
			}
		case userlogin.FieldIsSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_system", values[i])
			} else if value.Valid {
				ul.IsSystem = userlogin.IsSystem(value.String)
			}
		case userlogin.FieldEnabled:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				ul.Enabled = userlogin.Enabled(value.String)
			}
		case userlogin.FieldHasLoggedOut:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field has_logged_out", values[i])
			} else if value.Valid {
				ul.HasLoggedOut = userlogin.HasLoggedOut(value.String)
			}
		case userlogin.FieldRequirePasswordChange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field require_password_change", values[i])
			} else if value.Valid {
				ul.RequirePasswordChange = userlogin.RequirePasswordChange(value.String)
			}
		case userlogin.FieldLastCurrencyUom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_currency_uom", values[i])
			} else if value.Valid {
				ul.LastCurrencyUom = int(value.Int64)
			}
		case userlogin.FieldLastLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_locale", values[i])
			} else if value.Valid {
				ul.LastLocale = value.String
			}
		case userlogin.FieldLastTimeZone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_time_zone", values[i])
			} else if value.Valid {
				ul.LastTimeZone = value.String
			}
		case userlogin.FieldDisabledDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field disabled_date_time", values[i])
			} else if value.Valid {
				ul.DisabledDateTime = value.Time
			}
		case userlogin.FieldSuccessiveFailedLogins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field successive_failed_logins", values[i])
			} else if value.Valid {
				ul.SuccessiveFailedLogins = int(value.Int64)
			}
		case userlogin.FieldExternalAuthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_auth_id", values[i])
			} else if value.Valid {
				ul.ExternalAuthID = value.String
			}
		case userlogin.FieldUserLdapDn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_ldap_dn", values[i])
			} else if value.Valid {
				ul.UserLdapDn = value.String
			}
		case userlogin.FieldDisabledBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disabled_by", values[i])
			} else if value.Valid {
				ul.DisabledBy = value.String
			}
		case userlogin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_user_logins", value)
			} else if value.Valid {
				ul.party_user_logins = new(int)
				*ul.party_user_logins = int(value.Int64)
			}
		case userlogin.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_user_logins", value)
			} else if value.Valid {
				ul.person_user_logins = new(int)
				*ul.person_user_logins = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParty queries the "party" edge of the UserLogin entity.
func (ul *UserLogin) QueryParty() *PartyQuery {
	return (&UserLoginClient{config: ul.config}).QueryParty(ul)
}

// QueryPerson queries the "person" edge of the UserLogin entity.
func (ul *UserLogin) QueryPerson() *PersonQuery {
	return (&UserLoginClient{config: ul.config}).QueryPerson(ul)
}

// QueryCreatedByParties queries the "created_by_parties" edge of the UserLogin entity.
func (ul *UserLogin) QueryCreatedByParties() *PartyQuery {
	return (&UserLoginClient{config: ul.config}).QueryCreatedByParties(ul)
}

// QueryLastModifiedByParties queries the "last_modified_by_parties" edge of the UserLogin entity.
func (ul *UserLogin) QueryLastModifiedByParties() *PartyQuery {
	return (&UserLoginClient{config: ul.config}).QueryLastModifiedByParties(ul)
}

// QueryChangeByPartyStatuses queries the "change_by_party_statuses" edge of the UserLogin entity.
func (ul *UserLogin) QueryChangeByPartyStatuses() *PartyStatusQuery {
	return (&UserLoginClient{config: ul.config}).QueryChangeByPartyStatuses(ul)
}

// QueryUserLoginSecurityGroups queries the "user_login_security_groups" edge of the UserLogin entity.
func (ul *UserLogin) QueryUserLoginSecurityGroups() *UserLoginSecurityGroupQuery {
	return (&UserLoginClient{config: ul.config}).QueryUserLoginSecurityGroups(ul)
}

// QueryAssignedByWorkEffortPartyAssignments queries the "assigned_by_work_effort_party_assignments" edge of the UserLogin entity.
func (ul *UserLogin) QueryAssignedByWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	return (&UserLoginClient{config: ul.config}).QueryAssignedByWorkEffortPartyAssignments(ul)
}

// Update returns a builder for updating this UserLogin.
// Note that you need to call UserLogin.Unwrap() before calling this method if this UserLogin
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UserLogin) Update() *UserLoginUpdateOne {
	return (&UserLoginClient{config: ul.config}).UpdateOne(ul)
}

// Unwrap unwraps the UserLogin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ul *UserLogin) Unwrap() *UserLogin {
	tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLogin is not a transactional entity")
	}
	ul.config.driver = tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UserLogin) String() string {
	var builder strings.Builder
	builder.WriteString("UserLogin(")
	builder.WriteString(fmt.Sprintf("id=%v", ul.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ul.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ul.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(ul.StringRef)
	builder.WriteString(", current_password=")
	builder.WriteString(ul.CurrentPassword)
	builder.WriteString(", password_hint=")
	builder.WriteString(ul.PasswordHint)
	builder.WriteString(", is_system=")
	builder.WriteString(fmt.Sprintf("%v", ul.IsSystem))
	builder.WriteString(", enabled=")
	builder.WriteString(fmt.Sprintf("%v", ul.Enabled))
	builder.WriteString(", has_logged_out=")
	builder.WriteString(fmt.Sprintf("%v", ul.HasLoggedOut))
	builder.WriteString(", require_password_change=")
	builder.WriteString(fmt.Sprintf("%v", ul.RequirePasswordChange))
	builder.WriteString(", last_currency_uom=")
	builder.WriteString(fmt.Sprintf("%v", ul.LastCurrencyUom))
	builder.WriteString(", last_locale=")
	builder.WriteString(ul.LastLocale)
	builder.WriteString(", last_time_zone=")
	builder.WriteString(ul.LastTimeZone)
	builder.WriteString(", disabled_date_time=")
	builder.WriteString(ul.DisabledDateTime.Format(time.ANSIC))
	builder.WriteString(", successive_failed_logins=")
	builder.WriteString(fmt.Sprintf("%v", ul.SuccessiveFailedLogins))
	builder.WriteString(", external_auth_id=")
	builder.WriteString(ul.ExternalAuthID)
	builder.WriteString(", user_ldap_dn=")
	builder.WriteString(ul.UserLdapDn)
	builder.WriteString(", disabled_by=")
	builder.WriteString(ul.DisabledBy)
	builder.WriteByte(')')
	return builder.String()
}

// UserLogins is a parsable slice of UserLogin.
type UserLogins []*UserLogin

func (ul UserLogins) config(cfg config) {
	for _i := range ul {
		ul[_i].config = cfg
	}
}
