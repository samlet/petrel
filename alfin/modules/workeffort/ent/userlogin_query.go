// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userpreference"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// UserLoginQuery is the builder for querying UserLogin entities.
type UserLoginQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserLogin
	// eager-loading edges.
	withParty                                *PartyQuery
	withPerson                               *PersonQuery
	withCreatedByParties                     *PartyQuery
	withLastModifiedByParties                *PartyQuery
	withChangeByPartyStatuses                *PartyStatusQuery
	withUserLoginSecurityGroups              *UserLoginSecurityGroupQuery
	withUserPreferences                      *UserPreferenceQuery
	withAssignedByWorkEffortPartyAssignments *WorkEffortPartyAssignmentQuery
	withFKs                                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserLoginQuery builder.
func (ulq *UserLoginQuery) Where(ps ...predicate.UserLogin) *UserLoginQuery {
	ulq.predicates = append(ulq.predicates, ps...)
	return ulq
}

// Limit adds a limit step to the query.
func (ulq *UserLoginQuery) Limit(limit int) *UserLoginQuery {
	ulq.limit = &limit
	return ulq
}

// Offset adds an offset step to the query.
func (ulq *UserLoginQuery) Offset(offset int) *UserLoginQuery {
	ulq.offset = &offset
	return ulq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ulq *UserLoginQuery) Unique(unique bool) *UserLoginQuery {
	ulq.unique = &unique
	return ulq
}

// Order adds an order step to the query.
func (ulq *UserLoginQuery) Order(o ...OrderFunc) *UserLoginQuery {
	ulq.order = append(ulq.order, o...)
	return ulq
}

// QueryParty chains the current query on the "party" edge.
func (ulq *UserLoginQuery) QueryParty() *PartyQuery {
	query := &PartyQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PartyTable, userlogin.PartyColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (ulq *UserLoginQuery) QueryPerson() *PersonQuery {
	query := &PersonQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlogin.PersonTable, userlogin.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedByParties chains the current query on the "created_by_parties" edge.
func (ulq *UserLoginQuery) QueryCreatedByParties() *PartyQuery {
	query := &PartyQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.CreatedByPartiesTable, userlogin.CreatedByPartiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLastModifiedByParties chains the current query on the "last_modified_by_parties" edge.
func (ulq *UserLoginQuery) QueryLastModifiedByParties() *PartyQuery {
	query := &PartyQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.LastModifiedByPartiesTable, userlogin.LastModifiedByPartiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChangeByPartyStatuses chains the current query on the "change_by_party_statuses" edge.
func (ulq *UserLoginQuery) QueryChangeByPartyStatuses() *PartyStatusQuery {
	query := &PartyStatusQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(partystatus.Table, partystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.ChangeByPartyStatusesTable, userlogin.ChangeByPartyStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserLoginSecurityGroups chains the current query on the "user_login_security_groups" edge.
func (ulq *UserLoginQuery) QueryUserLoginSecurityGroups() *UserLoginSecurityGroupQuery {
	query := &UserLoginSecurityGroupQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(userloginsecuritygroup.Table, userloginsecuritygroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.UserLoginSecurityGroupsTable, userlogin.UserLoginSecurityGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserPreferences chains the current query on the "user_preferences" edge.
func (ulq *UserLoginQuery) QueryUserPreferences() *UserPreferenceQuery {
	query := &UserPreferenceQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(userpreference.Table, userpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.UserPreferencesTable, userlogin.UserPreferencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedByWorkEffortPartyAssignments chains the current query on the "assigned_by_work_effort_party_assignments" edge.
func (ulq *UserLoginQuery) QueryAssignedByWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: ulq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ulq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userlogin.Table, userlogin.FieldID, selector),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlogin.AssignedByWorkEffortPartyAssignmentsTable, userlogin.AssignedByWorkEffortPartyAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ulq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserLogin entity from the query.
// Returns a *NotFoundError when no UserLogin was found.
func (ulq *UserLoginQuery) First(ctx context.Context) (*UserLogin, error) {
	nodes, err := ulq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userlogin.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ulq *UserLoginQuery) FirstX(ctx context.Context) *UserLogin {
	node, err := ulq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserLogin ID from the query.
// Returns a *NotFoundError when no UserLogin ID was found.
func (ulq *UserLoginQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ulq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userlogin.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ulq *UserLoginQuery) FirstIDX(ctx context.Context) int {
	id, err := ulq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserLogin entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one UserLogin entity is not found.
// Returns a *NotFoundError when no UserLogin entities are found.
func (ulq *UserLoginQuery) Only(ctx context.Context) (*UserLogin, error) {
	nodes, err := ulq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userlogin.Label}
	default:
		return nil, &NotSingularError{userlogin.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ulq *UserLoginQuery) OnlyX(ctx context.Context) *UserLogin {
	node, err := ulq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserLogin ID in the query.
// Returns a *NotSingularError when exactly one UserLogin ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ulq *UserLoginQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ulq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = &NotSingularError{userlogin.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ulq *UserLoginQuery) OnlyIDX(ctx context.Context) int {
	id, err := ulq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserLogins.
func (ulq *UserLoginQuery) All(ctx context.Context) ([]*UserLogin, error) {
	if err := ulq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ulq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ulq *UserLoginQuery) AllX(ctx context.Context) []*UserLogin {
	nodes, err := ulq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserLogin IDs.
func (ulq *UserLoginQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ulq.Select(userlogin.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ulq *UserLoginQuery) IDsX(ctx context.Context) []int {
	ids, err := ulq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ulq *UserLoginQuery) Count(ctx context.Context) (int, error) {
	if err := ulq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ulq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ulq *UserLoginQuery) CountX(ctx context.Context) int {
	count, err := ulq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ulq *UserLoginQuery) Exist(ctx context.Context) (bool, error) {
	if err := ulq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ulq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ulq *UserLoginQuery) ExistX(ctx context.Context) bool {
	exist, err := ulq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserLoginQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ulq *UserLoginQuery) Clone() *UserLoginQuery {
	if ulq == nil {
		return nil
	}
	return &UserLoginQuery{
		config:                                   ulq.config,
		limit:                                    ulq.limit,
		offset:                                   ulq.offset,
		order:                                    append([]OrderFunc{}, ulq.order...),
		predicates:                               append([]predicate.UserLogin{}, ulq.predicates...),
		withParty:                                ulq.withParty.Clone(),
		withPerson:                               ulq.withPerson.Clone(),
		withCreatedByParties:                     ulq.withCreatedByParties.Clone(),
		withLastModifiedByParties:                ulq.withLastModifiedByParties.Clone(),
		withChangeByPartyStatuses:                ulq.withChangeByPartyStatuses.Clone(),
		withUserLoginSecurityGroups:              ulq.withUserLoginSecurityGroups.Clone(),
		withUserPreferences:                      ulq.withUserPreferences.Clone(),
		withAssignedByWorkEffortPartyAssignments: ulq.withAssignedByWorkEffortPartyAssignments.Clone(),
		// clone intermediate query.
		sql:  ulq.sql.Clone(),
		path: ulq.path,
	}
}

// WithParty tells the query-builder to eager-load the nodes that are connected to
// the "party" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithParty(opts ...func(*PartyQuery)) *UserLoginQuery {
	query := &PartyQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withParty = query
	return ulq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithPerson(opts ...func(*PersonQuery)) *UserLoginQuery {
	query := &PersonQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withPerson = query
	return ulq
}

// WithCreatedByParties tells the query-builder to eager-load the nodes that are connected to
// the "created_by_parties" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithCreatedByParties(opts ...func(*PartyQuery)) *UserLoginQuery {
	query := &PartyQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withCreatedByParties = query
	return ulq
}

// WithLastModifiedByParties tells the query-builder to eager-load the nodes that are connected to
// the "last_modified_by_parties" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithLastModifiedByParties(opts ...func(*PartyQuery)) *UserLoginQuery {
	query := &PartyQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withLastModifiedByParties = query
	return ulq
}

// WithChangeByPartyStatuses tells the query-builder to eager-load the nodes that are connected to
// the "change_by_party_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithChangeByPartyStatuses(opts ...func(*PartyStatusQuery)) *UserLoginQuery {
	query := &PartyStatusQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withChangeByPartyStatuses = query
	return ulq
}

// WithUserLoginSecurityGroups tells the query-builder to eager-load the nodes that are connected to
// the "user_login_security_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithUserLoginSecurityGroups(opts ...func(*UserLoginSecurityGroupQuery)) *UserLoginQuery {
	query := &UserLoginSecurityGroupQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withUserLoginSecurityGroups = query
	return ulq
}

// WithUserPreferences tells the query-builder to eager-load the nodes that are connected to
// the "user_preferences" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithUserPreferences(opts ...func(*UserPreferenceQuery)) *UserLoginQuery {
	query := &UserPreferenceQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withUserPreferences = query
	return ulq
}

// WithAssignedByWorkEffortPartyAssignments tells the query-builder to eager-load the nodes that are connected to
// the "assigned_by_work_effort_party_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (ulq *UserLoginQuery) WithAssignedByWorkEffortPartyAssignments(opts ...func(*WorkEffortPartyAssignmentQuery)) *UserLoginQuery {
	query := &WorkEffortPartyAssignmentQuery{config: ulq.config}
	for _, opt := range opts {
		opt(query)
	}
	ulq.withAssignedByWorkEffortPartyAssignments = query
	return ulq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserLogin.Query().
//		GroupBy(userlogin.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ulq *UserLoginQuery) GroupBy(field string, fields ...string) *UserLoginGroupBy {
	group := &UserLoginGroupBy{config: ulq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ulq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ulq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UserLogin.Query().
//		Select(userlogin.FieldCreateTime).
//		Scan(ctx, &v)
//
func (ulq *UserLoginQuery) Select(field string, fields ...string) *UserLoginSelect {
	ulq.fields = append([]string{field}, fields...)
	return &UserLoginSelect{UserLoginQuery: ulq}
}

func (ulq *UserLoginQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ulq.fields {
		if !userlogin.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ulq.path != nil {
		prev, err := ulq.path(ctx)
		if err != nil {
			return err
		}
		ulq.sql = prev
	}
	return nil
}

func (ulq *UserLoginQuery) sqlAll(ctx context.Context) ([]*UserLogin, error) {
	var (
		nodes       = []*UserLogin{}
		withFKs     = ulq.withFKs
		_spec       = ulq.querySpec()
		loadedTypes = [8]bool{
			ulq.withParty != nil,
			ulq.withPerson != nil,
			ulq.withCreatedByParties != nil,
			ulq.withLastModifiedByParties != nil,
			ulq.withChangeByPartyStatuses != nil,
			ulq.withUserLoginSecurityGroups != nil,
			ulq.withUserPreferences != nil,
			ulq.withAssignedByWorkEffortPartyAssignments != nil,
		}
	)
	if ulq.withParty != nil || ulq.withPerson != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userlogin.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &UserLogin{config: ulq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ulq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ulq.withParty; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserLogin)
		for i := range nodes {
			if nodes[i].party_user_logins == nil {
				continue
			}
			fk := *nodes[i].party_user_logins
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(party.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_user_logins" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Party = n
			}
		}
	}

	if query := ulq.withPerson; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserLogin)
		for i := range nodes {
			if nodes[i].person_user_logins == nil {
				continue
			}
			fk := *nodes[i].person_user_logins
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(person.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "person_user_logins" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Person = n
			}
		}
	}

	if query := ulq.withCreatedByParties; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CreatedByParties = []*Party{}
		}
		query.withFKs = true
		query.Where(predicate.Party(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.CreatedByPartiesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_created_by_parties
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_created_by_parties" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_created_by_parties" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CreatedByParties = append(node.Edges.CreatedByParties, n)
		}
	}

	if query := ulq.withLastModifiedByParties; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.LastModifiedByParties = []*Party{}
		}
		query.withFKs = true
		query.Where(predicate.Party(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.LastModifiedByPartiesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_last_modified_by_parties
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_last_modified_by_parties" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_last_modified_by_parties" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.LastModifiedByParties = append(node.Edges.LastModifiedByParties, n)
		}
	}

	if query := ulq.withChangeByPartyStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ChangeByPartyStatuses = []*PartyStatus{}
		}
		query.withFKs = true
		query.Where(predicate.PartyStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.ChangeByPartyStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_change_by_party_statuses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_change_by_party_statuses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_change_by_party_statuses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ChangeByPartyStatuses = append(node.Edges.ChangeByPartyStatuses, n)
		}
	}

	if query := ulq.withUserLoginSecurityGroups; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserLoginSecurityGroups = []*UserLoginSecurityGroup{}
		}
		query.withFKs = true
		query.Where(predicate.UserLoginSecurityGroup(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.UserLoginSecurityGroupsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_user_login_security_groups
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_user_login_security_groups" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_user_login_security_groups" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserLoginSecurityGroups = append(node.Edges.UserLoginSecurityGroups, n)
		}
	}

	if query := ulq.withUserPreferences; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserPreferences = []*UserPreference{}
		}
		query.withFKs = true
		query.Where(predicate.UserPreference(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.UserPreferencesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_user_preferences
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_user_preferences" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_user_preferences" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserPreferences = append(node.Edges.UserPreferences, n)
		}
	}

	if query := ulq.withAssignedByWorkEffortPartyAssignments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UserLogin)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AssignedByWorkEffortPartyAssignments = []*WorkEffortPartyAssignment{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
			s.Where(sql.InValues(userlogin.AssignedByWorkEffortPartyAssignmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.user_login_assigned_by_work_effort_party_assignments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "user_login_assigned_by_work_effort_party_assignments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_assigned_by_work_effort_party_assignments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.AssignedByWorkEffortPartyAssignments = append(node.Edges.AssignedByWorkEffortPartyAssignments, n)
		}
	}

	return nodes, nil
}

func (ulq *UserLoginQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ulq.querySpec()
	return sqlgraph.CountNodes(ctx, ulq.driver, _spec)
}

func (ulq *UserLoginQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ulq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ulq *UserLoginQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlogin.Table,
			Columns: userlogin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlogin.FieldID,
			},
		},
		From:   ulq.sql,
		Unique: true,
	}
	if unique := ulq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ulq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlogin.FieldID)
		for i := range fields {
			if fields[i] != userlogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ulq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ulq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ulq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ulq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ulq *UserLoginQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ulq.driver.Dialect())
	t1 := builder.Table(userlogin.Table)
	columns := ulq.fields
	if len(columns) == 0 {
		columns = userlogin.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ulq.sql != nil {
		selector = ulq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range ulq.predicates {
		p(selector)
	}
	for _, p := range ulq.order {
		p(selector)
	}
	if offset := ulq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ulq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserLoginGroupBy is the group-by builder for UserLogin entities.
type UserLoginGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ulgb *UserLoginGroupBy) Aggregate(fns ...AggregateFunc) *UserLoginGroupBy {
	ulgb.fns = append(ulgb.fns, fns...)
	return ulgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ulgb *UserLoginGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ulgb.path(ctx)
	if err != nil {
		return err
	}
	ulgb.sql = query
	return ulgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ulgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ulgb.fields) > 1 {
		return nil, errors.New("ent: UserLoginGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ulgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) StringsX(ctx context.Context) []string {
	v, err := ulgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ulgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) StringX(ctx context.Context) string {
	v, err := ulgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ulgb.fields) > 1 {
		return nil, errors.New("ent: UserLoginGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ulgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) IntsX(ctx context.Context) []int {
	v, err := ulgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ulgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) IntX(ctx context.Context) int {
	v, err := ulgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ulgb.fields) > 1 {
		return nil, errors.New("ent: UserLoginGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ulgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ulgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ulgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ulgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ulgb.fields) > 1 {
		return nil, errors.New("ent: UserLoginGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ulgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ulgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ulgb *UserLoginGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ulgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ulgb *UserLoginGroupBy) BoolX(ctx context.Context) bool {
	v, err := ulgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ulgb *UserLoginGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ulgb.fields {
		if !userlogin.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ulgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ulgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ulgb *UserLoginGroupBy) sqlQuery() *sql.Selector {
	selector := ulgb.sql.Select()
	aggregation := make([]string, 0, len(ulgb.fns))
	for _, fn := range ulgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ulgb.fields)+len(ulgb.fns))
		for _, f := range ulgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ulgb.fields...)...)
}

// UserLoginSelect is the builder for selecting fields of UserLogin entities.
type UserLoginSelect struct {
	*UserLoginQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (uls *UserLoginSelect) Scan(ctx context.Context, v interface{}) error {
	if err := uls.prepareQuery(ctx); err != nil {
		return err
	}
	uls.sql = uls.UserLoginQuery.sqlQuery(ctx)
	return uls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uls *UserLoginSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uls.fields) > 1 {
		return nil, errors.New("ent: UserLoginSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uls *UserLoginSelect) StringsX(ctx context.Context) []string {
	v, err := uls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uls *UserLoginSelect) StringX(ctx context.Context) string {
	v, err := uls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uls.fields) > 1 {
		return nil, errors.New("ent: UserLoginSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uls *UserLoginSelect) IntsX(ctx context.Context) []int {
	v, err := uls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uls *UserLoginSelect) IntX(ctx context.Context) int {
	v, err := uls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uls.fields) > 1 {
		return nil, errors.New("ent: UserLoginSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uls *UserLoginSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uls *UserLoginSelect) Float64X(ctx context.Context) float64 {
	v, err := uls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uls.fields) > 1 {
		return nil, errors.New("ent: UserLoginSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uls *UserLoginSelect) BoolsX(ctx context.Context) []bool {
	v, err := uls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (uls *UserLoginSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userlogin.Label}
	default:
		err = fmt.Errorf("ent: UserLoginSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uls *UserLoginSelect) BoolX(ctx context.Context) bool {
	v, err := uls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uls *UserLoginSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uls.sql.Query()
	if err := uls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
