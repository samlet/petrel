// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partystatus"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/person"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userpreference"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// UserLoginUpdate is the builder for updating UserLogin entities.
type UserLoginUpdate struct {
	config
	hooks    []Hook
	mutation *UserLoginMutation
}

// Where adds a new predicate for the UserLoginUpdate builder.
func (ulu *UserLoginUpdate) Where(ps ...predicate.UserLogin) *UserLoginUpdate {
	ulu.mutation.predicates = append(ulu.mutation.predicates, ps...)
	return ulu
}

// SetStringRef sets the "string_ref" field.
func (ulu *UserLoginUpdate) SetStringRef(s string) *UserLoginUpdate {
	ulu.mutation.SetStringRef(s)
	return ulu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableStringRef(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetStringRef(*s)
	}
	return ulu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ulu *UserLoginUpdate) ClearStringRef() *UserLoginUpdate {
	ulu.mutation.ClearStringRef()
	return ulu
}

// SetCurrentPassword sets the "current_password" field.
func (ulu *UserLoginUpdate) SetCurrentPassword(s string) *UserLoginUpdate {
	ulu.mutation.SetCurrentPassword(s)
	return ulu
}

// SetNillableCurrentPassword sets the "current_password" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableCurrentPassword(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetCurrentPassword(*s)
	}
	return ulu
}

// ClearCurrentPassword clears the value of the "current_password" field.
func (ulu *UserLoginUpdate) ClearCurrentPassword() *UserLoginUpdate {
	ulu.mutation.ClearCurrentPassword()
	return ulu
}

// SetPasswordHint sets the "password_hint" field.
func (ulu *UserLoginUpdate) SetPasswordHint(s string) *UserLoginUpdate {
	ulu.mutation.SetPasswordHint(s)
	return ulu
}

// SetNillablePasswordHint sets the "password_hint" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillablePasswordHint(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetPasswordHint(*s)
	}
	return ulu
}

// ClearPasswordHint clears the value of the "password_hint" field.
func (ulu *UserLoginUpdate) ClearPasswordHint() *UserLoginUpdate {
	ulu.mutation.ClearPasswordHint()
	return ulu
}

// SetIsSystem sets the "is_system" field.
func (ulu *UserLoginUpdate) SetIsSystem(us userlogin.IsSystem) *UserLoginUpdate {
	ulu.mutation.SetIsSystem(us)
	return ulu
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableIsSystem(us *userlogin.IsSystem) *UserLoginUpdate {
	if us != nil {
		ulu.SetIsSystem(*us)
	}
	return ulu
}

// ClearIsSystem clears the value of the "is_system" field.
func (ulu *UserLoginUpdate) ClearIsSystem() *UserLoginUpdate {
	ulu.mutation.ClearIsSystem()
	return ulu
}

// SetEnabled sets the "enabled" field.
func (ulu *UserLoginUpdate) SetEnabled(u userlogin.Enabled) *UserLoginUpdate {
	ulu.mutation.SetEnabled(u)
	return ulu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableEnabled(u *userlogin.Enabled) *UserLoginUpdate {
	if u != nil {
		ulu.SetEnabled(*u)
	}
	return ulu
}

// ClearEnabled clears the value of the "enabled" field.
func (ulu *UserLoginUpdate) ClearEnabled() *UserLoginUpdate {
	ulu.mutation.ClearEnabled()
	return ulu
}

// SetHasLoggedOut sets the "has_logged_out" field.
func (ulu *UserLoginUpdate) SetHasLoggedOut(ulo userlogin.HasLoggedOut) *UserLoginUpdate {
	ulu.mutation.SetHasLoggedOut(ulo)
	return ulu
}

// SetNillableHasLoggedOut sets the "has_logged_out" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableHasLoggedOut(ulo *userlogin.HasLoggedOut) *UserLoginUpdate {
	if ulo != nil {
		ulu.SetHasLoggedOut(*ulo)
	}
	return ulu
}

// ClearHasLoggedOut clears the value of the "has_logged_out" field.
func (ulu *UserLoginUpdate) ClearHasLoggedOut() *UserLoginUpdate {
	ulu.mutation.ClearHasLoggedOut()
	return ulu
}

// SetRequirePasswordChange sets the "require_password_change" field.
func (ulu *UserLoginUpdate) SetRequirePasswordChange(upc userlogin.RequirePasswordChange) *UserLoginUpdate {
	ulu.mutation.SetRequirePasswordChange(upc)
	return ulu
}

// SetNillableRequirePasswordChange sets the "require_password_change" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableRequirePasswordChange(upc *userlogin.RequirePasswordChange) *UserLoginUpdate {
	if upc != nil {
		ulu.SetRequirePasswordChange(*upc)
	}
	return ulu
}

// ClearRequirePasswordChange clears the value of the "require_password_change" field.
func (ulu *UserLoginUpdate) ClearRequirePasswordChange() *UserLoginUpdate {
	ulu.mutation.ClearRequirePasswordChange()
	return ulu
}

// SetLastCurrencyUom sets the "last_currency_uom" field.
func (ulu *UserLoginUpdate) SetLastCurrencyUom(i int) *UserLoginUpdate {
	ulu.mutation.ResetLastCurrencyUom()
	ulu.mutation.SetLastCurrencyUom(i)
	return ulu
}

// SetNillableLastCurrencyUom sets the "last_currency_uom" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableLastCurrencyUom(i *int) *UserLoginUpdate {
	if i != nil {
		ulu.SetLastCurrencyUom(*i)
	}
	return ulu
}

// AddLastCurrencyUom adds i to the "last_currency_uom" field.
func (ulu *UserLoginUpdate) AddLastCurrencyUom(i int) *UserLoginUpdate {
	ulu.mutation.AddLastCurrencyUom(i)
	return ulu
}

// ClearLastCurrencyUom clears the value of the "last_currency_uom" field.
func (ulu *UserLoginUpdate) ClearLastCurrencyUom() *UserLoginUpdate {
	ulu.mutation.ClearLastCurrencyUom()
	return ulu
}

// SetLastLocale sets the "last_locale" field.
func (ulu *UserLoginUpdate) SetLastLocale(s string) *UserLoginUpdate {
	ulu.mutation.SetLastLocale(s)
	return ulu
}

// SetNillableLastLocale sets the "last_locale" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableLastLocale(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetLastLocale(*s)
	}
	return ulu
}

// ClearLastLocale clears the value of the "last_locale" field.
func (ulu *UserLoginUpdate) ClearLastLocale() *UserLoginUpdate {
	ulu.mutation.ClearLastLocale()
	return ulu
}

// SetLastTimeZone sets the "last_time_zone" field.
func (ulu *UserLoginUpdate) SetLastTimeZone(s string) *UserLoginUpdate {
	ulu.mutation.SetLastTimeZone(s)
	return ulu
}

// SetNillableLastTimeZone sets the "last_time_zone" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableLastTimeZone(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetLastTimeZone(*s)
	}
	return ulu
}

// ClearLastTimeZone clears the value of the "last_time_zone" field.
func (ulu *UserLoginUpdate) ClearLastTimeZone() *UserLoginUpdate {
	ulu.mutation.ClearLastTimeZone()
	return ulu
}

// SetDisabledDateTime sets the "disabled_date_time" field.
func (ulu *UserLoginUpdate) SetDisabledDateTime(t time.Time) *UserLoginUpdate {
	ulu.mutation.SetDisabledDateTime(t)
	return ulu
}

// SetNillableDisabledDateTime sets the "disabled_date_time" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableDisabledDateTime(t *time.Time) *UserLoginUpdate {
	if t != nil {
		ulu.SetDisabledDateTime(*t)
	}
	return ulu
}

// ClearDisabledDateTime clears the value of the "disabled_date_time" field.
func (ulu *UserLoginUpdate) ClearDisabledDateTime() *UserLoginUpdate {
	ulu.mutation.ClearDisabledDateTime()
	return ulu
}

// SetSuccessiveFailedLogins sets the "successive_failed_logins" field.
func (ulu *UserLoginUpdate) SetSuccessiveFailedLogins(i int) *UserLoginUpdate {
	ulu.mutation.ResetSuccessiveFailedLogins()
	ulu.mutation.SetSuccessiveFailedLogins(i)
	return ulu
}

// SetNillableSuccessiveFailedLogins sets the "successive_failed_logins" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableSuccessiveFailedLogins(i *int) *UserLoginUpdate {
	if i != nil {
		ulu.SetSuccessiveFailedLogins(*i)
	}
	return ulu
}

// AddSuccessiveFailedLogins adds i to the "successive_failed_logins" field.
func (ulu *UserLoginUpdate) AddSuccessiveFailedLogins(i int) *UserLoginUpdate {
	ulu.mutation.AddSuccessiveFailedLogins(i)
	return ulu
}

// ClearSuccessiveFailedLogins clears the value of the "successive_failed_logins" field.
func (ulu *UserLoginUpdate) ClearSuccessiveFailedLogins() *UserLoginUpdate {
	ulu.mutation.ClearSuccessiveFailedLogins()
	return ulu
}

// SetExternalAuthID sets the "external_auth_id" field.
func (ulu *UserLoginUpdate) SetExternalAuthID(s string) *UserLoginUpdate {
	ulu.mutation.SetExternalAuthID(s)
	return ulu
}

// SetNillableExternalAuthID sets the "external_auth_id" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableExternalAuthID(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetExternalAuthID(*s)
	}
	return ulu
}

// ClearExternalAuthID clears the value of the "external_auth_id" field.
func (ulu *UserLoginUpdate) ClearExternalAuthID() *UserLoginUpdate {
	ulu.mutation.ClearExternalAuthID()
	return ulu
}

// SetUserLdapDn sets the "user_ldap_dn" field.
func (ulu *UserLoginUpdate) SetUserLdapDn(s string) *UserLoginUpdate {
	ulu.mutation.SetUserLdapDn(s)
	return ulu
}

// SetNillableUserLdapDn sets the "user_ldap_dn" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableUserLdapDn(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetUserLdapDn(*s)
	}
	return ulu
}

// ClearUserLdapDn clears the value of the "user_ldap_dn" field.
func (ulu *UserLoginUpdate) ClearUserLdapDn() *UserLoginUpdate {
	ulu.mutation.ClearUserLdapDn()
	return ulu
}

// SetDisabledBy sets the "disabled_by" field.
func (ulu *UserLoginUpdate) SetDisabledBy(s string) *UserLoginUpdate {
	ulu.mutation.SetDisabledBy(s)
	return ulu
}

// SetNillableDisabledBy sets the "disabled_by" field if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillableDisabledBy(s *string) *UserLoginUpdate {
	if s != nil {
		ulu.SetDisabledBy(*s)
	}
	return ulu
}

// ClearDisabledBy clears the value of the "disabled_by" field.
func (ulu *UserLoginUpdate) ClearDisabledBy() *UserLoginUpdate {
	ulu.mutation.ClearDisabledBy()
	return ulu
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (ulu *UserLoginUpdate) SetPartyID(id int) *UserLoginUpdate {
	ulu.mutation.SetPartyID(id)
	return ulu
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillablePartyID(id *int) *UserLoginUpdate {
	if id != nil {
		ulu = ulu.SetPartyID(*id)
	}
	return ulu
}

// SetParty sets the "party" edge to the Party entity.
func (ulu *UserLoginUpdate) SetParty(p *Party) *UserLoginUpdate {
	return ulu.SetPartyID(p.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ulu *UserLoginUpdate) SetPersonID(id int) *UserLoginUpdate {
	ulu.mutation.SetPersonID(id)
	return ulu
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ulu *UserLoginUpdate) SetNillablePersonID(id *int) *UserLoginUpdate {
	if id != nil {
		ulu = ulu.SetPersonID(*id)
	}
	return ulu
}

// SetPerson sets the "person" edge to the Person entity.
func (ulu *UserLoginUpdate) SetPerson(p *Person) *UserLoginUpdate {
	return ulu.SetPersonID(p.ID)
}

// AddCreatedByPartyIDs adds the "created_by_parties" edge to the Party entity by IDs.
func (ulu *UserLoginUpdate) AddCreatedByPartyIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddCreatedByPartyIDs(ids...)
	return ulu
}

// AddCreatedByParties adds the "created_by_parties" edges to the Party entity.
func (ulu *UserLoginUpdate) AddCreatedByParties(p ...*Party) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.AddCreatedByPartyIDs(ids...)
}

// AddLastModifiedByPartyIDs adds the "last_modified_by_parties" edge to the Party entity by IDs.
func (ulu *UserLoginUpdate) AddLastModifiedByPartyIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddLastModifiedByPartyIDs(ids...)
	return ulu
}

// AddLastModifiedByParties adds the "last_modified_by_parties" edges to the Party entity.
func (ulu *UserLoginUpdate) AddLastModifiedByParties(p ...*Party) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.AddLastModifiedByPartyIDs(ids...)
}

// AddChangeByPartyStatusIDs adds the "change_by_party_statuses" edge to the PartyStatus entity by IDs.
func (ulu *UserLoginUpdate) AddChangeByPartyStatusIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddChangeByPartyStatusIDs(ids...)
	return ulu
}

// AddChangeByPartyStatuses adds the "change_by_party_statuses" edges to the PartyStatus entity.
func (ulu *UserLoginUpdate) AddChangeByPartyStatuses(p ...*PartyStatus) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.AddChangeByPartyStatusIDs(ids...)
}

// AddUserLoginSecurityGroupIDs adds the "user_login_security_groups" edge to the UserLoginSecurityGroup entity by IDs.
func (ulu *UserLoginUpdate) AddUserLoginSecurityGroupIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddUserLoginSecurityGroupIDs(ids...)
	return ulu
}

// AddUserLoginSecurityGroups adds the "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (ulu *UserLoginUpdate) AddUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *UserLoginUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ulu.AddUserLoginSecurityGroupIDs(ids...)
}

// AddUserPreferenceIDs adds the "user_preferences" edge to the UserPreference entity by IDs.
func (ulu *UserLoginUpdate) AddUserPreferenceIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddUserPreferenceIDs(ids...)
	return ulu
}

// AddUserPreferences adds the "user_preferences" edges to the UserPreference entity.
func (ulu *UserLoginUpdate) AddUserPreferences(u ...*UserPreference) *UserLoginUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ulu.AddUserPreferenceIDs(ids...)
}

// AddAssignedByWorkEffortPartyAssignmentIDs adds the "assigned_by_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (ulu *UserLoginUpdate) AddAssignedByWorkEffortPartyAssignmentIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.AddAssignedByWorkEffortPartyAssignmentIDs(ids...)
	return ulu
}

// AddAssignedByWorkEffortPartyAssignments adds the "assigned_by_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (ulu *UserLoginUpdate) AddAssignedByWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *UserLoginUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ulu.AddAssignedByWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the UserLoginMutation object of the builder.
func (ulu *UserLoginUpdate) Mutation() *UserLoginMutation {
	return ulu.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (ulu *UserLoginUpdate) ClearParty() *UserLoginUpdate {
	ulu.mutation.ClearParty()
	return ulu
}

// ClearPerson clears the "person" edge to the Person entity.
func (ulu *UserLoginUpdate) ClearPerson() *UserLoginUpdate {
	ulu.mutation.ClearPerson()
	return ulu
}

// ClearCreatedByParties clears all "created_by_parties" edges to the Party entity.
func (ulu *UserLoginUpdate) ClearCreatedByParties() *UserLoginUpdate {
	ulu.mutation.ClearCreatedByParties()
	return ulu
}

// RemoveCreatedByPartyIDs removes the "created_by_parties" edge to Party entities by IDs.
func (ulu *UserLoginUpdate) RemoveCreatedByPartyIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveCreatedByPartyIDs(ids...)
	return ulu
}

// RemoveCreatedByParties removes "created_by_parties" edges to Party entities.
func (ulu *UserLoginUpdate) RemoveCreatedByParties(p ...*Party) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.RemoveCreatedByPartyIDs(ids...)
}

// ClearLastModifiedByParties clears all "last_modified_by_parties" edges to the Party entity.
func (ulu *UserLoginUpdate) ClearLastModifiedByParties() *UserLoginUpdate {
	ulu.mutation.ClearLastModifiedByParties()
	return ulu
}

// RemoveLastModifiedByPartyIDs removes the "last_modified_by_parties" edge to Party entities by IDs.
func (ulu *UserLoginUpdate) RemoveLastModifiedByPartyIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveLastModifiedByPartyIDs(ids...)
	return ulu
}

// RemoveLastModifiedByParties removes "last_modified_by_parties" edges to Party entities.
func (ulu *UserLoginUpdate) RemoveLastModifiedByParties(p ...*Party) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.RemoveLastModifiedByPartyIDs(ids...)
}

// ClearChangeByPartyStatuses clears all "change_by_party_statuses" edges to the PartyStatus entity.
func (ulu *UserLoginUpdate) ClearChangeByPartyStatuses() *UserLoginUpdate {
	ulu.mutation.ClearChangeByPartyStatuses()
	return ulu
}

// RemoveChangeByPartyStatusIDs removes the "change_by_party_statuses" edge to PartyStatus entities by IDs.
func (ulu *UserLoginUpdate) RemoveChangeByPartyStatusIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveChangeByPartyStatusIDs(ids...)
	return ulu
}

// RemoveChangeByPartyStatuses removes "change_by_party_statuses" edges to PartyStatus entities.
func (ulu *UserLoginUpdate) RemoveChangeByPartyStatuses(p ...*PartyStatus) *UserLoginUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ulu.RemoveChangeByPartyStatusIDs(ids...)
}

// ClearUserLoginSecurityGroups clears all "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (ulu *UserLoginUpdate) ClearUserLoginSecurityGroups() *UserLoginUpdate {
	ulu.mutation.ClearUserLoginSecurityGroups()
	return ulu
}

// RemoveUserLoginSecurityGroupIDs removes the "user_login_security_groups" edge to UserLoginSecurityGroup entities by IDs.
func (ulu *UserLoginUpdate) RemoveUserLoginSecurityGroupIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveUserLoginSecurityGroupIDs(ids...)
	return ulu
}

// RemoveUserLoginSecurityGroups removes "user_login_security_groups" edges to UserLoginSecurityGroup entities.
func (ulu *UserLoginUpdate) RemoveUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *UserLoginUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ulu.RemoveUserLoginSecurityGroupIDs(ids...)
}

// ClearUserPreferences clears all "user_preferences" edges to the UserPreference entity.
func (ulu *UserLoginUpdate) ClearUserPreferences() *UserLoginUpdate {
	ulu.mutation.ClearUserPreferences()
	return ulu
}

// RemoveUserPreferenceIDs removes the "user_preferences" edge to UserPreference entities by IDs.
func (ulu *UserLoginUpdate) RemoveUserPreferenceIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveUserPreferenceIDs(ids...)
	return ulu
}

// RemoveUserPreferences removes "user_preferences" edges to UserPreference entities.
func (ulu *UserLoginUpdate) RemoveUserPreferences(u ...*UserPreference) *UserLoginUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ulu.RemoveUserPreferenceIDs(ids...)
}

// ClearAssignedByWorkEffortPartyAssignments clears all "assigned_by_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (ulu *UserLoginUpdate) ClearAssignedByWorkEffortPartyAssignments() *UserLoginUpdate {
	ulu.mutation.ClearAssignedByWorkEffortPartyAssignments()
	return ulu
}

// RemoveAssignedByWorkEffortPartyAssignmentIDs removes the "assigned_by_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (ulu *UserLoginUpdate) RemoveAssignedByWorkEffortPartyAssignmentIDs(ids ...int) *UserLoginUpdate {
	ulu.mutation.RemoveAssignedByWorkEffortPartyAssignmentIDs(ids...)
	return ulu
}

// RemoveAssignedByWorkEffortPartyAssignments removes "assigned_by_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (ulu *UserLoginUpdate) RemoveAssignedByWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *UserLoginUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ulu.RemoveAssignedByWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLoginUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ulu.defaults()
	if len(ulu.hooks) == 0 {
		if err = ulu.check(); err != nil {
			return 0, err
		}
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ulu.check(); err != nil {
				return 0, err
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLoginUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLoginUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLoginUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulu *UserLoginUpdate) defaults() {
	if _, ok := ulu.mutation.UpdateTime(); !ok {
		v := userlogin.UpdateDefaultUpdateTime()
		ulu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulu *UserLoginUpdate) check() error {
	if v, ok := ulu.mutation.IsSystem(); ok {
		if err := userlogin.IsSystemValidator(v); err != nil {
			return &ValidationError{Name: "is_system", err: fmt.Errorf("ent: validator failed for field \"is_system\": %w", err)}
		}
	}
	if v, ok := ulu.mutation.Enabled(); ok {
		if err := userlogin.EnabledValidator(v); err != nil {
			return &ValidationError{Name: "enabled", err: fmt.Errorf("ent: validator failed for field \"enabled\": %w", err)}
		}
	}
	if v, ok := ulu.mutation.HasLoggedOut(); ok {
		if err := userlogin.HasLoggedOutValidator(v); err != nil {
			return &ValidationError{Name: "has_logged_out", err: fmt.Errorf("ent: validator failed for field \"has_logged_out\": %w", err)}
		}
	}
	if v, ok := ulu.mutation.RequirePasswordChange(); ok {
		if err := userlogin.RequirePasswordChangeValidator(v); err != nil {
			return &ValidationError{Name: "require_password_change", err: fmt.Errorf("ent: validator failed for field \"require_password_change\": %w", err)}
		}
	}
	if v, ok := ulu.mutation.LastLocale(); ok {
		if err := userlogin.LastLocaleValidator(v); err != nil {
			return &ValidationError{Name: "last_locale", err: fmt.Errorf("ent: validator failed for field \"last_locale\": %w", err)}
		}
	}
	if v, ok := ulu.mutation.LastTimeZone(); ok {
		if err := userlogin.LastTimeZoneValidator(v); err != nil {
			return &ValidationError{Name: "last_time_zone", err: fmt.Errorf("ent: validator failed for field \"last_time_zone\": %w", err)}
		}
	}
	return nil
}

func (ulu *UserLoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlogin.Table,
			Columns: userlogin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlogin.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlogin.FieldUpdateTime,
		})
	}
	if value, ok := ulu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldStringRef,
		})
	}
	if ulu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldStringRef,
		})
	}
	if value, ok := ulu.mutation.CurrentPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldCurrentPassword,
		})
	}
	if ulu.mutation.CurrentPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldCurrentPassword,
		})
	}
	if value, ok := ulu.mutation.PasswordHint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldPasswordHint,
		})
	}
	if ulu.mutation.PasswordHintCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldPasswordHint,
		})
	}
	if value, ok := ulu.mutation.IsSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldIsSystem,
		})
	}
	if ulu.mutation.IsSystemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldIsSystem,
		})
	}
	if value, ok := ulu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldEnabled,
		})
	}
	if ulu.mutation.EnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldEnabled,
		})
	}
	if value, ok := ulu.mutation.HasLoggedOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldHasLoggedOut,
		})
	}
	if ulu.mutation.HasLoggedOutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldHasLoggedOut,
		})
	}
	if value, ok := ulu.mutation.RequirePasswordChange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldRequirePasswordChange,
		})
	}
	if ulu.mutation.RequirePasswordChangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldRequirePasswordChange,
		})
	}
	if value, ok := ulu.mutation.LastCurrencyUom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if value, ok := ulu.mutation.AddedLastCurrencyUom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if ulu.mutation.LastCurrencyUomCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if value, ok := ulu.mutation.LastLocale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldLastLocale,
		})
	}
	if ulu.mutation.LastLocaleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldLastLocale,
		})
	}
	if value, ok := ulu.mutation.LastTimeZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldLastTimeZone,
		})
	}
	if ulu.mutation.LastTimeZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldLastTimeZone,
		})
	}
	if value, ok := ulu.mutation.DisabledDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlogin.FieldDisabledDateTime,
		})
	}
	if ulu.mutation.DisabledDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userlogin.FieldDisabledDateTime,
		})
	}
	if value, ok := ulu.mutation.SuccessiveFailedLogins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if value, ok := ulu.mutation.AddedSuccessiveFailedLogins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if ulu.mutation.SuccessiveFailedLoginsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if value, ok := ulu.mutation.ExternalAuthID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldExternalAuthID,
		})
	}
	if ulu.mutation.ExternalAuthIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldExternalAuthID,
		})
	}
	if value, ok := ulu.mutation.UserLdapDn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldUserLdapDn,
		})
	}
	if ulu.mutation.UserLdapDnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldUserLdapDn,
		})
	}
	if value, ok := ulu.mutation.DisabledBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldDisabledBy,
		})
	}
	if ulu.mutation.DisabledByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldDisabledBy,
		})
	}
	if ulu.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PartyTable,
			Columns: []string{userlogin.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PartyTable,
			Columns: []string{userlogin.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PersonTable,
			Columns: []string{userlogin.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PersonTable,
			Columns: []string{userlogin.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.CreatedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedCreatedByPartiesIDs(); len(nodes) > 0 && !ulu.mutation.CreatedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.CreatedByPartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.LastModifiedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedLastModifiedByPartiesIDs(); len(nodes) > 0 && !ulu.mutation.LastModifiedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.LastModifiedByPartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.ChangeByPartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedChangeByPartyStatusesIDs(); len(nodes) > 0 && !ulu.mutation.ChangeByPartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.ChangeByPartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedUserLoginSecurityGroupsIDs(); len(nodes) > 0 && !ulu.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.UserLoginSecurityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.UserPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedUserPreferencesIDs(); len(nodes) > 0 && !ulu.mutation.UserPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.UserPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.AssignedByWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedAssignedByWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !ulu.mutation.AssignedByWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.AssignedByWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlogin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserLoginUpdateOne is the builder for updating a single UserLogin entity.
type UserLoginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLoginMutation
}

// SetStringRef sets the "string_ref" field.
func (uluo *UserLoginUpdateOne) SetStringRef(s string) *UserLoginUpdateOne {
	uluo.mutation.SetStringRef(s)
	return uluo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableStringRef(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetStringRef(*s)
	}
	return uluo
}

// ClearStringRef clears the value of the "string_ref" field.
func (uluo *UserLoginUpdateOne) ClearStringRef() *UserLoginUpdateOne {
	uluo.mutation.ClearStringRef()
	return uluo
}

// SetCurrentPassword sets the "current_password" field.
func (uluo *UserLoginUpdateOne) SetCurrentPassword(s string) *UserLoginUpdateOne {
	uluo.mutation.SetCurrentPassword(s)
	return uluo
}

// SetNillableCurrentPassword sets the "current_password" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableCurrentPassword(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetCurrentPassword(*s)
	}
	return uluo
}

// ClearCurrentPassword clears the value of the "current_password" field.
func (uluo *UserLoginUpdateOne) ClearCurrentPassword() *UserLoginUpdateOne {
	uluo.mutation.ClearCurrentPassword()
	return uluo
}

// SetPasswordHint sets the "password_hint" field.
func (uluo *UserLoginUpdateOne) SetPasswordHint(s string) *UserLoginUpdateOne {
	uluo.mutation.SetPasswordHint(s)
	return uluo
}

// SetNillablePasswordHint sets the "password_hint" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillablePasswordHint(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetPasswordHint(*s)
	}
	return uluo
}

// ClearPasswordHint clears the value of the "password_hint" field.
func (uluo *UserLoginUpdateOne) ClearPasswordHint() *UserLoginUpdateOne {
	uluo.mutation.ClearPasswordHint()
	return uluo
}

// SetIsSystem sets the "is_system" field.
func (uluo *UserLoginUpdateOne) SetIsSystem(us userlogin.IsSystem) *UserLoginUpdateOne {
	uluo.mutation.SetIsSystem(us)
	return uluo
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableIsSystem(us *userlogin.IsSystem) *UserLoginUpdateOne {
	if us != nil {
		uluo.SetIsSystem(*us)
	}
	return uluo
}

// ClearIsSystem clears the value of the "is_system" field.
func (uluo *UserLoginUpdateOne) ClearIsSystem() *UserLoginUpdateOne {
	uluo.mutation.ClearIsSystem()
	return uluo
}

// SetEnabled sets the "enabled" field.
func (uluo *UserLoginUpdateOne) SetEnabled(u userlogin.Enabled) *UserLoginUpdateOne {
	uluo.mutation.SetEnabled(u)
	return uluo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableEnabled(u *userlogin.Enabled) *UserLoginUpdateOne {
	if u != nil {
		uluo.SetEnabled(*u)
	}
	return uluo
}

// ClearEnabled clears the value of the "enabled" field.
func (uluo *UserLoginUpdateOne) ClearEnabled() *UserLoginUpdateOne {
	uluo.mutation.ClearEnabled()
	return uluo
}

// SetHasLoggedOut sets the "has_logged_out" field.
func (uluo *UserLoginUpdateOne) SetHasLoggedOut(ulo userlogin.HasLoggedOut) *UserLoginUpdateOne {
	uluo.mutation.SetHasLoggedOut(ulo)
	return uluo
}

// SetNillableHasLoggedOut sets the "has_logged_out" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableHasLoggedOut(ulo *userlogin.HasLoggedOut) *UserLoginUpdateOne {
	if ulo != nil {
		uluo.SetHasLoggedOut(*ulo)
	}
	return uluo
}

// ClearHasLoggedOut clears the value of the "has_logged_out" field.
func (uluo *UserLoginUpdateOne) ClearHasLoggedOut() *UserLoginUpdateOne {
	uluo.mutation.ClearHasLoggedOut()
	return uluo
}

// SetRequirePasswordChange sets the "require_password_change" field.
func (uluo *UserLoginUpdateOne) SetRequirePasswordChange(upc userlogin.RequirePasswordChange) *UserLoginUpdateOne {
	uluo.mutation.SetRequirePasswordChange(upc)
	return uluo
}

// SetNillableRequirePasswordChange sets the "require_password_change" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableRequirePasswordChange(upc *userlogin.RequirePasswordChange) *UserLoginUpdateOne {
	if upc != nil {
		uluo.SetRequirePasswordChange(*upc)
	}
	return uluo
}

// ClearRequirePasswordChange clears the value of the "require_password_change" field.
func (uluo *UserLoginUpdateOne) ClearRequirePasswordChange() *UserLoginUpdateOne {
	uluo.mutation.ClearRequirePasswordChange()
	return uluo
}

// SetLastCurrencyUom sets the "last_currency_uom" field.
func (uluo *UserLoginUpdateOne) SetLastCurrencyUom(i int) *UserLoginUpdateOne {
	uluo.mutation.ResetLastCurrencyUom()
	uluo.mutation.SetLastCurrencyUom(i)
	return uluo
}

// SetNillableLastCurrencyUom sets the "last_currency_uom" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableLastCurrencyUom(i *int) *UserLoginUpdateOne {
	if i != nil {
		uluo.SetLastCurrencyUom(*i)
	}
	return uluo
}

// AddLastCurrencyUom adds i to the "last_currency_uom" field.
func (uluo *UserLoginUpdateOne) AddLastCurrencyUom(i int) *UserLoginUpdateOne {
	uluo.mutation.AddLastCurrencyUom(i)
	return uluo
}

// ClearLastCurrencyUom clears the value of the "last_currency_uom" field.
func (uluo *UserLoginUpdateOne) ClearLastCurrencyUom() *UserLoginUpdateOne {
	uluo.mutation.ClearLastCurrencyUom()
	return uluo
}

// SetLastLocale sets the "last_locale" field.
func (uluo *UserLoginUpdateOne) SetLastLocale(s string) *UserLoginUpdateOne {
	uluo.mutation.SetLastLocale(s)
	return uluo
}

// SetNillableLastLocale sets the "last_locale" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableLastLocale(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetLastLocale(*s)
	}
	return uluo
}

// ClearLastLocale clears the value of the "last_locale" field.
func (uluo *UserLoginUpdateOne) ClearLastLocale() *UserLoginUpdateOne {
	uluo.mutation.ClearLastLocale()
	return uluo
}

// SetLastTimeZone sets the "last_time_zone" field.
func (uluo *UserLoginUpdateOne) SetLastTimeZone(s string) *UserLoginUpdateOne {
	uluo.mutation.SetLastTimeZone(s)
	return uluo
}

// SetNillableLastTimeZone sets the "last_time_zone" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableLastTimeZone(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetLastTimeZone(*s)
	}
	return uluo
}

// ClearLastTimeZone clears the value of the "last_time_zone" field.
func (uluo *UserLoginUpdateOne) ClearLastTimeZone() *UserLoginUpdateOne {
	uluo.mutation.ClearLastTimeZone()
	return uluo
}

// SetDisabledDateTime sets the "disabled_date_time" field.
func (uluo *UserLoginUpdateOne) SetDisabledDateTime(t time.Time) *UserLoginUpdateOne {
	uluo.mutation.SetDisabledDateTime(t)
	return uluo
}

// SetNillableDisabledDateTime sets the "disabled_date_time" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableDisabledDateTime(t *time.Time) *UserLoginUpdateOne {
	if t != nil {
		uluo.SetDisabledDateTime(*t)
	}
	return uluo
}

// ClearDisabledDateTime clears the value of the "disabled_date_time" field.
func (uluo *UserLoginUpdateOne) ClearDisabledDateTime() *UserLoginUpdateOne {
	uluo.mutation.ClearDisabledDateTime()
	return uluo
}

// SetSuccessiveFailedLogins sets the "successive_failed_logins" field.
func (uluo *UserLoginUpdateOne) SetSuccessiveFailedLogins(i int) *UserLoginUpdateOne {
	uluo.mutation.ResetSuccessiveFailedLogins()
	uluo.mutation.SetSuccessiveFailedLogins(i)
	return uluo
}

// SetNillableSuccessiveFailedLogins sets the "successive_failed_logins" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableSuccessiveFailedLogins(i *int) *UserLoginUpdateOne {
	if i != nil {
		uluo.SetSuccessiveFailedLogins(*i)
	}
	return uluo
}

// AddSuccessiveFailedLogins adds i to the "successive_failed_logins" field.
func (uluo *UserLoginUpdateOne) AddSuccessiveFailedLogins(i int) *UserLoginUpdateOne {
	uluo.mutation.AddSuccessiveFailedLogins(i)
	return uluo
}

// ClearSuccessiveFailedLogins clears the value of the "successive_failed_logins" field.
func (uluo *UserLoginUpdateOne) ClearSuccessiveFailedLogins() *UserLoginUpdateOne {
	uluo.mutation.ClearSuccessiveFailedLogins()
	return uluo
}

// SetExternalAuthID sets the "external_auth_id" field.
func (uluo *UserLoginUpdateOne) SetExternalAuthID(s string) *UserLoginUpdateOne {
	uluo.mutation.SetExternalAuthID(s)
	return uluo
}

// SetNillableExternalAuthID sets the "external_auth_id" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableExternalAuthID(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetExternalAuthID(*s)
	}
	return uluo
}

// ClearExternalAuthID clears the value of the "external_auth_id" field.
func (uluo *UserLoginUpdateOne) ClearExternalAuthID() *UserLoginUpdateOne {
	uluo.mutation.ClearExternalAuthID()
	return uluo
}

// SetUserLdapDn sets the "user_ldap_dn" field.
func (uluo *UserLoginUpdateOne) SetUserLdapDn(s string) *UserLoginUpdateOne {
	uluo.mutation.SetUserLdapDn(s)
	return uluo
}

// SetNillableUserLdapDn sets the "user_ldap_dn" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableUserLdapDn(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetUserLdapDn(*s)
	}
	return uluo
}

// ClearUserLdapDn clears the value of the "user_ldap_dn" field.
func (uluo *UserLoginUpdateOne) ClearUserLdapDn() *UserLoginUpdateOne {
	uluo.mutation.ClearUserLdapDn()
	return uluo
}

// SetDisabledBy sets the "disabled_by" field.
func (uluo *UserLoginUpdateOne) SetDisabledBy(s string) *UserLoginUpdateOne {
	uluo.mutation.SetDisabledBy(s)
	return uluo
}

// SetNillableDisabledBy sets the "disabled_by" field if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillableDisabledBy(s *string) *UserLoginUpdateOne {
	if s != nil {
		uluo.SetDisabledBy(*s)
	}
	return uluo
}

// ClearDisabledBy clears the value of the "disabled_by" field.
func (uluo *UserLoginUpdateOne) ClearDisabledBy() *UserLoginUpdateOne {
	uluo.mutation.ClearDisabledBy()
	return uluo
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (uluo *UserLoginUpdateOne) SetPartyID(id int) *UserLoginUpdateOne {
	uluo.mutation.SetPartyID(id)
	return uluo
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillablePartyID(id *int) *UserLoginUpdateOne {
	if id != nil {
		uluo = uluo.SetPartyID(*id)
	}
	return uluo
}

// SetParty sets the "party" edge to the Party entity.
func (uluo *UserLoginUpdateOne) SetParty(p *Party) *UserLoginUpdateOne {
	return uluo.SetPartyID(p.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (uluo *UserLoginUpdateOne) SetPersonID(id int) *UserLoginUpdateOne {
	uluo.mutation.SetPersonID(id)
	return uluo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (uluo *UserLoginUpdateOne) SetNillablePersonID(id *int) *UserLoginUpdateOne {
	if id != nil {
		uluo = uluo.SetPersonID(*id)
	}
	return uluo
}

// SetPerson sets the "person" edge to the Person entity.
func (uluo *UserLoginUpdateOne) SetPerson(p *Person) *UserLoginUpdateOne {
	return uluo.SetPersonID(p.ID)
}

// AddCreatedByPartyIDs adds the "created_by_parties" edge to the Party entity by IDs.
func (uluo *UserLoginUpdateOne) AddCreatedByPartyIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddCreatedByPartyIDs(ids...)
	return uluo
}

// AddCreatedByParties adds the "created_by_parties" edges to the Party entity.
func (uluo *UserLoginUpdateOne) AddCreatedByParties(p ...*Party) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.AddCreatedByPartyIDs(ids...)
}

// AddLastModifiedByPartyIDs adds the "last_modified_by_parties" edge to the Party entity by IDs.
func (uluo *UserLoginUpdateOne) AddLastModifiedByPartyIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddLastModifiedByPartyIDs(ids...)
	return uluo
}

// AddLastModifiedByParties adds the "last_modified_by_parties" edges to the Party entity.
func (uluo *UserLoginUpdateOne) AddLastModifiedByParties(p ...*Party) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.AddLastModifiedByPartyIDs(ids...)
}

// AddChangeByPartyStatusIDs adds the "change_by_party_statuses" edge to the PartyStatus entity by IDs.
func (uluo *UserLoginUpdateOne) AddChangeByPartyStatusIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddChangeByPartyStatusIDs(ids...)
	return uluo
}

// AddChangeByPartyStatuses adds the "change_by_party_statuses" edges to the PartyStatus entity.
func (uluo *UserLoginUpdateOne) AddChangeByPartyStatuses(p ...*PartyStatus) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.AddChangeByPartyStatusIDs(ids...)
}

// AddUserLoginSecurityGroupIDs adds the "user_login_security_groups" edge to the UserLoginSecurityGroup entity by IDs.
func (uluo *UserLoginUpdateOne) AddUserLoginSecurityGroupIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddUserLoginSecurityGroupIDs(ids...)
	return uluo
}

// AddUserLoginSecurityGroups adds the "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (uluo *UserLoginUpdateOne) AddUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *UserLoginUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uluo.AddUserLoginSecurityGroupIDs(ids...)
}

// AddUserPreferenceIDs adds the "user_preferences" edge to the UserPreference entity by IDs.
func (uluo *UserLoginUpdateOne) AddUserPreferenceIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddUserPreferenceIDs(ids...)
	return uluo
}

// AddUserPreferences adds the "user_preferences" edges to the UserPreference entity.
func (uluo *UserLoginUpdateOne) AddUserPreferences(u ...*UserPreference) *UserLoginUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uluo.AddUserPreferenceIDs(ids...)
}

// AddAssignedByWorkEffortPartyAssignmentIDs adds the "assigned_by_work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (uluo *UserLoginUpdateOne) AddAssignedByWorkEffortPartyAssignmentIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.AddAssignedByWorkEffortPartyAssignmentIDs(ids...)
	return uluo
}

// AddAssignedByWorkEffortPartyAssignments adds the "assigned_by_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (uluo *UserLoginUpdateOne) AddAssignedByWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *UserLoginUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uluo.AddAssignedByWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the UserLoginMutation object of the builder.
func (uluo *UserLoginUpdateOne) Mutation() *UserLoginMutation {
	return uluo.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (uluo *UserLoginUpdateOne) ClearParty() *UserLoginUpdateOne {
	uluo.mutation.ClearParty()
	return uluo
}

// ClearPerson clears the "person" edge to the Person entity.
func (uluo *UserLoginUpdateOne) ClearPerson() *UserLoginUpdateOne {
	uluo.mutation.ClearPerson()
	return uluo
}

// ClearCreatedByParties clears all "created_by_parties" edges to the Party entity.
func (uluo *UserLoginUpdateOne) ClearCreatedByParties() *UserLoginUpdateOne {
	uluo.mutation.ClearCreatedByParties()
	return uluo
}

// RemoveCreatedByPartyIDs removes the "created_by_parties" edge to Party entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveCreatedByPartyIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveCreatedByPartyIDs(ids...)
	return uluo
}

// RemoveCreatedByParties removes "created_by_parties" edges to Party entities.
func (uluo *UserLoginUpdateOne) RemoveCreatedByParties(p ...*Party) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.RemoveCreatedByPartyIDs(ids...)
}

// ClearLastModifiedByParties clears all "last_modified_by_parties" edges to the Party entity.
func (uluo *UserLoginUpdateOne) ClearLastModifiedByParties() *UserLoginUpdateOne {
	uluo.mutation.ClearLastModifiedByParties()
	return uluo
}

// RemoveLastModifiedByPartyIDs removes the "last_modified_by_parties" edge to Party entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveLastModifiedByPartyIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveLastModifiedByPartyIDs(ids...)
	return uluo
}

// RemoveLastModifiedByParties removes "last_modified_by_parties" edges to Party entities.
func (uluo *UserLoginUpdateOne) RemoveLastModifiedByParties(p ...*Party) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.RemoveLastModifiedByPartyIDs(ids...)
}

// ClearChangeByPartyStatuses clears all "change_by_party_statuses" edges to the PartyStatus entity.
func (uluo *UserLoginUpdateOne) ClearChangeByPartyStatuses() *UserLoginUpdateOne {
	uluo.mutation.ClearChangeByPartyStatuses()
	return uluo
}

// RemoveChangeByPartyStatusIDs removes the "change_by_party_statuses" edge to PartyStatus entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveChangeByPartyStatusIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveChangeByPartyStatusIDs(ids...)
	return uluo
}

// RemoveChangeByPartyStatuses removes "change_by_party_statuses" edges to PartyStatus entities.
func (uluo *UserLoginUpdateOne) RemoveChangeByPartyStatuses(p ...*PartyStatus) *UserLoginUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uluo.RemoveChangeByPartyStatusIDs(ids...)
}

// ClearUserLoginSecurityGroups clears all "user_login_security_groups" edges to the UserLoginSecurityGroup entity.
func (uluo *UserLoginUpdateOne) ClearUserLoginSecurityGroups() *UserLoginUpdateOne {
	uluo.mutation.ClearUserLoginSecurityGroups()
	return uluo
}

// RemoveUserLoginSecurityGroupIDs removes the "user_login_security_groups" edge to UserLoginSecurityGroup entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveUserLoginSecurityGroupIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveUserLoginSecurityGroupIDs(ids...)
	return uluo
}

// RemoveUserLoginSecurityGroups removes "user_login_security_groups" edges to UserLoginSecurityGroup entities.
func (uluo *UserLoginUpdateOne) RemoveUserLoginSecurityGroups(u ...*UserLoginSecurityGroup) *UserLoginUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uluo.RemoveUserLoginSecurityGroupIDs(ids...)
}

// ClearUserPreferences clears all "user_preferences" edges to the UserPreference entity.
func (uluo *UserLoginUpdateOne) ClearUserPreferences() *UserLoginUpdateOne {
	uluo.mutation.ClearUserPreferences()
	return uluo
}

// RemoveUserPreferenceIDs removes the "user_preferences" edge to UserPreference entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveUserPreferenceIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveUserPreferenceIDs(ids...)
	return uluo
}

// RemoveUserPreferences removes "user_preferences" edges to UserPreference entities.
func (uluo *UserLoginUpdateOne) RemoveUserPreferences(u ...*UserPreference) *UserLoginUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uluo.RemoveUserPreferenceIDs(ids...)
}

// ClearAssignedByWorkEffortPartyAssignments clears all "assigned_by_work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (uluo *UserLoginUpdateOne) ClearAssignedByWorkEffortPartyAssignments() *UserLoginUpdateOne {
	uluo.mutation.ClearAssignedByWorkEffortPartyAssignments()
	return uluo
}

// RemoveAssignedByWorkEffortPartyAssignmentIDs removes the "assigned_by_work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (uluo *UserLoginUpdateOne) RemoveAssignedByWorkEffortPartyAssignmentIDs(ids ...int) *UserLoginUpdateOne {
	uluo.mutation.RemoveAssignedByWorkEffortPartyAssignmentIDs(ids...)
	return uluo
}

// RemoveAssignedByWorkEffortPartyAssignments removes "assigned_by_work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (uluo *UserLoginUpdateOne) RemoveAssignedByWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *UserLoginUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uluo.RemoveAssignedByWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLoginUpdateOne) Select(field string, fields ...string) *UserLoginUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLogin entity.
func (uluo *UserLoginUpdateOne) Save(ctx context.Context) (*UserLogin, error) {
	var (
		err  error
		node *UserLogin
	)
	uluo.defaults()
	if len(uluo.hooks) == 0 {
		if err = uluo.check(); err != nil {
			return nil, err
		}
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uluo.check(); err != nil {
				return nil, err
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			mut = uluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLoginUpdateOne) SaveX(ctx context.Context) *UserLogin {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLoginUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLoginUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uluo *UserLoginUpdateOne) defaults() {
	if _, ok := uluo.mutation.UpdateTime(); !ok {
		v := userlogin.UpdateDefaultUpdateTime()
		uluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uluo *UserLoginUpdateOne) check() error {
	if v, ok := uluo.mutation.IsSystem(); ok {
		if err := userlogin.IsSystemValidator(v); err != nil {
			return &ValidationError{Name: "is_system", err: fmt.Errorf("ent: validator failed for field \"is_system\": %w", err)}
		}
	}
	if v, ok := uluo.mutation.Enabled(); ok {
		if err := userlogin.EnabledValidator(v); err != nil {
			return &ValidationError{Name: "enabled", err: fmt.Errorf("ent: validator failed for field \"enabled\": %w", err)}
		}
	}
	if v, ok := uluo.mutation.HasLoggedOut(); ok {
		if err := userlogin.HasLoggedOutValidator(v); err != nil {
			return &ValidationError{Name: "has_logged_out", err: fmt.Errorf("ent: validator failed for field \"has_logged_out\": %w", err)}
		}
	}
	if v, ok := uluo.mutation.RequirePasswordChange(); ok {
		if err := userlogin.RequirePasswordChangeValidator(v); err != nil {
			return &ValidationError{Name: "require_password_change", err: fmt.Errorf("ent: validator failed for field \"require_password_change\": %w", err)}
		}
	}
	if v, ok := uluo.mutation.LastLocale(); ok {
		if err := userlogin.LastLocaleValidator(v); err != nil {
			return &ValidationError{Name: "last_locale", err: fmt.Errorf("ent: validator failed for field \"last_locale\": %w", err)}
		}
	}
	if v, ok := uluo.mutation.LastTimeZone(); ok {
		if err := userlogin.LastTimeZoneValidator(v); err != nil {
			return &ValidationError{Name: "last_time_zone", err: fmt.Errorf("ent: validator failed for field \"last_time_zone\": %w", err)}
		}
	}
	return nil
}

func (uluo *UserLoginUpdateOne) sqlSave(ctx context.Context) (_node *UserLogin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlogin.Table,
			Columns: userlogin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlogin.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserLogin.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlogin.FieldID)
		for _, f := range fields {
			if !userlogin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlogin.FieldUpdateTime,
		})
	}
	if value, ok := uluo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldStringRef,
		})
	}
	if uluo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldStringRef,
		})
	}
	if value, ok := uluo.mutation.CurrentPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldCurrentPassword,
		})
	}
	if uluo.mutation.CurrentPasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldCurrentPassword,
		})
	}
	if value, ok := uluo.mutation.PasswordHint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldPasswordHint,
		})
	}
	if uluo.mutation.PasswordHintCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldPasswordHint,
		})
	}
	if value, ok := uluo.mutation.IsSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldIsSystem,
		})
	}
	if uluo.mutation.IsSystemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldIsSystem,
		})
	}
	if value, ok := uluo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldEnabled,
		})
	}
	if uluo.mutation.EnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldEnabled,
		})
	}
	if value, ok := uluo.mutation.HasLoggedOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldHasLoggedOut,
		})
	}
	if uluo.mutation.HasLoggedOutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldHasLoggedOut,
		})
	}
	if value, ok := uluo.mutation.RequirePasswordChange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userlogin.FieldRequirePasswordChange,
		})
	}
	if uluo.mutation.RequirePasswordChangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: userlogin.FieldRequirePasswordChange,
		})
	}
	if value, ok := uluo.mutation.LastCurrencyUom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if value, ok := uluo.mutation.AddedLastCurrencyUom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if uluo.mutation.LastCurrencyUomCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userlogin.FieldLastCurrencyUom,
		})
	}
	if value, ok := uluo.mutation.LastLocale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldLastLocale,
		})
	}
	if uluo.mutation.LastLocaleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldLastLocale,
		})
	}
	if value, ok := uluo.mutation.LastTimeZone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldLastTimeZone,
		})
	}
	if uluo.mutation.LastTimeZoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldLastTimeZone,
		})
	}
	if value, ok := uluo.mutation.DisabledDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlogin.FieldDisabledDateTime,
		})
	}
	if uluo.mutation.DisabledDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userlogin.FieldDisabledDateTime,
		})
	}
	if value, ok := uluo.mutation.SuccessiveFailedLogins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if value, ok := uluo.mutation.AddedSuccessiveFailedLogins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if uluo.mutation.SuccessiveFailedLoginsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userlogin.FieldSuccessiveFailedLogins,
		})
	}
	if value, ok := uluo.mutation.ExternalAuthID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldExternalAuthID,
		})
	}
	if uluo.mutation.ExternalAuthIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldExternalAuthID,
		})
	}
	if value, ok := uluo.mutation.UserLdapDn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldUserLdapDn,
		})
	}
	if uluo.mutation.UserLdapDnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldUserLdapDn,
		})
	}
	if value, ok := uluo.mutation.DisabledBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlogin.FieldDisabledBy,
		})
	}
	if uluo.mutation.DisabledByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userlogin.FieldDisabledBy,
		})
	}
	if uluo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PartyTable,
			Columns: []string{userlogin.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PartyTable,
			Columns: []string{userlogin.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PersonTable,
			Columns: []string{userlogin.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlogin.PersonTable,
			Columns: []string{userlogin.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.CreatedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedCreatedByPartiesIDs(); len(nodes) > 0 && !uluo.mutation.CreatedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.CreatedByPartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.CreatedByPartiesTable,
			Columns: []string{userlogin.CreatedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.LastModifiedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedLastModifiedByPartiesIDs(); len(nodes) > 0 && !uluo.mutation.LastModifiedByPartiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.LastModifiedByPartiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.LastModifiedByPartiesTable,
			Columns: []string{userlogin.LastModifiedByPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.ChangeByPartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedChangeByPartyStatusesIDs(); len(nodes) > 0 && !uluo.mutation.ChangeByPartyStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.ChangeByPartyStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.ChangeByPartyStatusesTable,
			Columns: []string{userlogin.ChangeByPartyStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedUserLoginSecurityGroupsIDs(); len(nodes) > 0 && !uluo.mutation.UserLoginSecurityGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.UserLoginSecurityGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserLoginSecurityGroupsTable,
			Columns: []string{userlogin.UserLoginSecurityGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userloginsecuritygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.UserPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedUserPreferencesIDs(); len(nodes) > 0 && !uluo.mutation.UserPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.UserPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.UserPreferencesTable,
			Columns: []string{userlogin.UserPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userpreference.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.AssignedByWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedAssignedByWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !uluo.mutation.AssignedByWorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.AssignedByWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlogin.AssignedByWorkEffortPartyAssignmentsTable,
			Columns: []string{userlogin.AssignedByWorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserLogin{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlogin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
