// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
)

// UserLoginSecurityGroup is the model entity for the UserLoginSecurityGroup schema.
type UserLoginSecurityGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLoginSecurityGroupQuery when eager-loading is set.
	Edges                                     UserLoginSecurityGroupEdges `json:"edges"`
	security_group_user_login_security_groups *int
	user_login_user_login_security_groups     *int
}

// UserLoginSecurityGroupEdges holds the relations/edges for other nodes in the graph.
type UserLoginSecurityGroupEdges struct {
	// UserLogin holds the value of the user_login edge.
	UserLogin *UserLogin `json:"user_login,omitempty"`
	// SecurityGroup holds the value of the security_group edge.
	SecurityGroup *SecurityGroup `json:"security_group,omitempty"`
	// SecurityGroupPermissions holds the value of the security_group_permissions edge.
	SecurityGroupPermissions []*SecurityGroupPermission `json:"security_group_permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserLoginOrErr returns the UserLogin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginSecurityGroupEdges) UserLoginOrErr() (*UserLogin, error) {
	if e.loadedTypes[0] {
		if e.UserLogin == nil {
			// The edge user_login was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userlogin.Label}
		}
		return e.UserLogin, nil
	}
	return nil, &NotLoadedError{edge: "user_login"}
}

// SecurityGroupOrErr returns the SecurityGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginSecurityGroupEdges) SecurityGroupOrErr() (*SecurityGroup, error) {
	if e.loadedTypes[1] {
		if e.SecurityGroup == nil {
			// The edge security_group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: securitygroup.Label}
		}
		return e.SecurityGroup, nil
	}
	return nil, &NotLoadedError{edge: "security_group"}
}

// SecurityGroupPermissionsOrErr returns the SecurityGroupPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserLoginSecurityGroupEdges) SecurityGroupPermissionsOrErr() ([]*SecurityGroupPermission, error) {
	if e.loadedTypes[2] {
		return e.SecurityGroupPermissions, nil
	}
	return nil, &NotLoadedError{edge: "security_group_permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLoginSecurityGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userloginsecuritygroup.FieldID:
			values[i] = new(sql.NullInt64)
		case userloginsecuritygroup.FieldFromDate, userloginsecuritygroup.FieldThruDate:
			values[i] = new(sql.NullTime)
		case userloginsecuritygroup.ForeignKeys[0]: // security_group_user_login_security_groups
			values[i] = new(sql.NullInt64)
		case userloginsecuritygroup.ForeignKeys[1]: // user_login_user_login_security_groups
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserLoginSecurityGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLoginSecurityGroup fields.
func (ulsg *UserLoginSecurityGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userloginsecuritygroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ulsg.ID = int(value.Int64)
		case userloginsecuritygroup.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				ulsg.FromDate = value.Time
			}
		case userloginsecuritygroup.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				ulsg.ThruDate = value.Time
			}
		case userloginsecuritygroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field security_group_user_login_security_groups", value)
			} else if value.Valid {
				ulsg.security_group_user_login_security_groups = new(int)
				*ulsg.security_group_user_login_security_groups = int(value.Int64)
			}
		case userloginsecuritygroup.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_user_login_security_groups", value)
			} else if value.Valid {
				ulsg.user_login_user_login_security_groups = new(int)
				*ulsg.user_login_user_login_security_groups = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUserLogin queries the "user_login" edge of the UserLoginSecurityGroup entity.
func (ulsg *UserLoginSecurityGroup) QueryUserLogin() *UserLoginQuery {
	return (&UserLoginSecurityGroupClient{config: ulsg.config}).QueryUserLogin(ulsg)
}

// QuerySecurityGroup queries the "security_group" edge of the UserLoginSecurityGroup entity.
func (ulsg *UserLoginSecurityGroup) QuerySecurityGroup() *SecurityGroupQuery {
	return (&UserLoginSecurityGroupClient{config: ulsg.config}).QuerySecurityGroup(ulsg)
}

// QuerySecurityGroupPermissions queries the "security_group_permissions" edge of the UserLoginSecurityGroup entity.
func (ulsg *UserLoginSecurityGroup) QuerySecurityGroupPermissions() *SecurityGroupPermissionQuery {
	return (&UserLoginSecurityGroupClient{config: ulsg.config}).QuerySecurityGroupPermissions(ulsg)
}

// Update returns a builder for updating this UserLoginSecurityGroup.
// Note that you need to call UserLoginSecurityGroup.Unwrap() before calling this method if this UserLoginSecurityGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ulsg *UserLoginSecurityGroup) Update() *UserLoginSecurityGroupUpdateOne {
	return (&UserLoginSecurityGroupClient{config: ulsg.config}).UpdateOne(ulsg)
}

// Unwrap unwraps the UserLoginSecurityGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ulsg *UserLoginSecurityGroup) Unwrap() *UserLoginSecurityGroup {
	tx, ok := ulsg.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLoginSecurityGroup is not a transactional entity")
	}
	ulsg.config.driver = tx.drv
	return ulsg
}

// String implements the fmt.Stringer.
func (ulsg *UserLoginSecurityGroup) String() string {
	var builder strings.Builder
	builder.WriteString("UserLoginSecurityGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", ulsg.ID))
	builder.WriteString(", from_date=")
	builder.WriteString(ulsg.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(ulsg.ThruDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserLoginSecurityGroups is a parsable slice of UserLoginSecurityGroup.
type UserLoginSecurityGroups []*UserLoginSecurityGroup

func (ulsg UserLoginSecurityGroups) config(cfg config) {
	for _i := range ulsg {
		ulsg[_i].config = cfg
	}
}
