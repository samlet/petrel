// Code generated by entc, DO NOT EDIT.

package userloginsecuritygroup

import (
	"time"
)

const (
	// Label holds the string label denoting the userloginsecuritygroup type in the database.
	Label = "user_login_security_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldThruDate holds the string denoting the thru_date field in the database.
	FieldThruDate = "thru_date"
	// EdgeUserLogin holds the string denoting the user_login edge name in mutations.
	EdgeUserLogin = "user_login"
	// EdgeSecurityGroup holds the string denoting the security_group edge name in mutations.
	EdgeSecurityGroup = "security_group"
	// EdgeSecurityGroupPermissions holds the string denoting the security_group_permissions edge name in mutations.
	EdgeSecurityGroupPermissions = "security_group_permissions"
	// Table holds the table name of the userloginsecuritygroup in the database.
	Table = "user_login_security_groups"
	// UserLoginTable is the table the holds the user_login relation/edge.
	UserLoginTable = "user_login_security_groups"
	// UserLoginInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	UserLoginInverseTable = "user_logins"
	// UserLoginColumn is the table column denoting the user_login relation/edge.
	UserLoginColumn = "user_login_user_login_security_groups"
	// SecurityGroupTable is the table the holds the security_group relation/edge.
	SecurityGroupTable = "user_login_security_groups"
	// SecurityGroupInverseTable is the table name for the SecurityGroup entity.
	// It exists in this package in order to avoid circular dependency with the "securitygroup" package.
	SecurityGroupInverseTable = "security_groups"
	// SecurityGroupColumn is the table column denoting the security_group relation/edge.
	SecurityGroupColumn = "security_group_user_login_security_groups"
	// SecurityGroupPermissionsTable is the table the holds the security_group_permissions relation/edge.
	SecurityGroupPermissionsTable = "security_group_permissions"
	// SecurityGroupPermissionsInverseTable is the table name for the SecurityGroupPermission entity.
	// It exists in this package in order to avoid circular dependency with the "securitygrouppermission" package.
	SecurityGroupPermissionsInverseTable = "security_group_permissions"
	// SecurityGroupPermissionsColumn is the table column denoting the security_group_permissions relation/edge.
	SecurityGroupPermissionsColumn = "user_login_security_group_security_group_permissions"
)

// Columns holds all SQL columns for userloginsecuritygroup fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldFromDate,
	FieldThruDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_login_security_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"security_group_user_login_security_groups",
	"user_login_user_login_security_groups",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultFromDate holds the default value on creation for the "from_date" field.
	DefaultFromDate func() time.Time
	// DefaultThruDate holds the default value on creation for the "thru_date" field.
	DefaultThruDate func() time.Time
)
