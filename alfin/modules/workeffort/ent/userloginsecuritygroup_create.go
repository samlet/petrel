// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
)

// UserLoginSecurityGroupCreate is the builder for creating a UserLoginSecurityGroup entity.
type UserLoginSecurityGroupCreate struct {
	config
	mutation *UserLoginSecurityGroupMutation
	hooks    []Hook
}

// SetFromDate sets the "from_date" field.
func (ulsgc *UserLoginSecurityGroupCreate) SetFromDate(t time.Time) *UserLoginSecurityGroupCreate {
	ulsgc.mutation.SetFromDate(t)
	return ulsgc
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ulsgc *UserLoginSecurityGroupCreate) SetNillableFromDate(t *time.Time) *UserLoginSecurityGroupCreate {
	if t != nil {
		ulsgc.SetFromDate(*t)
	}
	return ulsgc
}

// SetThruDate sets the "thru_date" field.
func (ulsgc *UserLoginSecurityGroupCreate) SetThruDate(t time.Time) *UserLoginSecurityGroupCreate {
	ulsgc.mutation.SetThruDate(t)
	return ulsgc
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ulsgc *UserLoginSecurityGroupCreate) SetNillableThruDate(t *time.Time) *UserLoginSecurityGroupCreate {
	if t != nil {
		ulsgc.SetThruDate(*t)
	}
	return ulsgc
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (ulsgc *UserLoginSecurityGroupCreate) SetUserLoginID(id int) *UserLoginSecurityGroupCreate {
	ulsgc.mutation.SetUserLoginID(id)
	return ulsgc
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (ulsgc *UserLoginSecurityGroupCreate) SetNillableUserLoginID(id *int) *UserLoginSecurityGroupCreate {
	if id != nil {
		ulsgc = ulsgc.SetUserLoginID(*id)
	}
	return ulsgc
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (ulsgc *UserLoginSecurityGroupCreate) SetUserLogin(u *UserLogin) *UserLoginSecurityGroupCreate {
	return ulsgc.SetUserLoginID(u.ID)
}

// SetSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID.
func (ulsgc *UserLoginSecurityGroupCreate) SetSecurityGroupID(id int) *UserLoginSecurityGroupCreate {
	ulsgc.mutation.SetSecurityGroupID(id)
	return ulsgc
}

// SetNillableSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID if the given value is not nil.
func (ulsgc *UserLoginSecurityGroupCreate) SetNillableSecurityGroupID(id *int) *UserLoginSecurityGroupCreate {
	if id != nil {
		ulsgc = ulsgc.SetSecurityGroupID(*id)
	}
	return ulsgc
}

// SetSecurityGroup sets the "security_group" edge to the SecurityGroup entity.
func (ulsgc *UserLoginSecurityGroupCreate) SetSecurityGroup(s *SecurityGroup) *UserLoginSecurityGroupCreate {
	return ulsgc.SetSecurityGroupID(s.ID)
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (ulsgc *UserLoginSecurityGroupCreate) AddSecurityGroupPermissionIDs(ids ...int) *UserLoginSecurityGroupCreate {
	ulsgc.mutation.AddSecurityGroupPermissionIDs(ids...)
	return ulsgc
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (ulsgc *UserLoginSecurityGroupCreate) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *UserLoginSecurityGroupCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ulsgc.AddSecurityGroupPermissionIDs(ids...)
}

// Mutation returns the UserLoginSecurityGroupMutation object of the builder.
func (ulsgc *UserLoginSecurityGroupCreate) Mutation() *UserLoginSecurityGroupMutation {
	return ulsgc.mutation
}

// Save creates the UserLoginSecurityGroup in the database.
func (ulsgc *UserLoginSecurityGroupCreate) Save(ctx context.Context) (*UserLoginSecurityGroup, error) {
	var (
		err  error
		node *UserLoginSecurityGroup
	)
	ulsgc.defaults()
	if len(ulsgc.hooks) == 0 {
		if err = ulsgc.check(); err != nil {
			return nil, err
		}
		node, err = ulsgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginSecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ulsgc.check(); err != nil {
				return nil, err
			}
			ulsgc.mutation = mutation
			node, err = ulsgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ulsgc.hooks) - 1; i >= 0; i-- {
			mut = ulsgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulsgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ulsgc *UserLoginSecurityGroupCreate) SaveX(ctx context.Context) *UserLoginSecurityGroup {
	v, err := ulsgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ulsgc *UserLoginSecurityGroupCreate) defaults() {
	if _, ok := ulsgc.mutation.FromDate(); !ok {
		v := userloginsecuritygroup.DefaultFromDate()
		ulsgc.mutation.SetFromDate(v)
	}
	if _, ok := ulsgc.mutation.ThruDate(); !ok {
		v := userloginsecuritygroup.DefaultThruDate()
		ulsgc.mutation.SetThruDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulsgc *UserLoginSecurityGroupCreate) check() error {
	if _, ok := ulsgc.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New("ent: missing required field \"from_date\"")}
	}
	return nil
}

func (ulsgc *UserLoginSecurityGroupCreate) sqlSave(ctx context.Context) (*UserLoginSecurityGroup, error) {
	_node, _spec := ulsgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ulsgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ulsgc *UserLoginSecurityGroupCreate) createSpec() (*UserLoginSecurityGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &UserLoginSecurityGroup{config: ulsgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userloginsecuritygroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userloginsecuritygroup.FieldID,
			},
		}
	)
	if value, ok := ulsgc.mutation.FromDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldFromDate,
		})
		_node.FromDate = value
	}
	if value, ok := ulsgc.mutation.ThruDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldThruDate,
		})
		_node.ThruDate = value
	}
	if nodes := ulsgc.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.UserLoginTable,
			Columns: []string{userloginsecuritygroup.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_user_login_security_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulsgc.mutation.SecurityGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.SecurityGroupTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.security_group_user_login_security_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulsgc.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserLoginSecurityGroupCreateBulk is the builder for creating many UserLoginSecurityGroup entities in bulk.
type UserLoginSecurityGroupCreateBulk struct {
	config
	builders []*UserLoginSecurityGroupCreate
}

// Save creates the UserLoginSecurityGroup entities in the database.
func (ulsgcb *UserLoginSecurityGroupCreateBulk) Save(ctx context.Context) ([]*UserLoginSecurityGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ulsgcb.builders))
	nodes := make([]*UserLoginSecurityGroup, len(ulsgcb.builders))
	mutators := make([]Mutator, len(ulsgcb.builders))
	for i := range ulsgcb.builders {
		func(i int, root context.Context) {
			builder := ulsgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserLoginSecurityGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ulsgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ulsgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ulsgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ulsgcb *UserLoginSecurityGroupCreateBulk) SaveX(ctx context.Context) []*UserLoginSecurityGroup {
	v, err := ulsgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
