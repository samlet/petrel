// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygroup"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/securitygrouppermission"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userloginsecuritygroup"
)

// UserLoginSecurityGroupUpdate is the builder for updating UserLoginSecurityGroup entities.
type UserLoginSecurityGroupUpdate struct {
	config
	hooks    []Hook
	mutation *UserLoginSecurityGroupMutation
}

// Where adds a new predicate for the UserLoginSecurityGroupUpdate builder.
func (ulsgu *UserLoginSecurityGroupUpdate) Where(ps ...predicate.UserLoginSecurityGroup) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.predicates = append(ulsgu.mutation.predicates, ps...)
	return ulsgu
}

// SetStringRef sets the "string_ref" field.
func (ulsgu *UserLoginSecurityGroupUpdate) SetStringRef(s string) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.SetStringRef(s)
	return ulsgu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ulsgu *UserLoginSecurityGroupUpdate) SetNillableStringRef(s *string) *UserLoginSecurityGroupUpdate {
	if s != nil {
		ulsgu.SetStringRef(*s)
	}
	return ulsgu
}

// ClearStringRef clears the value of the "string_ref" field.
func (ulsgu *UserLoginSecurityGroupUpdate) ClearStringRef() *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.ClearStringRef()
	return ulsgu
}

// SetFromDate sets the "from_date" field.
func (ulsgu *UserLoginSecurityGroupUpdate) SetFromDate(t time.Time) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.SetFromDate(t)
	return ulsgu
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ulsgu *UserLoginSecurityGroupUpdate) SetNillableFromDate(t *time.Time) *UserLoginSecurityGroupUpdate {
	if t != nil {
		ulsgu.SetFromDate(*t)
	}
	return ulsgu
}

// SetThruDate sets the "thru_date" field.
func (ulsgu *UserLoginSecurityGroupUpdate) SetThruDate(t time.Time) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.SetThruDate(t)
	return ulsgu
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ulsgu *UserLoginSecurityGroupUpdate) SetNillableThruDate(t *time.Time) *UserLoginSecurityGroupUpdate {
	if t != nil {
		ulsgu.SetThruDate(*t)
	}
	return ulsgu
}

// ClearThruDate clears the value of the "thru_date" field.
func (ulsgu *UserLoginSecurityGroupUpdate) ClearThruDate() *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.ClearThruDate()
	return ulsgu
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (ulsgu *UserLoginSecurityGroupUpdate) SetUserLoginID(id int) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.SetUserLoginID(id)
	return ulsgu
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (ulsgu *UserLoginSecurityGroupUpdate) SetNillableUserLoginID(id *int) *UserLoginSecurityGroupUpdate {
	if id != nil {
		ulsgu = ulsgu.SetUserLoginID(*id)
	}
	return ulsgu
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (ulsgu *UserLoginSecurityGroupUpdate) SetUserLogin(u *UserLogin) *UserLoginSecurityGroupUpdate {
	return ulsgu.SetUserLoginID(u.ID)
}

// SetSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID.
func (ulsgu *UserLoginSecurityGroupUpdate) SetSecurityGroupID(id int) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.SetSecurityGroupID(id)
	return ulsgu
}

// SetNillableSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID if the given value is not nil.
func (ulsgu *UserLoginSecurityGroupUpdate) SetNillableSecurityGroupID(id *int) *UserLoginSecurityGroupUpdate {
	if id != nil {
		ulsgu = ulsgu.SetSecurityGroupID(*id)
	}
	return ulsgu
}

// SetSecurityGroup sets the "security_group" edge to the SecurityGroup entity.
func (ulsgu *UserLoginSecurityGroupUpdate) SetSecurityGroup(s *SecurityGroup) *UserLoginSecurityGroupUpdate {
	return ulsgu.SetSecurityGroupID(s.ID)
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (ulsgu *UserLoginSecurityGroupUpdate) AddSecurityGroupPermissionIDs(ids ...int) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.AddSecurityGroupPermissionIDs(ids...)
	return ulsgu
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (ulsgu *UserLoginSecurityGroupUpdate) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *UserLoginSecurityGroupUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ulsgu.AddSecurityGroupPermissionIDs(ids...)
}

// Mutation returns the UserLoginSecurityGroupMutation object of the builder.
func (ulsgu *UserLoginSecurityGroupUpdate) Mutation() *UserLoginSecurityGroupMutation {
	return ulsgu.mutation
}

// ClearUserLogin clears the "user_login" edge to the UserLogin entity.
func (ulsgu *UserLoginSecurityGroupUpdate) ClearUserLogin() *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.ClearUserLogin()
	return ulsgu
}

// ClearSecurityGroup clears the "security_group" edge to the SecurityGroup entity.
func (ulsgu *UserLoginSecurityGroupUpdate) ClearSecurityGroup() *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.ClearSecurityGroup()
	return ulsgu
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (ulsgu *UserLoginSecurityGroupUpdate) ClearSecurityGroupPermissions() *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.ClearSecurityGroupPermissions()
	return ulsgu
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (ulsgu *UserLoginSecurityGroupUpdate) RemoveSecurityGroupPermissionIDs(ids ...int) *UserLoginSecurityGroupUpdate {
	ulsgu.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return ulsgu
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (ulsgu *UserLoginSecurityGroupUpdate) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *UserLoginSecurityGroupUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ulsgu.RemoveSecurityGroupPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulsgu *UserLoginSecurityGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ulsgu.defaults()
	if len(ulsgu.hooks) == 0 {
		affected, err = ulsgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginSecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulsgu.mutation = mutation
			affected, err = ulsgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulsgu.hooks) - 1; i >= 0; i-- {
			mut = ulsgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulsgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulsgu *UserLoginSecurityGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := ulsgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulsgu *UserLoginSecurityGroupUpdate) Exec(ctx context.Context) error {
	_, err := ulsgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulsgu *UserLoginSecurityGroupUpdate) ExecX(ctx context.Context) {
	if err := ulsgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulsgu *UserLoginSecurityGroupUpdate) defaults() {
	if _, ok := ulsgu.mutation.UpdateTime(); !ok {
		v := userloginsecuritygroup.UpdateDefaultUpdateTime()
		ulsgu.mutation.SetUpdateTime(v)
	}
}

func (ulsgu *UserLoginSecurityGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userloginsecuritygroup.Table,
			Columns: userloginsecuritygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userloginsecuritygroup.FieldID,
			},
		},
	}
	if ps := ulsgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulsgu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldUpdateTime,
		})
	}
	if value, ok := ulsgu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginsecuritygroup.FieldStringRef,
		})
	}
	if ulsgu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userloginsecuritygroup.FieldStringRef,
		})
	}
	if value, ok := ulsgu.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldFromDate,
		})
	}
	if value, ok := ulsgu.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldThruDate,
		})
	}
	if ulsgu.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userloginsecuritygroup.FieldThruDate,
		})
	}
	if ulsgu.mutation.UserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.UserLoginTable,
			Columns: []string{userloginsecuritygroup.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsgu.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.UserLoginTable,
			Columns: []string{userloginsecuritygroup.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulsgu.mutation.SecurityGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.SecurityGroupTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsgu.mutation.SecurityGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.SecurityGroupTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulsgu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsgu.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !ulsgu.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsgu.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulsgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userloginsecuritygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserLoginSecurityGroupUpdateOne is the builder for updating a single UserLoginSecurityGroup entity.
type UserLoginSecurityGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLoginSecurityGroupMutation
}

// SetStringRef sets the "string_ref" field.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetStringRef(s string) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.SetStringRef(s)
	return ulsguo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetNillableStringRef(s *string) *UserLoginSecurityGroupUpdateOne {
	if s != nil {
		ulsguo.SetStringRef(*s)
	}
	return ulsguo
}

// ClearStringRef clears the value of the "string_ref" field.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ClearStringRef() *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.ClearStringRef()
	return ulsguo
}

// SetFromDate sets the "from_date" field.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetFromDate(t time.Time) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.SetFromDate(t)
	return ulsguo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetNillableFromDate(t *time.Time) *UserLoginSecurityGroupUpdateOne {
	if t != nil {
		ulsguo.SetFromDate(*t)
	}
	return ulsguo
}

// SetThruDate sets the "thru_date" field.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetThruDate(t time.Time) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.SetThruDate(t)
	return ulsguo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetNillableThruDate(t *time.Time) *UserLoginSecurityGroupUpdateOne {
	if t != nil {
		ulsguo.SetThruDate(*t)
	}
	return ulsguo
}

// ClearThruDate clears the value of the "thru_date" field.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ClearThruDate() *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.ClearThruDate()
	return ulsguo
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetUserLoginID(id int) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.SetUserLoginID(id)
	return ulsguo
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetNillableUserLoginID(id *int) *UserLoginSecurityGroupUpdateOne {
	if id != nil {
		ulsguo = ulsguo.SetUserLoginID(*id)
	}
	return ulsguo
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetUserLogin(u *UserLogin) *UserLoginSecurityGroupUpdateOne {
	return ulsguo.SetUserLoginID(u.ID)
}

// SetSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetSecurityGroupID(id int) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.SetSecurityGroupID(id)
	return ulsguo
}

// SetNillableSecurityGroupID sets the "security_group" edge to the SecurityGroup entity by ID if the given value is not nil.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetNillableSecurityGroupID(id *int) *UserLoginSecurityGroupUpdateOne {
	if id != nil {
		ulsguo = ulsguo.SetSecurityGroupID(*id)
	}
	return ulsguo
}

// SetSecurityGroup sets the "security_group" edge to the SecurityGroup entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SetSecurityGroup(s *SecurityGroup) *UserLoginSecurityGroupUpdateOne {
	return ulsguo.SetSecurityGroupID(s.ID)
}

// AddSecurityGroupPermissionIDs adds the "security_group_permissions" edge to the SecurityGroupPermission entity by IDs.
func (ulsguo *UserLoginSecurityGroupUpdateOne) AddSecurityGroupPermissionIDs(ids ...int) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.AddSecurityGroupPermissionIDs(ids...)
	return ulsguo
}

// AddSecurityGroupPermissions adds the "security_group_permissions" edges to the SecurityGroupPermission entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) AddSecurityGroupPermissions(s ...*SecurityGroupPermission) *UserLoginSecurityGroupUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ulsguo.AddSecurityGroupPermissionIDs(ids...)
}

// Mutation returns the UserLoginSecurityGroupMutation object of the builder.
func (ulsguo *UserLoginSecurityGroupUpdateOne) Mutation() *UserLoginSecurityGroupMutation {
	return ulsguo.mutation
}

// ClearUserLogin clears the "user_login" edge to the UserLogin entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ClearUserLogin() *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.ClearUserLogin()
	return ulsguo
}

// ClearSecurityGroup clears the "security_group" edge to the SecurityGroup entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ClearSecurityGroup() *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.ClearSecurityGroup()
	return ulsguo
}

// ClearSecurityGroupPermissions clears all "security_group_permissions" edges to the SecurityGroupPermission entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ClearSecurityGroupPermissions() *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.ClearSecurityGroupPermissions()
	return ulsguo
}

// RemoveSecurityGroupPermissionIDs removes the "security_group_permissions" edge to SecurityGroupPermission entities by IDs.
func (ulsguo *UserLoginSecurityGroupUpdateOne) RemoveSecurityGroupPermissionIDs(ids ...int) *UserLoginSecurityGroupUpdateOne {
	ulsguo.mutation.RemoveSecurityGroupPermissionIDs(ids...)
	return ulsguo
}

// RemoveSecurityGroupPermissions removes "security_group_permissions" edges to SecurityGroupPermission entities.
func (ulsguo *UserLoginSecurityGroupUpdateOne) RemoveSecurityGroupPermissions(s ...*SecurityGroupPermission) *UserLoginSecurityGroupUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ulsguo.RemoveSecurityGroupPermissionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ulsguo *UserLoginSecurityGroupUpdateOne) Select(field string, fields ...string) *UserLoginSecurityGroupUpdateOne {
	ulsguo.fields = append([]string{field}, fields...)
	return ulsguo
}

// Save executes the query and returns the updated UserLoginSecurityGroup entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) Save(ctx context.Context) (*UserLoginSecurityGroup, error) {
	var (
		err  error
		node *UserLoginSecurityGroup
	)
	ulsguo.defaults()
	if len(ulsguo.hooks) == 0 {
		node, err = ulsguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLoginSecurityGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulsguo.mutation = mutation
			node, err = ulsguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ulsguo.hooks) - 1; i >= 0; i-- {
			mut = ulsguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulsguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulsguo *UserLoginSecurityGroupUpdateOne) SaveX(ctx context.Context) *UserLoginSecurityGroup {
	node, err := ulsguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ulsguo *UserLoginSecurityGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := ulsguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulsguo *UserLoginSecurityGroupUpdateOne) ExecX(ctx context.Context) {
	if err := ulsguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulsguo *UserLoginSecurityGroupUpdateOne) defaults() {
	if _, ok := ulsguo.mutation.UpdateTime(); !ok {
		v := userloginsecuritygroup.UpdateDefaultUpdateTime()
		ulsguo.mutation.SetUpdateTime(v)
	}
}

func (ulsguo *UserLoginSecurityGroupUpdateOne) sqlSave(ctx context.Context) (_node *UserLoginSecurityGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userloginsecuritygroup.Table,
			Columns: userloginsecuritygroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userloginsecuritygroup.FieldID,
			},
		},
	}
	id, ok := ulsguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserLoginSecurityGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ulsguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userloginsecuritygroup.FieldID)
		for _, f := range fields {
			if !userloginsecuritygroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userloginsecuritygroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ulsguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulsguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldUpdateTime,
		})
	}
	if value, ok := ulsguo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userloginsecuritygroup.FieldStringRef,
		})
	}
	if ulsguo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userloginsecuritygroup.FieldStringRef,
		})
	}
	if value, ok := ulsguo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldFromDate,
		})
	}
	if value, ok := ulsguo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userloginsecuritygroup.FieldThruDate,
		})
	}
	if ulsguo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userloginsecuritygroup.FieldThruDate,
		})
	}
	if ulsguo.mutation.UserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.UserLoginTable,
			Columns: []string{userloginsecuritygroup.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsguo.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.UserLoginTable,
			Columns: []string{userloginsecuritygroup.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulsguo.mutation.SecurityGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.SecurityGroupTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsguo.mutation.SecurityGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userloginsecuritygroup.SecurityGroupTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulsguo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsguo.mutation.RemovedSecurityGroupPermissionsIDs(); len(nodes) > 0 && !ulsguo.mutation.SecurityGroupPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulsguo.mutation.SecurityGroupPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userloginsecuritygroup.SecurityGroupPermissionsTable,
			Columns: []string{userloginsecuritygroup.SecurityGroupPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: securitygrouppermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserLoginSecurityGroup{config: ulsguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ulsguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userloginsecuritygroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
