// Code generated by entc, DO NOT EDIT.

package userpreference

import (
	"time"
)

const (
	// Label holds the string label denoting the userpreference type in the database.
	Label = "user_preference"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStringRef holds the string denoting the string_ref field in the database.
	FieldStringRef = "string_ref"
	// FieldUserPrefTypeID holds the string denoting the user_pref_type_id field in the database.
	FieldUserPrefTypeID = "user_pref_type_id"
	// FieldUserPrefGroupTypeID holds the string denoting the user_pref_group_type_id field in the database.
	FieldUserPrefGroupTypeID = "user_pref_group_type_id"
	// FieldUserPrefValue holds the string denoting the user_pref_value field in the database.
	FieldUserPrefValue = "user_pref_value"
	// FieldUserPrefDataType holds the string denoting the user_pref_data_type field in the database.
	FieldUserPrefDataType = "user_pref_data_type"
	// EdgeUserLogin holds the string denoting the user_login edge name in mutations.
	EdgeUserLogin = "user_login"
	// Table holds the table name of the userpreference in the database.
	Table = "user_preferences"
	// UserLoginTable is the table the holds the user_login relation/edge.
	UserLoginTable = "user_preferences"
	// UserLoginInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	UserLoginInverseTable = "user_logins"
	// UserLoginColumn is the table column denoting the user_login relation/edge.
	UserLoginColumn = "user_login_user_preferences"
)

// Columns holds all SQL columns for userpreference fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStringRef,
	FieldUserPrefTypeID,
	FieldUserPrefGroupTypeID,
	FieldUserPrefValue,
	FieldUserPrefDataType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_preferences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_login_user_preferences",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UserPrefTypeIDValidator is a validator for the "user_pref_type_id" field. It is called by the builders before save.
	UserPrefTypeIDValidator func(string) error
	// UserPrefGroupTypeIDValidator is a validator for the "user_pref_group_type_id" field. It is called by the builders before save.
	UserPrefGroupTypeIDValidator func(string) error
	// UserPrefDataTypeValidator is a validator for the "user_pref_data_type" field. It is called by the builders before save.
	UserPrefDataTypeValidator func(string) error
)
