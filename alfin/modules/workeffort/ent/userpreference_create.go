// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userpreference"
)

// UserPreferenceCreate is the builder for creating a UserPreference entity.
type UserPreferenceCreate struct {
	config
	mutation *UserPreferenceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (upc *UserPreferenceCreate) SetCreateTime(t time.Time) *UserPreferenceCreate {
	upc.mutation.SetCreateTime(t)
	return upc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableCreateTime(t *time.Time) *UserPreferenceCreate {
	if t != nil {
		upc.SetCreateTime(*t)
	}
	return upc
}

// SetUpdateTime sets the "update_time" field.
func (upc *UserPreferenceCreate) SetUpdateTime(t time.Time) *UserPreferenceCreate {
	upc.mutation.SetUpdateTime(t)
	return upc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableUpdateTime(t *time.Time) *UserPreferenceCreate {
	if t != nil {
		upc.SetUpdateTime(*t)
	}
	return upc
}

// SetStringRef sets the "string_ref" field.
func (upc *UserPreferenceCreate) SetStringRef(s string) *UserPreferenceCreate {
	upc.mutation.SetStringRef(s)
	return upc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableStringRef(s *string) *UserPreferenceCreate {
	if s != nil {
		upc.SetStringRef(*s)
	}
	return upc
}

// SetUserPrefTypeID sets the "user_pref_type_id" field.
func (upc *UserPreferenceCreate) SetUserPrefTypeID(s string) *UserPreferenceCreate {
	upc.mutation.SetUserPrefTypeID(s)
	return upc
}

// SetUserPrefGroupTypeID sets the "user_pref_group_type_id" field.
func (upc *UserPreferenceCreate) SetUserPrefGroupTypeID(s string) *UserPreferenceCreate {
	upc.mutation.SetUserPrefGroupTypeID(s)
	return upc
}

// SetNillableUserPrefGroupTypeID sets the "user_pref_group_type_id" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableUserPrefGroupTypeID(s *string) *UserPreferenceCreate {
	if s != nil {
		upc.SetUserPrefGroupTypeID(*s)
	}
	return upc
}

// SetUserPrefValue sets the "user_pref_value" field.
func (upc *UserPreferenceCreate) SetUserPrefValue(s string) *UserPreferenceCreate {
	upc.mutation.SetUserPrefValue(s)
	return upc
}

// SetNillableUserPrefValue sets the "user_pref_value" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableUserPrefValue(s *string) *UserPreferenceCreate {
	if s != nil {
		upc.SetUserPrefValue(*s)
	}
	return upc
}

// SetUserPrefDataType sets the "user_pref_data_type" field.
func (upc *UserPreferenceCreate) SetUserPrefDataType(s string) *UserPreferenceCreate {
	upc.mutation.SetUserPrefDataType(s)
	return upc
}

// SetNillableUserPrefDataType sets the "user_pref_data_type" field if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableUserPrefDataType(s *string) *UserPreferenceCreate {
	if s != nil {
		upc.SetUserPrefDataType(*s)
	}
	return upc
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (upc *UserPreferenceCreate) SetUserLoginID(id int) *UserPreferenceCreate {
	upc.mutation.SetUserLoginID(id)
	return upc
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (upc *UserPreferenceCreate) SetNillableUserLoginID(id *int) *UserPreferenceCreate {
	if id != nil {
		upc = upc.SetUserLoginID(*id)
	}
	return upc
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (upc *UserPreferenceCreate) SetUserLogin(u *UserLogin) *UserPreferenceCreate {
	return upc.SetUserLoginID(u.ID)
}

// Mutation returns the UserPreferenceMutation object of the builder.
func (upc *UserPreferenceCreate) Mutation() *UserPreferenceMutation {
	return upc.mutation
}

// Save creates the UserPreference in the database.
func (upc *UserPreferenceCreate) Save(ctx context.Context) (*UserPreference, error) {
	var (
		err  error
		node *UserPreference
	)
	upc.defaults()
	if len(upc.hooks) == 0 {
		if err = upc.check(); err != nil {
			return nil, err
		}
		node, err = upc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upc.check(); err != nil {
				return nil, err
			}
			upc.mutation = mutation
			if node, err = upc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(upc.hooks) - 1; i >= 0; i-- {
			mut = upc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPreferenceCreate) SaveX(ctx context.Context) *UserPreference {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (upc *UserPreferenceCreate) defaults() {
	if _, ok := upc.mutation.CreateTime(); !ok {
		v := userpreference.DefaultCreateTime()
		upc.mutation.SetCreateTime(v)
	}
	if _, ok := upc.mutation.UpdateTime(); !ok {
		v := userpreference.DefaultUpdateTime()
		upc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPreferenceCreate) check() error {
	if _, ok := upc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := upc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := upc.mutation.UserPrefTypeID(); !ok {
		return &ValidationError{Name: "user_pref_type_id", err: errors.New("ent: missing required field \"user_pref_type_id\"")}
	}
	if v, ok := upc.mutation.UserPrefTypeID(); ok {
		if err := userpreference.UserPrefTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_type_id\": %w", err)}
		}
	}
	if v, ok := upc.mutation.UserPrefGroupTypeID(); ok {
		if err := userpreference.UserPrefGroupTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_group_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_group_type_id\": %w", err)}
		}
	}
	if v, ok := upc.mutation.UserPrefDataType(); ok {
		if err := userpreference.UserPrefDataTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_data_type", err: fmt.Errorf("ent: validator failed for field \"user_pref_data_type\": %w", err)}
		}
	}
	return nil
}

func (upc *UserPreferenceCreate) sqlSave(ctx context.Context) (*UserPreference, error) {
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (upc *UserPreferenceCreate) createSpec() (*UserPreference, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPreference{config: upc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userpreference.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpreference.FieldID,
			},
		}
	)
	if value, ok := upc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpreference.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := upc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpreference.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := upc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := upc.mutation.UserPrefTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefTypeID,
		})
		_node.UserPrefTypeID = value
	}
	if value, ok := upc.mutation.UserPrefGroupTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefGroupTypeID,
		})
		_node.UserPrefGroupTypeID = value
	}
	if value, ok := upc.mutation.UserPrefValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefValue,
		})
		_node.UserPrefValue = value
	}
	if value, ok := upc.mutation.UserPrefDataType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefDataType,
		})
		_node.UserPrefDataType = value
	}
	if nodes := upc.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpreference.UserLoginTable,
			Columns: []string{userpreference.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_user_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPreferenceCreateBulk is the builder for creating many UserPreference entities in bulk.
type UserPreferenceCreateBulk struct {
	config
	builders []*UserPreferenceCreate
}

// Save creates the UserPreference entities in the database.
func (upcb *UserPreferenceCreateBulk) Save(ctx context.Context) ([]*UserPreference, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPreference, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPreferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPreferenceCreateBulk) SaveX(ctx context.Context) []*UserPreference {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
