// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userpreference"
)

// UserPreferenceUpdate is the builder for updating UserPreference entities.
type UserPreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *UserPreferenceMutation
}

// Where adds a new predicate for the UserPreferenceUpdate builder.
func (upu *UserPreferenceUpdate) Where(ps ...predicate.UserPreference) *UserPreferenceUpdate {
	upu.mutation.predicates = append(upu.mutation.predicates, ps...)
	return upu
}

// SetStringRef sets the "string_ref" field.
func (upu *UserPreferenceUpdate) SetStringRef(s string) *UserPreferenceUpdate {
	upu.mutation.SetStringRef(s)
	return upu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (upu *UserPreferenceUpdate) SetNillableStringRef(s *string) *UserPreferenceUpdate {
	if s != nil {
		upu.SetStringRef(*s)
	}
	return upu
}

// ClearStringRef clears the value of the "string_ref" field.
func (upu *UserPreferenceUpdate) ClearStringRef() *UserPreferenceUpdate {
	upu.mutation.ClearStringRef()
	return upu
}

// SetUserPrefTypeID sets the "user_pref_type_id" field.
func (upu *UserPreferenceUpdate) SetUserPrefTypeID(s string) *UserPreferenceUpdate {
	upu.mutation.SetUserPrefTypeID(s)
	return upu
}

// SetUserPrefGroupTypeID sets the "user_pref_group_type_id" field.
func (upu *UserPreferenceUpdate) SetUserPrefGroupTypeID(s string) *UserPreferenceUpdate {
	upu.mutation.SetUserPrefGroupTypeID(s)
	return upu
}

// SetNillableUserPrefGroupTypeID sets the "user_pref_group_type_id" field if the given value is not nil.
func (upu *UserPreferenceUpdate) SetNillableUserPrefGroupTypeID(s *string) *UserPreferenceUpdate {
	if s != nil {
		upu.SetUserPrefGroupTypeID(*s)
	}
	return upu
}

// ClearUserPrefGroupTypeID clears the value of the "user_pref_group_type_id" field.
func (upu *UserPreferenceUpdate) ClearUserPrefGroupTypeID() *UserPreferenceUpdate {
	upu.mutation.ClearUserPrefGroupTypeID()
	return upu
}

// SetUserPrefValue sets the "user_pref_value" field.
func (upu *UserPreferenceUpdate) SetUserPrefValue(s string) *UserPreferenceUpdate {
	upu.mutation.SetUserPrefValue(s)
	return upu
}

// SetNillableUserPrefValue sets the "user_pref_value" field if the given value is not nil.
func (upu *UserPreferenceUpdate) SetNillableUserPrefValue(s *string) *UserPreferenceUpdate {
	if s != nil {
		upu.SetUserPrefValue(*s)
	}
	return upu
}

// ClearUserPrefValue clears the value of the "user_pref_value" field.
func (upu *UserPreferenceUpdate) ClearUserPrefValue() *UserPreferenceUpdate {
	upu.mutation.ClearUserPrefValue()
	return upu
}

// SetUserPrefDataType sets the "user_pref_data_type" field.
func (upu *UserPreferenceUpdate) SetUserPrefDataType(s string) *UserPreferenceUpdate {
	upu.mutation.SetUserPrefDataType(s)
	return upu
}

// SetNillableUserPrefDataType sets the "user_pref_data_type" field if the given value is not nil.
func (upu *UserPreferenceUpdate) SetNillableUserPrefDataType(s *string) *UserPreferenceUpdate {
	if s != nil {
		upu.SetUserPrefDataType(*s)
	}
	return upu
}

// ClearUserPrefDataType clears the value of the "user_pref_data_type" field.
func (upu *UserPreferenceUpdate) ClearUserPrefDataType() *UserPreferenceUpdate {
	upu.mutation.ClearUserPrefDataType()
	return upu
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (upu *UserPreferenceUpdate) SetUserLoginID(id int) *UserPreferenceUpdate {
	upu.mutation.SetUserLoginID(id)
	return upu
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (upu *UserPreferenceUpdate) SetNillableUserLoginID(id *int) *UserPreferenceUpdate {
	if id != nil {
		upu = upu.SetUserLoginID(*id)
	}
	return upu
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (upu *UserPreferenceUpdate) SetUserLogin(u *UserLogin) *UserPreferenceUpdate {
	return upu.SetUserLoginID(u.ID)
}

// Mutation returns the UserPreferenceMutation object of the builder.
func (upu *UserPreferenceUpdate) Mutation() *UserPreferenceMutation {
	return upu.mutation
}

// ClearUserLogin clears the "user_login" edge to the UserLogin entity.
func (upu *UserPreferenceUpdate) ClearUserLogin() *UserPreferenceUpdate {
	upu.mutation.ClearUserLogin()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPreferenceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	upu.defaults()
	if len(upu.hooks) == 0 {
		if err = upu.check(); err != nil {
			return 0, err
		}
		affected, err = upu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upu.check(); err != nil {
				return 0, err
			}
			upu.mutation = mutation
			affected, err = upu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upu.hooks) - 1; i >= 0; i-- {
			mut = upu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPreferenceUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPreferenceUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPreferenceUpdate) defaults() {
	if _, ok := upu.mutation.UpdateTime(); !ok {
		v := userpreference.UpdateDefaultUpdateTime()
		upu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPreferenceUpdate) check() error {
	if v, ok := upu.mutation.UserPrefTypeID(); ok {
		if err := userpreference.UserPrefTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_type_id\": %w", err)}
		}
	}
	if v, ok := upu.mutation.UserPrefGroupTypeID(); ok {
		if err := userpreference.UserPrefGroupTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_group_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_group_type_id\": %w", err)}
		}
	}
	if v, ok := upu.mutation.UserPrefDataType(); ok {
		if err := userpreference.UserPrefDataTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_data_type", err: fmt.Errorf("ent: validator failed for field \"user_pref_data_type\": %w", err)}
		}
	}
	return nil
}

func (upu *UserPreferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpreference.Table,
			Columns: userpreference.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpreference.FieldID,
			},
		},
	}
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpreference.FieldUpdateTime,
		})
	}
	if value, ok := upu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldStringRef,
		})
	}
	if upu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldStringRef,
		})
	}
	if value, ok := upu.mutation.UserPrefTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefTypeID,
		})
	}
	if value, ok := upu.mutation.UserPrefGroupTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefGroupTypeID,
		})
	}
	if upu.mutation.UserPrefGroupTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefGroupTypeID,
		})
	}
	if value, ok := upu.mutation.UserPrefValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefValue,
		})
	}
	if upu.mutation.UserPrefValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefValue,
		})
	}
	if value, ok := upu.mutation.UserPrefDataType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefDataType,
		})
	}
	if upu.mutation.UserPrefDataTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefDataType,
		})
	}
	if upu.mutation.UserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpreference.UserLoginTable,
			Columns: []string{userpreference.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpreference.UserLoginTable,
			Columns: []string{userpreference.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreference.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserPreferenceUpdateOne is the builder for updating a single UserPreference entity.
type UserPreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPreferenceMutation
}

// SetStringRef sets the "string_ref" field.
func (upuo *UserPreferenceUpdateOne) SetStringRef(s string) *UserPreferenceUpdateOne {
	upuo.mutation.SetStringRef(s)
	return upuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (upuo *UserPreferenceUpdateOne) SetNillableStringRef(s *string) *UserPreferenceUpdateOne {
	if s != nil {
		upuo.SetStringRef(*s)
	}
	return upuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (upuo *UserPreferenceUpdateOne) ClearStringRef() *UserPreferenceUpdateOne {
	upuo.mutation.ClearStringRef()
	return upuo
}

// SetUserPrefTypeID sets the "user_pref_type_id" field.
func (upuo *UserPreferenceUpdateOne) SetUserPrefTypeID(s string) *UserPreferenceUpdateOne {
	upuo.mutation.SetUserPrefTypeID(s)
	return upuo
}

// SetUserPrefGroupTypeID sets the "user_pref_group_type_id" field.
func (upuo *UserPreferenceUpdateOne) SetUserPrefGroupTypeID(s string) *UserPreferenceUpdateOne {
	upuo.mutation.SetUserPrefGroupTypeID(s)
	return upuo
}

// SetNillableUserPrefGroupTypeID sets the "user_pref_group_type_id" field if the given value is not nil.
func (upuo *UserPreferenceUpdateOne) SetNillableUserPrefGroupTypeID(s *string) *UserPreferenceUpdateOne {
	if s != nil {
		upuo.SetUserPrefGroupTypeID(*s)
	}
	return upuo
}

// ClearUserPrefGroupTypeID clears the value of the "user_pref_group_type_id" field.
func (upuo *UserPreferenceUpdateOne) ClearUserPrefGroupTypeID() *UserPreferenceUpdateOne {
	upuo.mutation.ClearUserPrefGroupTypeID()
	return upuo
}

// SetUserPrefValue sets the "user_pref_value" field.
func (upuo *UserPreferenceUpdateOne) SetUserPrefValue(s string) *UserPreferenceUpdateOne {
	upuo.mutation.SetUserPrefValue(s)
	return upuo
}

// SetNillableUserPrefValue sets the "user_pref_value" field if the given value is not nil.
func (upuo *UserPreferenceUpdateOne) SetNillableUserPrefValue(s *string) *UserPreferenceUpdateOne {
	if s != nil {
		upuo.SetUserPrefValue(*s)
	}
	return upuo
}

// ClearUserPrefValue clears the value of the "user_pref_value" field.
func (upuo *UserPreferenceUpdateOne) ClearUserPrefValue() *UserPreferenceUpdateOne {
	upuo.mutation.ClearUserPrefValue()
	return upuo
}

// SetUserPrefDataType sets the "user_pref_data_type" field.
func (upuo *UserPreferenceUpdateOne) SetUserPrefDataType(s string) *UserPreferenceUpdateOne {
	upuo.mutation.SetUserPrefDataType(s)
	return upuo
}

// SetNillableUserPrefDataType sets the "user_pref_data_type" field if the given value is not nil.
func (upuo *UserPreferenceUpdateOne) SetNillableUserPrefDataType(s *string) *UserPreferenceUpdateOne {
	if s != nil {
		upuo.SetUserPrefDataType(*s)
	}
	return upuo
}

// ClearUserPrefDataType clears the value of the "user_pref_data_type" field.
func (upuo *UserPreferenceUpdateOne) ClearUserPrefDataType() *UserPreferenceUpdateOne {
	upuo.mutation.ClearUserPrefDataType()
	return upuo
}

// SetUserLoginID sets the "user_login" edge to the UserLogin entity by ID.
func (upuo *UserPreferenceUpdateOne) SetUserLoginID(id int) *UserPreferenceUpdateOne {
	upuo.mutation.SetUserLoginID(id)
	return upuo
}

// SetNillableUserLoginID sets the "user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (upuo *UserPreferenceUpdateOne) SetNillableUserLoginID(id *int) *UserPreferenceUpdateOne {
	if id != nil {
		upuo = upuo.SetUserLoginID(*id)
	}
	return upuo
}

// SetUserLogin sets the "user_login" edge to the UserLogin entity.
func (upuo *UserPreferenceUpdateOne) SetUserLogin(u *UserLogin) *UserPreferenceUpdateOne {
	return upuo.SetUserLoginID(u.ID)
}

// Mutation returns the UserPreferenceMutation object of the builder.
func (upuo *UserPreferenceUpdateOne) Mutation() *UserPreferenceMutation {
	return upuo.mutation
}

// ClearUserLogin clears the "user_login" edge to the UserLogin entity.
func (upuo *UserPreferenceUpdateOne) ClearUserLogin() *UserPreferenceUpdateOne {
	upuo.mutation.ClearUserLogin()
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPreferenceUpdateOne) Select(field string, fields ...string) *UserPreferenceUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPreference entity.
func (upuo *UserPreferenceUpdateOne) Save(ctx context.Context) (*UserPreference, error) {
	var (
		err  error
		node *UserPreference
	)
	upuo.defaults()
	if len(upuo.hooks) == 0 {
		if err = upuo.check(); err != nil {
			return nil, err
		}
		node, err = upuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPreferenceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upuo.check(); err != nil {
				return nil, err
			}
			upuo.mutation = mutation
			node, err = upuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upuo.hooks) - 1; i >= 0; i-- {
			mut = upuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPreferenceUpdateOne) SaveX(ctx context.Context) *UserPreference {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPreferenceUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdateTime(); !ok {
		v := userpreference.UpdateDefaultUpdateTime()
		upuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPreferenceUpdateOne) check() error {
	if v, ok := upuo.mutation.UserPrefTypeID(); ok {
		if err := userpreference.UserPrefTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_type_id\": %w", err)}
		}
	}
	if v, ok := upuo.mutation.UserPrefGroupTypeID(); ok {
		if err := userpreference.UserPrefGroupTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_group_type_id", err: fmt.Errorf("ent: validator failed for field \"user_pref_group_type_id\": %w", err)}
		}
	}
	if v, ok := upuo.mutation.UserPrefDataType(); ok {
		if err := userpreference.UserPrefDataTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_pref_data_type", err: fmt.Errorf("ent: validator failed for field \"user_pref_data_type\": %w", err)}
		}
	}
	return nil
}

func (upuo *UserPreferenceUpdateOne) sqlSave(ctx context.Context) (_node *UserPreference, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpreference.Table,
			Columns: userpreference.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpreference.FieldID,
			},
		},
	}
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserPreference.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpreference.FieldID)
		for _, f := range fields {
			if !userpreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userpreference.FieldUpdateTime,
		})
	}
	if value, ok := upuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldStringRef,
		})
	}
	if upuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldStringRef,
		})
	}
	if value, ok := upuo.mutation.UserPrefTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefTypeID,
		})
	}
	if value, ok := upuo.mutation.UserPrefGroupTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefGroupTypeID,
		})
	}
	if upuo.mutation.UserPrefGroupTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefGroupTypeID,
		})
	}
	if value, ok := upuo.mutation.UserPrefValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefValue,
		})
	}
	if upuo.mutation.UserPrefValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefValue,
		})
	}
	if value, ok := upuo.mutation.UserPrefDataType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userpreference.FieldUserPrefDataType,
		})
	}
	if upuo.mutation.UserPrefDataTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userpreference.FieldUserPrefDataType,
		})
	}
	if upuo.mutation.UserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpreference.UserLoginTable,
			Columns: []string{userpreference.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpreference.UserLoginTable,
			Columns: []string{userpreference.UserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPreference{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreference.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
