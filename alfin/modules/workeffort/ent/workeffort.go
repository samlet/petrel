// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
)

// WorkEffort is the model entity for the WorkEffort schema.
type WorkEffort struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WorkEffortTypeID holds the value of the "work_effort_type_id" field.
	WorkEffortTypeID int `json:"work_effort_type_id,omitempty"`
	// CurrentStatusID holds the value of the "current_status_id" field.
	CurrentStatusID int `json:"current_status_id,omitempty"`
	// LastStatusUpdate holds the value of the "last_status_update" field.
	LastStatusUpdate time.Time `json:"last_status_update,omitempty"`
	// WorkEffortPurposeTypeID holds the value of the "work_effort_purpose_type_id" field.
	WorkEffortPurposeTypeID int `json:"work_effort_purpose_type_id,omitempty"`
	// ScopeEnumID holds the value of the "scope_enum_id" field.
	ScopeEnumID int `json:"scope_enum_id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// PercentComplete holds the value of the "percent_complete" field.
	PercentComplete int `json:"percent_complete,omitempty"`
	// WorkEffortName holds the value of the "work_effort_name" field.
	WorkEffortName string `json:"work_effort_name,omitempty"`
	// ShowAsEnumID holds the value of the "show_as_enum_id" field.
	ShowAsEnumID int `json:"show_as_enum_id,omitempty"`
	// SendNotificationEmail holds the value of the "send_notification_email" field.
	SendNotificationEmail workeffort.SendNotificationEmail `json:"send_notification_email,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LocationDesc holds the value of the "location_desc" field.
	LocationDesc string `json:"location_desc,omitempty"`
	// EstimatedStartDate holds the value of the "estimated_start_date" field.
	EstimatedStartDate time.Time `json:"estimated_start_date,omitempty"`
	// EstimatedCompletionDate holds the value of the "estimated_completion_date" field.
	EstimatedCompletionDate time.Time `json:"estimated_completion_date,omitempty"`
	// ActualStartDate holds the value of the "actual_start_date" field.
	ActualStartDate time.Time `json:"actual_start_date,omitempty"`
	// ActualCompletionDate holds the value of the "actual_completion_date" field.
	ActualCompletionDate time.Time `json:"actual_completion_date,omitempty"`
	// EstimatedMilliSeconds holds the value of the "estimated_milli_seconds" field.
	EstimatedMilliSeconds float64 `json:"estimated_milli_seconds,omitempty"`
	// EstimatedSetupMillis holds the value of the "estimated_setup_millis" field.
	EstimatedSetupMillis float64 `json:"estimated_setup_millis,omitempty"`
	// EstimateCalcMethod holds the value of the "estimate_calc_method" field.
	EstimateCalcMethod int `json:"estimate_calc_method,omitempty"`
	// ActualMilliSeconds holds the value of the "actual_milli_seconds" field.
	ActualMilliSeconds float64 `json:"actual_milli_seconds,omitempty"`
	// ActualSetupMillis holds the value of the "actual_setup_millis" field.
	ActualSetupMillis float64 `json:"actual_setup_millis,omitempty"`
	// TotalMilliSecondsAllowed holds the value of the "total_milli_seconds_allowed" field.
	TotalMilliSecondsAllowed float64 `json:"total_milli_seconds_allowed,omitempty"`
	// TotalMoneyAllowed holds the value of the "total_money_allowed" field.
	TotalMoneyAllowed float64 `json:"total_money_allowed,omitempty"`
	// MoneyUomID holds the value of the "money_uom_id" field.
	MoneyUomID int `json:"money_uom_id,omitempty"`
	// SpecialTerms holds the value of the "special_terms" field.
	SpecialTerms string `json:"special_terms,omitempty"`
	// TimeTransparency holds the value of the "time_transparency" field.
	TimeTransparency int `json:"time_transparency,omitempty"`
	// UniversalID holds the value of the "universal_id" field.
	UniversalID string `json:"universal_id,omitempty"`
	// SourceReferenceID holds the value of the "source_reference_id" field.
	SourceReferenceID string `json:"source_reference_id,omitempty"`
	// FacilityID holds the value of the "facility_id" field.
	FacilityID int `json:"facility_id,omitempty"`
	// InfoURL holds the value of the "info_url" field.
	InfoURL string `json:"info_url,omitempty"`
	// RecurrenceInfoID holds the value of the "recurrence_info_id" field.
	RecurrenceInfoID int `json:"recurrence_info_id,omitempty"`
	// RuntimeDataID holds the value of the "runtime_data_id" field.
	RuntimeDataID int `json:"runtime_data_id,omitempty"`
	// NoteID holds the value of the "note_id" field.
	NoteID int `json:"note_id,omitempty"`
	// ServiceLoaderName holds the value of the "service_loader_name" field.
	ServiceLoaderName string `json:"service_loader_name,omitempty"`
	// QuantityToProduce holds the value of the "quantity_to_produce" field.
	QuantityToProduce float64 `json:"quantity_to_produce,omitempty"`
	// QuantityProduced holds the value of the "quantity_produced" field.
	QuantityProduced float64 `json:"quantity_produced,omitempty"`
	// QuantityRejected holds the value of the "quantity_rejected" field.
	QuantityRejected float64 `json:"quantity_rejected,omitempty"`
	// ReservPersons holds the value of the "reserv_persons" field.
	ReservPersons float64 `json:"reserv_persons,omitempty"`
	// Reserv2NdPpPerc holds the value of the "reserv_2_nd_pp_perc" field.
	Reserv2NdPpPerc float64 `json:"reserv_2_nd_pp_perc,omitempty"`
	// ReservNthPpPerc holds the value of the "reserv_nth_pp_perc" field.
	ReservNthPpPerc float64 `json:"reserv_nth_pp_perc,omitempty"`
	// AccommodationMapID holds the value of the "accommodation_map_id" field.
	AccommodationMapID int `json:"accommodation_map_id,omitempty"`
	// AccommodationSpotID holds the value of the "accommodation_spot_id" field.
	AccommodationSpotID int `json:"accommodation_spot_id,omitempty"`
	// RevisionNumber holds the value of the "revision_number" field.
	RevisionNumber int `json:"revision_number,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// CreatedByUserLogin holds the value of the "created_by_user_login" field.
	CreatedByUserLogin string `json:"created_by_user_login,omitempty"`
	// LastModifiedDate holds the value of the "last_modified_date" field.
	LastModifiedDate time.Time `json:"last_modified_date,omitempty"`
	// LastModifiedByUserLogin holds the value of the "last_modified_by_user_login" field.
	LastModifiedByUserLogin string `json:"last_modified_by_user_login,omitempty"`
	// SequenceNum holds the value of the "sequence_num" field.
	SequenceNum int `json:"sequence_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkEffortQuery when eager-loading is set.
	Edges                            WorkEffortEdges `json:"edges"`
	fixed_asset_work_efforts         *int
	temporal_expression_work_efforts *int
	work_effort_children             *int
}

// WorkEffortEdges holds the relations/edges for other nodes in the graph.
type WorkEffortEdges struct {
	// Parent holds the value of the parent edge.
	Parent *WorkEffort `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*WorkEffort `json:"children,omitempty"`
	// FixedAsset holds the value of the fixed_asset edge.
	FixedAsset *FixedAsset `json:"fixed_asset,omitempty"`
	// TemporalExpression holds the value of the temporal_expression edge.
	TemporalExpression *TemporalExpression `json:"temporal_expression,omitempty"`
	// ChildWorkEfforts holds the value of the child_work_efforts edge.
	ChildWorkEfforts []*WorkEffort `json:"child_work_efforts,omitempty"`
	// FromWorkEffortAssocs holds the value of the from_work_effort_assocs edge.
	FromWorkEffortAssocs []*WorkEffortAssoc `json:"from_work_effort_assocs,omitempty"`
	// ToWorkEffortAssocs holds the value of the to_work_effort_assocs edge.
	ToWorkEffortAssocs []*WorkEffortAssoc `json:"to_work_effort_assocs,omitempty"`
	// WorkEffortFixedAssetAssigns holds the value of the work_effort_fixed_asset_assigns edge.
	WorkEffortFixedAssetAssigns []*WorkEffortFixedAssetAssign `json:"work_effort_fixed_asset_assigns,omitempty"`
	// WorkEffortPartyAssignments holds the value of the work_effort_party_assignments edge.
	WorkEffortPartyAssignments []*WorkEffortPartyAssignment `json:"work_effort_party_assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortEdges) ParentOrErr() (*WorkEffort, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workeffort.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) ChildrenOrErr() ([]*WorkEffort, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// FixedAssetOrErr returns the FixedAsset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortEdges) FixedAssetOrErr() (*FixedAsset, error) {
	if e.loadedTypes[2] {
		if e.FixedAsset == nil {
			// The edge fixed_asset was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fixedasset.Label}
		}
		return e.FixedAsset, nil
	}
	return nil, &NotLoadedError{edge: "fixed_asset"}
}

// TemporalExpressionOrErr returns the TemporalExpression value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortEdges) TemporalExpressionOrErr() (*TemporalExpression, error) {
	if e.loadedTypes[3] {
		if e.TemporalExpression == nil {
			// The edge temporal_expression was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: temporalexpression.Label}
		}
		return e.TemporalExpression, nil
	}
	return nil, &NotLoadedError{edge: "temporal_expression"}
}

// ChildWorkEffortsOrErr returns the ChildWorkEfforts value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) ChildWorkEffortsOrErr() ([]*WorkEffort, error) {
	if e.loadedTypes[4] {
		return e.ChildWorkEfforts, nil
	}
	return nil, &NotLoadedError{edge: "child_work_efforts"}
}

// FromWorkEffortAssocsOrErr returns the FromWorkEffortAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) FromWorkEffortAssocsOrErr() ([]*WorkEffortAssoc, error) {
	if e.loadedTypes[5] {
		return e.FromWorkEffortAssocs, nil
	}
	return nil, &NotLoadedError{edge: "from_work_effort_assocs"}
}

// ToWorkEffortAssocsOrErr returns the ToWorkEffortAssocs value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) ToWorkEffortAssocsOrErr() ([]*WorkEffortAssoc, error) {
	if e.loadedTypes[6] {
		return e.ToWorkEffortAssocs, nil
	}
	return nil, &NotLoadedError{edge: "to_work_effort_assocs"}
}

// WorkEffortFixedAssetAssignsOrErr returns the WorkEffortFixedAssetAssigns value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) WorkEffortFixedAssetAssignsOrErr() ([]*WorkEffortFixedAssetAssign, error) {
	if e.loadedTypes[7] {
		return e.WorkEffortFixedAssetAssigns, nil
	}
	return nil, &NotLoadedError{edge: "work_effort_fixed_asset_assigns"}
}

// WorkEffortPartyAssignmentsOrErr returns the WorkEffortPartyAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e WorkEffortEdges) WorkEffortPartyAssignmentsOrErr() ([]*WorkEffortPartyAssignment, error) {
	if e.loadedTypes[8] {
		return e.WorkEffortPartyAssignments, nil
	}
	return nil, &NotLoadedError{edge: "work_effort_party_assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkEffort) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workeffort.FieldEstimatedMilliSeconds, workeffort.FieldEstimatedSetupMillis, workeffort.FieldActualMilliSeconds, workeffort.FieldActualSetupMillis, workeffort.FieldTotalMilliSecondsAllowed, workeffort.FieldTotalMoneyAllowed, workeffort.FieldQuantityToProduce, workeffort.FieldQuantityProduced, workeffort.FieldQuantityRejected, workeffort.FieldReservPersons, workeffort.FieldReserv2NdPpPerc, workeffort.FieldReservNthPpPerc:
			values[i] = new(sql.NullFloat64)
		case workeffort.FieldID, workeffort.FieldWorkEffortTypeID, workeffort.FieldCurrentStatusID, workeffort.FieldWorkEffortPurposeTypeID, workeffort.FieldScopeEnumID, workeffort.FieldPriority, workeffort.FieldPercentComplete, workeffort.FieldShowAsEnumID, workeffort.FieldEstimateCalcMethod, workeffort.FieldMoneyUomID, workeffort.FieldTimeTransparency, workeffort.FieldFacilityID, workeffort.FieldRecurrenceInfoID, workeffort.FieldRuntimeDataID, workeffort.FieldNoteID, workeffort.FieldAccommodationMapID, workeffort.FieldAccommodationSpotID, workeffort.FieldRevisionNumber, workeffort.FieldSequenceNum:
			values[i] = new(sql.NullInt64)
		case workeffort.FieldWorkEffortName, workeffort.FieldSendNotificationEmail, workeffort.FieldDescription, workeffort.FieldLocationDesc, workeffort.FieldSpecialTerms, workeffort.FieldUniversalID, workeffort.FieldSourceReferenceID, workeffort.FieldInfoURL, workeffort.FieldServiceLoaderName, workeffort.FieldCreatedByUserLogin, workeffort.FieldLastModifiedByUserLogin:
			values[i] = new(sql.NullString)
		case workeffort.FieldLastStatusUpdate, workeffort.FieldEstimatedStartDate, workeffort.FieldEstimatedCompletionDate, workeffort.FieldActualStartDate, workeffort.FieldActualCompletionDate, workeffort.FieldCreatedDate, workeffort.FieldLastModifiedDate:
			values[i] = new(sql.NullTime)
		case workeffort.ForeignKeys[0]: // fixed_asset_work_efforts
			values[i] = new(sql.NullInt64)
		case workeffort.ForeignKeys[1]: // temporal_expression_work_efforts
			values[i] = new(sql.NullInt64)
		case workeffort.ForeignKeys[2]: // work_effort_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkEffort", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkEffort fields.
func (we *WorkEffort) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workeffort.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			we.ID = int(value.Int64)
		case workeffort.FieldWorkEffortTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field work_effort_type_id", values[i])
			} else if value.Valid {
				we.WorkEffortTypeID = int(value.Int64)
			}
		case workeffort.FieldCurrentStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_status_id", values[i])
			} else if value.Valid {
				we.CurrentStatusID = int(value.Int64)
			}
		case workeffort.FieldLastStatusUpdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_status_update", values[i])
			} else if value.Valid {
				we.LastStatusUpdate = value.Time
			}
		case workeffort.FieldWorkEffortPurposeTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field work_effort_purpose_type_id", values[i])
			} else if value.Valid {
				we.WorkEffortPurposeTypeID = int(value.Int64)
			}
		case workeffort.FieldScopeEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scope_enum_id", values[i])
			} else if value.Valid {
				we.ScopeEnumID = int(value.Int64)
			}
		case workeffort.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				we.Priority = int(value.Int64)
			}
		case workeffort.FieldPercentComplete:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percent_complete", values[i])
			} else if value.Valid {
				we.PercentComplete = int(value.Int64)
			}
		case workeffort.FieldWorkEffortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_effort_name", values[i])
			} else if value.Valid {
				we.WorkEffortName = value.String
			}
		case workeffort.FieldShowAsEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show_as_enum_id", values[i])
			} else if value.Valid {
				we.ShowAsEnumID = int(value.Int64)
			}
		case workeffort.FieldSendNotificationEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field send_notification_email", values[i])
			} else if value.Valid {
				we.SendNotificationEmail = workeffort.SendNotificationEmail(value.String)
			}
		case workeffort.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				we.Description = value.String
			}
		case workeffort.FieldLocationDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_desc", values[i])
			} else if value.Valid {
				we.LocationDesc = value.String
			}
		case workeffort.FieldEstimatedStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_start_date", values[i])
			} else if value.Valid {
				we.EstimatedStartDate = value.Time
			}
		case workeffort.FieldEstimatedCompletionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_completion_date", values[i])
			} else if value.Valid {
				we.EstimatedCompletionDate = value.Time
			}
		case workeffort.FieldActualStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_start_date", values[i])
			} else if value.Valid {
				we.ActualStartDate = value.Time
			}
		case workeffort.FieldActualCompletionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_completion_date", values[i])
			} else if value.Valid {
				we.ActualCompletionDate = value.Time
			}
		case workeffort.FieldEstimatedMilliSeconds:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_milli_seconds", values[i])
			} else if value.Valid {
				we.EstimatedMilliSeconds = value.Float64
			}
		case workeffort.FieldEstimatedSetupMillis:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_setup_millis", values[i])
			} else if value.Valid {
				we.EstimatedSetupMillis = value.Float64
			}
		case workeffort.FieldEstimateCalcMethod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimate_calc_method", values[i])
			} else if value.Valid {
				we.EstimateCalcMethod = int(value.Int64)
			}
		case workeffort.FieldActualMilliSeconds:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field actual_milli_seconds", values[i])
			} else if value.Valid {
				we.ActualMilliSeconds = value.Float64
			}
		case workeffort.FieldActualSetupMillis:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field actual_setup_millis", values[i])
			} else if value.Valid {
				we.ActualSetupMillis = value.Float64
			}
		case workeffort.FieldTotalMilliSecondsAllowed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_milli_seconds_allowed", values[i])
			} else if value.Valid {
				we.TotalMilliSecondsAllowed = value.Float64
			}
		case workeffort.FieldTotalMoneyAllowed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_money_allowed", values[i])
			} else if value.Valid {
				we.TotalMoneyAllowed = value.Float64
			}
		case workeffort.FieldMoneyUomID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field money_uom_id", values[i])
			} else if value.Valid {
				we.MoneyUomID = int(value.Int64)
			}
		case workeffort.FieldSpecialTerms:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_terms", values[i])
			} else if value.Valid {
				we.SpecialTerms = value.String
			}
		case workeffort.FieldTimeTransparency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_transparency", values[i])
			} else if value.Valid {
				we.TimeTransparency = int(value.Int64)
			}
		case workeffort.FieldUniversalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field universal_id", values[i])
			} else if value.Valid {
				we.UniversalID = value.String
			}
		case workeffort.FieldSourceReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_reference_id", values[i])
			} else if value.Valid {
				we.SourceReferenceID = value.String
			}
		case workeffort.FieldFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field facility_id", values[i])
			} else if value.Valid {
				we.FacilityID = int(value.Int64)
			}
		case workeffort.FieldInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info_url", values[i])
			} else if value.Valid {
				we.InfoURL = value.String
			}
		case workeffort.FieldRecurrenceInfoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recurrence_info_id", values[i])
			} else if value.Valid {
				we.RecurrenceInfoID = int(value.Int64)
			}
		case workeffort.FieldRuntimeDataID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field runtime_data_id", values[i])
			} else if value.Valid {
				we.RuntimeDataID = int(value.Int64)
			}
		case workeffort.FieldNoteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field note_id", values[i])
			} else if value.Valid {
				we.NoteID = int(value.Int64)
			}
		case workeffort.FieldServiceLoaderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_loader_name", values[i])
			} else if value.Valid {
				we.ServiceLoaderName = value.String
			}
		case workeffort.FieldQuantityToProduce:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_to_produce", values[i])
			} else if value.Valid {
				we.QuantityToProduce = value.Float64
			}
		case workeffort.FieldQuantityProduced:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_produced", values[i])
			} else if value.Valid {
				we.QuantityProduced = value.Float64
			}
		case workeffort.FieldQuantityRejected:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_rejected", values[i])
			} else if value.Valid {
				we.QuantityRejected = value.Float64
			}
		case workeffort.FieldReservPersons:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_persons", values[i])
			} else if value.Valid {
				we.ReservPersons = value.Float64
			}
		case workeffort.FieldReserv2NdPpPerc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_2_nd_pp_perc", values[i])
			} else if value.Valid {
				we.Reserv2NdPpPerc = value.Float64
			}
		case workeffort.FieldReservNthPpPerc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reserv_nth_pp_perc", values[i])
			} else if value.Valid {
				we.ReservNthPpPerc = value.Float64
			}
		case workeffort.FieldAccommodationMapID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accommodation_map_id", values[i])
			} else if value.Valid {
				we.AccommodationMapID = int(value.Int64)
			}
		case workeffort.FieldAccommodationSpotID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accommodation_spot_id", values[i])
			} else if value.Valid {
				we.AccommodationSpotID = int(value.Int64)
			}
		case workeffort.FieldRevisionNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision_number", values[i])
			} else if value.Valid {
				we.RevisionNumber = int(value.Int64)
			}
		case workeffort.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				we.CreatedDate = value.Time
			}
		case workeffort.FieldCreatedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_user_login", values[i])
			} else if value.Valid {
				we.CreatedByUserLogin = value.String
			}
		case workeffort.FieldLastModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_date", values[i])
			} else if value.Valid {
				we.LastModifiedDate = value.Time
			}
		case workeffort.FieldLastModifiedByUserLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_modified_by_user_login", values[i])
			} else if value.Valid {
				we.LastModifiedByUserLogin = value.String
			}
		case workeffort.FieldSequenceNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_num", values[i])
			} else if value.Valid {
				we.SequenceNum = int(value.Int64)
			}
		case workeffort.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fixed_asset_work_efforts", value)
			} else if value.Valid {
				we.fixed_asset_work_efforts = new(int)
				*we.fixed_asset_work_efforts = int(value.Int64)
			}
		case workeffort.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field temporal_expression_work_efforts", value)
			} else if value.Valid {
				we.temporal_expression_work_efforts = new(int)
				*we.temporal_expression_work_efforts = int(value.Int64)
			}
		case workeffort.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_effort_children", value)
			} else if value.Valid {
				we.work_effort_children = new(int)
				*we.work_effort_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the WorkEffort entity.
func (we *WorkEffort) QueryParent() *WorkEffortQuery {
	return (&WorkEffortClient{config: we.config}).QueryParent(we)
}

// QueryChildren queries the "children" edge of the WorkEffort entity.
func (we *WorkEffort) QueryChildren() *WorkEffortQuery {
	return (&WorkEffortClient{config: we.config}).QueryChildren(we)
}

// QueryFixedAsset queries the "fixed_asset" edge of the WorkEffort entity.
func (we *WorkEffort) QueryFixedAsset() *FixedAssetQuery {
	return (&WorkEffortClient{config: we.config}).QueryFixedAsset(we)
}

// QueryTemporalExpression queries the "temporal_expression" edge of the WorkEffort entity.
func (we *WorkEffort) QueryTemporalExpression() *TemporalExpressionQuery {
	return (&WorkEffortClient{config: we.config}).QueryTemporalExpression(we)
}

// QueryChildWorkEfforts queries the "child_work_efforts" edge of the WorkEffort entity.
func (we *WorkEffort) QueryChildWorkEfforts() *WorkEffortQuery {
	return (&WorkEffortClient{config: we.config}).QueryChildWorkEfforts(we)
}

// QueryFromWorkEffortAssocs queries the "from_work_effort_assocs" edge of the WorkEffort entity.
func (we *WorkEffort) QueryFromWorkEffortAssocs() *WorkEffortAssocQuery {
	return (&WorkEffortClient{config: we.config}).QueryFromWorkEffortAssocs(we)
}

// QueryToWorkEffortAssocs queries the "to_work_effort_assocs" edge of the WorkEffort entity.
func (we *WorkEffort) QueryToWorkEffortAssocs() *WorkEffortAssocQuery {
	return (&WorkEffortClient{config: we.config}).QueryToWorkEffortAssocs(we)
}

// QueryWorkEffortFixedAssetAssigns queries the "work_effort_fixed_asset_assigns" edge of the WorkEffort entity.
func (we *WorkEffort) QueryWorkEffortFixedAssetAssigns() *WorkEffortFixedAssetAssignQuery {
	return (&WorkEffortClient{config: we.config}).QueryWorkEffortFixedAssetAssigns(we)
}

// QueryWorkEffortPartyAssignments queries the "work_effort_party_assignments" edge of the WorkEffort entity.
func (we *WorkEffort) QueryWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	return (&WorkEffortClient{config: we.config}).QueryWorkEffortPartyAssignments(we)
}

// Update returns a builder for updating this WorkEffort.
// Note that you need to call WorkEffort.Unwrap() before calling this method if this WorkEffort
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkEffort) Update() *WorkEffortUpdateOne {
	return (&WorkEffortClient{config: we.config}).UpdateOne(we)
}

// Unwrap unwraps the WorkEffort entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkEffort) Unwrap() *WorkEffort {
	tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkEffort is not a transactional entity")
	}
	we.config.driver = tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkEffort) String() string {
	var builder strings.Builder
	builder.WriteString("WorkEffort(")
	builder.WriteString(fmt.Sprintf("id=%v", we.ID))
	builder.WriteString(", work_effort_type_id=")
	builder.WriteString(fmt.Sprintf("%v", we.WorkEffortTypeID))
	builder.WriteString(", current_status_id=")
	builder.WriteString(fmt.Sprintf("%v", we.CurrentStatusID))
	builder.WriteString(", last_status_update=")
	builder.WriteString(we.LastStatusUpdate.Format(time.ANSIC))
	builder.WriteString(", work_effort_purpose_type_id=")
	builder.WriteString(fmt.Sprintf("%v", we.WorkEffortPurposeTypeID))
	builder.WriteString(", scope_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", we.ScopeEnumID))
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", we.Priority))
	builder.WriteString(", percent_complete=")
	builder.WriteString(fmt.Sprintf("%v", we.PercentComplete))
	builder.WriteString(", work_effort_name=")
	builder.WriteString(we.WorkEffortName)
	builder.WriteString(", show_as_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", we.ShowAsEnumID))
	builder.WriteString(", send_notification_email=")
	builder.WriteString(fmt.Sprintf("%v", we.SendNotificationEmail))
	builder.WriteString(", description=")
	builder.WriteString(we.Description)
	builder.WriteString(", location_desc=")
	builder.WriteString(we.LocationDesc)
	builder.WriteString(", estimated_start_date=")
	builder.WriteString(we.EstimatedStartDate.Format(time.ANSIC))
	builder.WriteString(", estimated_completion_date=")
	builder.WriteString(we.EstimatedCompletionDate.Format(time.ANSIC))
	builder.WriteString(", actual_start_date=")
	builder.WriteString(we.ActualStartDate.Format(time.ANSIC))
	builder.WriteString(", actual_completion_date=")
	builder.WriteString(we.ActualCompletionDate.Format(time.ANSIC))
	builder.WriteString(", estimated_milli_seconds=")
	builder.WriteString(fmt.Sprintf("%v", we.EstimatedMilliSeconds))
	builder.WriteString(", estimated_setup_millis=")
	builder.WriteString(fmt.Sprintf("%v", we.EstimatedSetupMillis))
	builder.WriteString(", estimate_calc_method=")
	builder.WriteString(fmt.Sprintf("%v", we.EstimateCalcMethod))
	builder.WriteString(", actual_milli_seconds=")
	builder.WriteString(fmt.Sprintf("%v", we.ActualMilliSeconds))
	builder.WriteString(", actual_setup_millis=")
	builder.WriteString(fmt.Sprintf("%v", we.ActualSetupMillis))
	builder.WriteString(", total_milli_seconds_allowed=")
	builder.WriteString(fmt.Sprintf("%v", we.TotalMilliSecondsAllowed))
	builder.WriteString(", total_money_allowed=")
	builder.WriteString(fmt.Sprintf("%v", we.TotalMoneyAllowed))
	builder.WriteString(", money_uom_id=")
	builder.WriteString(fmt.Sprintf("%v", we.MoneyUomID))
	builder.WriteString(", special_terms=")
	builder.WriteString(we.SpecialTerms)
	builder.WriteString(", time_transparency=")
	builder.WriteString(fmt.Sprintf("%v", we.TimeTransparency))
	builder.WriteString(", universal_id=")
	builder.WriteString(we.UniversalID)
	builder.WriteString(", source_reference_id=")
	builder.WriteString(we.SourceReferenceID)
	builder.WriteString(", facility_id=")
	builder.WriteString(fmt.Sprintf("%v", we.FacilityID))
	builder.WriteString(", info_url=")
	builder.WriteString(we.InfoURL)
	builder.WriteString(", recurrence_info_id=")
	builder.WriteString(fmt.Sprintf("%v", we.RecurrenceInfoID))
	builder.WriteString(", runtime_data_id=")
	builder.WriteString(fmt.Sprintf("%v", we.RuntimeDataID))
	builder.WriteString(", note_id=")
	builder.WriteString(fmt.Sprintf("%v", we.NoteID))
	builder.WriteString(", service_loader_name=")
	builder.WriteString(we.ServiceLoaderName)
	builder.WriteString(", quantity_to_produce=")
	builder.WriteString(fmt.Sprintf("%v", we.QuantityToProduce))
	builder.WriteString(", quantity_produced=")
	builder.WriteString(fmt.Sprintf("%v", we.QuantityProduced))
	builder.WriteString(", quantity_rejected=")
	builder.WriteString(fmt.Sprintf("%v", we.QuantityRejected))
	builder.WriteString(", reserv_persons=")
	builder.WriteString(fmt.Sprintf("%v", we.ReservPersons))
	builder.WriteString(", reserv_2_nd_pp_perc=")
	builder.WriteString(fmt.Sprintf("%v", we.Reserv2NdPpPerc))
	builder.WriteString(", reserv_nth_pp_perc=")
	builder.WriteString(fmt.Sprintf("%v", we.ReservNthPpPerc))
	builder.WriteString(", accommodation_map_id=")
	builder.WriteString(fmt.Sprintf("%v", we.AccommodationMapID))
	builder.WriteString(", accommodation_spot_id=")
	builder.WriteString(fmt.Sprintf("%v", we.AccommodationSpotID))
	builder.WriteString(", revision_number=")
	builder.WriteString(fmt.Sprintf("%v", we.RevisionNumber))
	builder.WriteString(", created_date=")
	builder.WriteString(we.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", created_by_user_login=")
	builder.WriteString(we.CreatedByUserLogin)
	builder.WriteString(", last_modified_date=")
	builder.WriteString(we.LastModifiedDate.Format(time.ANSIC))
	builder.WriteString(", last_modified_by_user_login=")
	builder.WriteString(we.LastModifiedByUserLogin)
	builder.WriteString(", sequence_num=")
	builder.WriteString(fmt.Sprintf("%v", we.SequenceNum))
	builder.WriteByte(')')
	return builder.String()
}

// WorkEfforts is a parsable slice of WorkEffort.
type WorkEfforts []*WorkEffort

func (we WorkEfforts) config(cfg config) {
	for _i := range we {
		we[_i].config = cfg
	}
}
