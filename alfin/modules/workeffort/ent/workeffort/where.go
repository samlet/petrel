// Code generated by entc, DO NOT EDIT.

package workeffort

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// LastStatusUpdate applies equality check predicate on the "last_status_update" field. It's identical to LastStatusUpdateEQ.
func LastStatusUpdate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStatusUpdate), v))
	})
}

// WorkEffortPurposeTypeID applies equality check predicate on the "work_effort_purpose_type_id" field. It's identical to WorkEffortPurposeTypeIDEQ.
func WorkEffortPurposeTypeID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// ScopeEnumID applies equality check predicate on the "scope_enum_id" field. It's identical to ScopeEnumIDEQ.
func ScopeEnumID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScopeEnumID), v))
	})
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PercentComplete applies equality check predicate on the "percent_complete" field. It's identical to PercentCompleteEQ.
func PercentComplete(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPercentComplete), v))
	})
}

// WorkEffortName applies equality check predicate on the "work_effort_name" field. It's identical to WorkEffortNameEQ.
func WorkEffortName(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortName), v))
	})
}

// ShowAsEnumID applies equality check predicate on the "show_as_enum_id" field. It's identical to ShowAsEnumIDEQ.
func ShowAsEnumID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowAsEnumID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// LocationDesc applies equality check predicate on the "location_desc" field. It's identical to LocationDescEQ.
func LocationDesc(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationDesc), v))
	})
}

// EstimatedStartDate applies equality check predicate on the "estimated_start_date" field. It's identical to EstimatedStartDateEQ.
func EstimatedStartDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedCompletionDate applies equality check predicate on the "estimated_completion_date" field. It's identical to EstimatedCompletionDateEQ.
func EstimatedCompletionDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCompletionDate), v))
	})
}

// ActualStartDate applies equality check predicate on the "actual_start_date" field. It's identical to ActualStartDateEQ.
func ActualStartDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualStartDate), v))
	})
}

// ActualCompletionDate applies equality check predicate on the "actual_completion_date" field. It's identical to ActualCompletionDateEQ.
func ActualCompletionDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualCompletionDate), v))
	})
}

// EstimatedMilliSeconds applies equality check predicate on the "estimated_milli_seconds" field. It's identical to EstimatedMilliSecondsEQ.
func EstimatedMilliSeconds(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedSetupMillis applies equality check predicate on the "estimated_setup_millis" field. It's identical to EstimatedSetupMillisEQ.
func EstimatedSetupMillis(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimateCalcMethod applies equality check predicate on the "estimate_calc_method" field. It's identical to EstimateCalcMethodEQ.
func EstimateCalcMethod(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimateCalcMethod), v))
	})
}

// ActualMilliSeconds applies equality check predicate on the "actual_milli_seconds" field. It's identical to ActualMilliSecondsEQ.
func ActualMilliSeconds(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualSetupMillis applies equality check predicate on the "actual_setup_millis" field. It's identical to ActualSetupMillisEQ.
func ActualSetupMillis(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualSetupMillis), v))
	})
}

// TotalMilliSecondsAllowed applies equality check predicate on the "total_milli_seconds_allowed" field. It's identical to TotalMilliSecondsAllowedEQ.
func TotalMilliSecondsAllowed(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMoneyAllowed applies equality check predicate on the "total_money_allowed" field. It's identical to TotalMoneyAllowedEQ.
func TotalMoneyAllowed(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMoneyAllowed), v))
	})
}

// MoneyUomID applies equality check predicate on the "money_uom_id" field. It's identical to MoneyUomIDEQ.
func MoneyUomID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoneyUomID), v))
	})
}

// SpecialTerms applies equality check predicate on the "special_terms" field. It's identical to SpecialTermsEQ.
func SpecialTerms(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialTerms), v))
	})
}

// TimeTransparency applies equality check predicate on the "time_transparency" field. It's identical to TimeTransparencyEQ.
func TimeTransparency(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeTransparency), v))
	})
}

// UniversalID applies equality check predicate on the "universal_id" field. It's identical to UniversalIDEQ.
func UniversalID(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniversalID), v))
	})
}

// SourceReferenceID applies equality check predicate on the "source_reference_id" field. It's identical to SourceReferenceIDEQ.
func SourceReferenceID(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceReferenceID), v))
	})
}

// FacilityID applies equality check predicate on the "facility_id" field. It's identical to FacilityIDEQ.
func FacilityID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// InfoURL applies equality check predicate on the "info_url" field. It's identical to InfoURLEQ.
func InfoURL(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfoURL), v))
	})
}

// RecurrenceInfoID applies equality check predicate on the "recurrence_info_id" field. It's identical to RecurrenceInfoIDEQ.
func RecurrenceInfoID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// RuntimeDataID applies equality check predicate on the "runtime_data_id" field. It's identical to RuntimeDataIDEQ.
func RuntimeDataID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuntimeDataID), v))
	})
}

// NoteID applies equality check predicate on the "note_id" field. It's identical to NoteIDEQ.
func NoteID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoteID), v))
	})
}

// ServiceLoaderName applies equality check predicate on the "service_loader_name" field. It's identical to ServiceLoaderNameEQ.
func ServiceLoaderName(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceLoaderName), v))
	})
}

// QuantityToProduce applies equality check predicate on the "quantity_to_produce" field. It's identical to QuantityToProduceEQ.
func QuantityToProduce(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityProduced applies equality check predicate on the "quantity_produced" field. It's identical to QuantityProducedEQ.
func QuantityProduced(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityProduced), v))
	})
}

// QuantityRejected applies equality check predicate on the "quantity_rejected" field. It's identical to QuantityRejectedEQ.
func QuantityRejected(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityRejected), v))
	})
}

// ReservPersons applies equality check predicate on the "reserv_persons" field. It's identical to ReservPersonsEQ.
func ReservPersons(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservPersons), v))
	})
}

// Reserv2NdPpPerc applies equality check predicate on the "reserv_2_nd_pp_perc" field. It's identical to Reserv2NdPpPercEQ.
func Reserv2NdPpPerc(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// ReservNthPpPerc applies equality check predicate on the "reserv_nth_pp_perc" field. It's identical to ReservNthPpPercEQ.
func ReservNthPpPerc(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservNthPpPerc), v))
	})
}

// AccommodationMapID applies equality check predicate on the "accommodation_map_id" field. It's identical to AccommodationMapIDEQ.
func AccommodationMapID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationSpotID applies equality check predicate on the "accommodation_spot_id" field. It's identical to AccommodationSpotIDEQ.
func AccommodationSpotID(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccommodationSpotID), v))
	})
}

// RevisionNumber applies equality check predicate on the "revision_number" field. It's identical to RevisionNumberEQ.
func RevisionNumber(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevisionNumber), v))
	})
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedByUserLogin applies equality check predicate on the "created_by_user_login" field. It's identical to CreatedByUserLoginEQ.
func CreatedByUserLogin(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedByUserLogin applies equality check predicate on the "last_modified_by_user_login" field. It's identical to LastModifiedByUserLoginEQ.
func LastModifiedByUserLogin(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// SequenceNum applies equality check predicate on the "sequence_num" field. It's identical to SequenceNumEQ.
func SequenceNum(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceNum), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// LastStatusUpdateEQ applies the EQ predicate on the "last_status_update" field.
func LastStatusUpdateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateNEQ applies the NEQ predicate on the "last_status_update" field.
func LastStatusUpdateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateIn applies the In predicate on the "last_status_update" field.
func LastStatusUpdateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastStatusUpdate), v...))
	})
}

// LastStatusUpdateNotIn applies the NotIn predicate on the "last_status_update" field.
func LastStatusUpdateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastStatusUpdate), v...))
	})
}

// LastStatusUpdateGT applies the GT predicate on the "last_status_update" field.
func LastStatusUpdateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateGTE applies the GTE predicate on the "last_status_update" field.
func LastStatusUpdateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateLT applies the LT predicate on the "last_status_update" field.
func LastStatusUpdateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateLTE applies the LTE predicate on the "last_status_update" field.
func LastStatusUpdateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastStatusUpdate), v))
	})
}

// LastStatusUpdateIsNil applies the IsNil predicate on the "last_status_update" field.
func LastStatusUpdateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastStatusUpdate)))
	})
}

// LastStatusUpdateNotNil applies the NotNil predicate on the "last_status_update" field.
func LastStatusUpdateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastStatusUpdate)))
	})
}

// WorkEffortPurposeTypeIDEQ applies the EQ predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDNEQ applies the NEQ predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDIn applies the In predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkEffortPurposeTypeID), v...))
	})
}

// WorkEffortPurposeTypeIDNotIn applies the NotIn predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkEffortPurposeTypeID), v...))
	})
}

// WorkEffortPurposeTypeIDGT applies the GT predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDGTE applies the GTE predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDLT applies the LT predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDLTE applies the LTE predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkEffortPurposeTypeID), v))
	})
}

// WorkEffortPurposeTypeIDIsNil applies the IsNil predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkEffortPurposeTypeID)))
	})
}

// WorkEffortPurposeTypeIDNotNil applies the NotNil predicate on the "work_effort_purpose_type_id" field.
func WorkEffortPurposeTypeIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkEffortPurposeTypeID)))
	})
}

// ScopeEnumIDEQ applies the EQ predicate on the "scope_enum_id" field.
func ScopeEnumIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDNEQ applies the NEQ predicate on the "scope_enum_id" field.
func ScopeEnumIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDIn applies the In predicate on the "scope_enum_id" field.
func ScopeEnumIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScopeEnumID), v...))
	})
}

// ScopeEnumIDNotIn applies the NotIn predicate on the "scope_enum_id" field.
func ScopeEnumIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScopeEnumID), v...))
	})
}

// ScopeEnumIDGT applies the GT predicate on the "scope_enum_id" field.
func ScopeEnumIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDGTE applies the GTE predicate on the "scope_enum_id" field.
func ScopeEnumIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDLT applies the LT predicate on the "scope_enum_id" field.
func ScopeEnumIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDLTE applies the LTE predicate on the "scope_enum_id" field.
func ScopeEnumIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScopeEnumID), v))
	})
}

// ScopeEnumIDIsNil applies the IsNil predicate on the "scope_enum_id" field.
func ScopeEnumIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScopeEnumID)))
	})
}

// ScopeEnumIDNotNil applies the NotNil predicate on the "scope_enum_id" field.
func ScopeEnumIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScopeEnumID)))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriority), v))
	})
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriority), v))
	})
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriority), v))
	})
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriority), v))
	})
}

// PriorityIsNil applies the IsNil predicate on the "priority" field.
func PriorityIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPriority)))
	})
}

// PriorityNotNil applies the NotNil predicate on the "priority" field.
func PriorityNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPriority)))
	})
}

// PercentCompleteEQ applies the EQ predicate on the "percent_complete" field.
func PercentCompleteEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteNEQ applies the NEQ predicate on the "percent_complete" field.
func PercentCompleteNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteIn applies the In predicate on the "percent_complete" field.
func PercentCompleteIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPercentComplete), v...))
	})
}

// PercentCompleteNotIn applies the NotIn predicate on the "percent_complete" field.
func PercentCompleteNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPercentComplete), v...))
	})
}

// PercentCompleteGT applies the GT predicate on the "percent_complete" field.
func PercentCompleteGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteGTE applies the GTE predicate on the "percent_complete" field.
func PercentCompleteGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteLT applies the LT predicate on the "percent_complete" field.
func PercentCompleteLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteLTE applies the LTE predicate on the "percent_complete" field.
func PercentCompleteLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPercentComplete), v))
	})
}

// PercentCompleteIsNil applies the IsNil predicate on the "percent_complete" field.
func PercentCompleteIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPercentComplete)))
	})
}

// PercentCompleteNotNil applies the NotNil predicate on the "percent_complete" field.
func PercentCompleteNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPercentComplete)))
	})
}

// WorkEffortNameEQ applies the EQ predicate on the "work_effort_name" field.
func WorkEffortNameEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameNEQ applies the NEQ predicate on the "work_effort_name" field.
func WorkEffortNameNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameIn applies the In predicate on the "work_effort_name" field.
func WorkEffortNameIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkEffortName), v...))
	})
}

// WorkEffortNameNotIn applies the NotIn predicate on the "work_effort_name" field.
func WorkEffortNameNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkEffortName), v...))
	})
}

// WorkEffortNameGT applies the GT predicate on the "work_effort_name" field.
func WorkEffortNameGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameGTE applies the GTE predicate on the "work_effort_name" field.
func WorkEffortNameGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameLT applies the LT predicate on the "work_effort_name" field.
func WorkEffortNameLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameLTE applies the LTE predicate on the "work_effort_name" field.
func WorkEffortNameLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameContains applies the Contains predicate on the "work_effort_name" field.
func WorkEffortNameContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameHasPrefix applies the HasPrefix predicate on the "work_effort_name" field.
func WorkEffortNameHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameHasSuffix applies the HasSuffix predicate on the "work_effort_name" field.
func WorkEffortNameHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameIsNil applies the IsNil predicate on the "work_effort_name" field.
func WorkEffortNameIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkEffortName)))
	})
}

// WorkEffortNameNotNil applies the NotNil predicate on the "work_effort_name" field.
func WorkEffortNameNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkEffortName)))
	})
}

// WorkEffortNameEqualFold applies the EqualFold predicate on the "work_effort_name" field.
func WorkEffortNameEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWorkEffortName), v))
	})
}

// WorkEffortNameContainsFold applies the ContainsFold predicate on the "work_effort_name" field.
func WorkEffortNameContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWorkEffortName), v))
	})
}

// ShowAsEnumIDEQ applies the EQ predicate on the "show_as_enum_id" field.
func ShowAsEnumIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDNEQ applies the NEQ predicate on the "show_as_enum_id" field.
func ShowAsEnumIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDIn applies the In predicate on the "show_as_enum_id" field.
func ShowAsEnumIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShowAsEnumID), v...))
	})
}

// ShowAsEnumIDNotIn applies the NotIn predicate on the "show_as_enum_id" field.
func ShowAsEnumIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShowAsEnumID), v...))
	})
}

// ShowAsEnumIDGT applies the GT predicate on the "show_as_enum_id" field.
func ShowAsEnumIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDGTE applies the GTE predicate on the "show_as_enum_id" field.
func ShowAsEnumIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDLT applies the LT predicate on the "show_as_enum_id" field.
func ShowAsEnumIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDLTE applies the LTE predicate on the "show_as_enum_id" field.
func ShowAsEnumIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShowAsEnumID), v))
	})
}

// ShowAsEnumIDIsNil applies the IsNil predicate on the "show_as_enum_id" field.
func ShowAsEnumIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShowAsEnumID)))
	})
}

// ShowAsEnumIDNotNil applies the NotNil predicate on the "show_as_enum_id" field.
func ShowAsEnumIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShowAsEnumID)))
	})
}

// SendNotificationEmailEQ applies the EQ predicate on the "send_notification_email" field.
func SendNotificationEmailEQ(v SendNotificationEmail) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendNotificationEmail), v))
	})
}

// SendNotificationEmailNEQ applies the NEQ predicate on the "send_notification_email" field.
func SendNotificationEmailNEQ(v SendNotificationEmail) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendNotificationEmail), v))
	})
}

// SendNotificationEmailIn applies the In predicate on the "send_notification_email" field.
func SendNotificationEmailIn(vs ...SendNotificationEmail) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSendNotificationEmail), v...))
	})
}

// SendNotificationEmailNotIn applies the NotIn predicate on the "send_notification_email" field.
func SendNotificationEmailNotIn(vs ...SendNotificationEmail) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSendNotificationEmail), v...))
	})
}

// SendNotificationEmailIsNil applies the IsNil predicate on the "send_notification_email" field.
func SendNotificationEmailIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSendNotificationEmail)))
	})
}

// SendNotificationEmailNotNil applies the NotNil predicate on the "send_notification_email" field.
func SendNotificationEmailNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSendNotificationEmail)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LocationDescEQ applies the EQ predicate on the "location_desc" field.
func LocationDescEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationDesc), v))
	})
}

// LocationDescNEQ applies the NEQ predicate on the "location_desc" field.
func LocationDescNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationDesc), v))
	})
}

// LocationDescIn applies the In predicate on the "location_desc" field.
func LocationDescIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocationDesc), v...))
	})
}

// LocationDescNotIn applies the NotIn predicate on the "location_desc" field.
func LocationDescNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocationDesc), v...))
	})
}

// LocationDescGT applies the GT predicate on the "location_desc" field.
func LocationDescGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationDesc), v))
	})
}

// LocationDescGTE applies the GTE predicate on the "location_desc" field.
func LocationDescGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationDesc), v))
	})
}

// LocationDescLT applies the LT predicate on the "location_desc" field.
func LocationDescLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationDesc), v))
	})
}

// LocationDescLTE applies the LTE predicate on the "location_desc" field.
func LocationDescLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationDesc), v))
	})
}

// LocationDescContains applies the Contains predicate on the "location_desc" field.
func LocationDescContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocationDesc), v))
	})
}

// LocationDescHasPrefix applies the HasPrefix predicate on the "location_desc" field.
func LocationDescHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocationDesc), v))
	})
}

// LocationDescHasSuffix applies the HasSuffix predicate on the "location_desc" field.
func LocationDescHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocationDesc), v))
	})
}

// LocationDescIsNil applies the IsNil predicate on the "location_desc" field.
func LocationDescIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocationDesc)))
	})
}

// LocationDescNotNil applies the NotNil predicate on the "location_desc" field.
func LocationDescNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocationDesc)))
	})
}

// LocationDescEqualFold applies the EqualFold predicate on the "location_desc" field.
func LocationDescEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocationDesc), v))
	})
}

// LocationDescContainsFold applies the ContainsFold predicate on the "location_desc" field.
func LocationDescContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocationDesc), v))
	})
}

// EstimatedStartDateEQ applies the EQ predicate on the "estimated_start_date" field.
func EstimatedStartDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateNEQ applies the NEQ predicate on the "estimated_start_date" field.
func EstimatedStartDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateIn applies the In predicate on the "estimated_start_date" field.
func EstimatedStartDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedStartDate), v...))
	})
}

// EstimatedStartDateNotIn applies the NotIn predicate on the "estimated_start_date" field.
func EstimatedStartDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedStartDate), v...))
	})
}

// EstimatedStartDateGT applies the GT predicate on the "estimated_start_date" field.
func EstimatedStartDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateGTE applies the GTE predicate on the "estimated_start_date" field.
func EstimatedStartDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateLT applies the LT predicate on the "estimated_start_date" field.
func EstimatedStartDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateLTE applies the LTE predicate on the "estimated_start_date" field.
func EstimatedStartDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedStartDate), v))
	})
}

// EstimatedStartDateIsNil applies the IsNil predicate on the "estimated_start_date" field.
func EstimatedStartDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedStartDate)))
	})
}

// EstimatedStartDateNotNil applies the NotNil predicate on the "estimated_start_date" field.
func EstimatedStartDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedStartDate)))
	})
}

// EstimatedCompletionDateEQ applies the EQ predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateNEQ applies the NEQ predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateIn applies the In predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedCompletionDate), v...))
	})
}

// EstimatedCompletionDateNotIn applies the NotIn predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedCompletionDate), v...))
	})
}

// EstimatedCompletionDateGT applies the GT predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateGTE applies the GTE predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateLT applies the LT predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateLTE applies the LTE predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedCompletionDate), v))
	})
}

// EstimatedCompletionDateIsNil applies the IsNil predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedCompletionDate)))
	})
}

// EstimatedCompletionDateNotNil applies the NotNil predicate on the "estimated_completion_date" field.
func EstimatedCompletionDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedCompletionDate)))
	})
}

// ActualStartDateEQ applies the EQ predicate on the "actual_start_date" field.
func ActualStartDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateNEQ applies the NEQ predicate on the "actual_start_date" field.
func ActualStartDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateIn applies the In predicate on the "actual_start_date" field.
func ActualStartDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActualStartDate), v...))
	})
}

// ActualStartDateNotIn applies the NotIn predicate on the "actual_start_date" field.
func ActualStartDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActualStartDate), v...))
	})
}

// ActualStartDateGT applies the GT predicate on the "actual_start_date" field.
func ActualStartDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateGTE applies the GTE predicate on the "actual_start_date" field.
func ActualStartDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateLT applies the LT predicate on the "actual_start_date" field.
func ActualStartDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateLTE applies the LTE predicate on the "actual_start_date" field.
func ActualStartDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActualStartDate), v))
	})
}

// ActualStartDateIsNil applies the IsNil predicate on the "actual_start_date" field.
func ActualStartDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActualStartDate)))
	})
}

// ActualStartDateNotNil applies the NotNil predicate on the "actual_start_date" field.
func ActualStartDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActualStartDate)))
	})
}

// ActualCompletionDateEQ applies the EQ predicate on the "actual_completion_date" field.
func ActualCompletionDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateNEQ applies the NEQ predicate on the "actual_completion_date" field.
func ActualCompletionDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateIn applies the In predicate on the "actual_completion_date" field.
func ActualCompletionDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActualCompletionDate), v...))
	})
}

// ActualCompletionDateNotIn applies the NotIn predicate on the "actual_completion_date" field.
func ActualCompletionDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActualCompletionDate), v...))
	})
}

// ActualCompletionDateGT applies the GT predicate on the "actual_completion_date" field.
func ActualCompletionDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateGTE applies the GTE predicate on the "actual_completion_date" field.
func ActualCompletionDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateLT applies the LT predicate on the "actual_completion_date" field.
func ActualCompletionDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateLTE applies the LTE predicate on the "actual_completion_date" field.
func ActualCompletionDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActualCompletionDate), v))
	})
}

// ActualCompletionDateIsNil applies the IsNil predicate on the "actual_completion_date" field.
func ActualCompletionDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActualCompletionDate)))
	})
}

// ActualCompletionDateNotNil applies the NotNil predicate on the "actual_completion_date" field.
func ActualCompletionDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActualCompletionDate)))
	})
}

// EstimatedMilliSecondsEQ applies the EQ predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsNEQ applies the NEQ predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsIn applies the In predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedMilliSeconds), v...))
	})
}

// EstimatedMilliSecondsNotIn applies the NotIn predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedMilliSeconds), v...))
	})
}

// EstimatedMilliSecondsGT applies the GT predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsGTE applies the GTE predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsLT applies the LT predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsLTE applies the LTE predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedMilliSeconds), v))
	})
}

// EstimatedMilliSecondsIsNil applies the IsNil predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedMilliSeconds)))
	})
}

// EstimatedMilliSecondsNotNil applies the NotNil predicate on the "estimated_milli_seconds" field.
func EstimatedMilliSecondsNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedMilliSeconds)))
	})
}

// EstimatedSetupMillisEQ applies the EQ predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisNEQ applies the NEQ predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisIn applies the In predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedSetupMillis), v...))
	})
}

// EstimatedSetupMillisNotIn applies the NotIn predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedSetupMillis), v...))
	})
}

// EstimatedSetupMillisGT applies the GT predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisGTE applies the GTE predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisLT applies the LT predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisLTE applies the LTE predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedSetupMillis), v))
	})
}

// EstimatedSetupMillisIsNil applies the IsNil predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedSetupMillis)))
	})
}

// EstimatedSetupMillisNotNil applies the NotNil predicate on the "estimated_setup_millis" field.
func EstimatedSetupMillisNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedSetupMillis)))
	})
}

// EstimateCalcMethodEQ applies the EQ predicate on the "estimate_calc_method" field.
func EstimateCalcMethodEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodNEQ applies the NEQ predicate on the "estimate_calc_method" field.
func EstimateCalcMethodNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodIn applies the In predicate on the "estimate_calc_method" field.
func EstimateCalcMethodIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimateCalcMethod), v...))
	})
}

// EstimateCalcMethodNotIn applies the NotIn predicate on the "estimate_calc_method" field.
func EstimateCalcMethodNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimateCalcMethod), v...))
	})
}

// EstimateCalcMethodGT applies the GT predicate on the "estimate_calc_method" field.
func EstimateCalcMethodGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodGTE applies the GTE predicate on the "estimate_calc_method" field.
func EstimateCalcMethodGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodLT applies the LT predicate on the "estimate_calc_method" field.
func EstimateCalcMethodLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodLTE applies the LTE predicate on the "estimate_calc_method" field.
func EstimateCalcMethodLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimateCalcMethod), v))
	})
}

// EstimateCalcMethodIsNil applies the IsNil predicate on the "estimate_calc_method" field.
func EstimateCalcMethodIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimateCalcMethod)))
	})
}

// EstimateCalcMethodNotNil applies the NotNil predicate on the "estimate_calc_method" field.
func EstimateCalcMethodNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimateCalcMethod)))
	})
}

// ActualMilliSecondsEQ applies the EQ predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsNEQ applies the NEQ predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsIn applies the In predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActualMilliSeconds), v...))
	})
}

// ActualMilliSecondsNotIn applies the NotIn predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActualMilliSeconds), v...))
	})
}

// ActualMilliSecondsGT applies the GT predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsGTE applies the GTE predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsLT applies the LT predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsLTE applies the LTE predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActualMilliSeconds), v))
	})
}

// ActualMilliSecondsIsNil applies the IsNil predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActualMilliSeconds)))
	})
}

// ActualMilliSecondsNotNil applies the NotNil predicate on the "actual_milli_seconds" field.
func ActualMilliSecondsNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActualMilliSeconds)))
	})
}

// ActualSetupMillisEQ applies the EQ predicate on the "actual_setup_millis" field.
func ActualSetupMillisEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisNEQ applies the NEQ predicate on the "actual_setup_millis" field.
func ActualSetupMillisNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisIn applies the In predicate on the "actual_setup_millis" field.
func ActualSetupMillisIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActualSetupMillis), v...))
	})
}

// ActualSetupMillisNotIn applies the NotIn predicate on the "actual_setup_millis" field.
func ActualSetupMillisNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActualSetupMillis), v...))
	})
}

// ActualSetupMillisGT applies the GT predicate on the "actual_setup_millis" field.
func ActualSetupMillisGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisGTE applies the GTE predicate on the "actual_setup_millis" field.
func ActualSetupMillisGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisLT applies the LT predicate on the "actual_setup_millis" field.
func ActualSetupMillisLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisLTE applies the LTE predicate on the "actual_setup_millis" field.
func ActualSetupMillisLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActualSetupMillis), v))
	})
}

// ActualSetupMillisIsNil applies the IsNil predicate on the "actual_setup_millis" field.
func ActualSetupMillisIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActualSetupMillis)))
	})
}

// ActualSetupMillisNotNil applies the NotNil predicate on the "actual_setup_millis" field.
func ActualSetupMillisNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActualSetupMillis)))
	})
}

// TotalMilliSecondsAllowedEQ applies the EQ predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedNEQ applies the NEQ predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedIn applies the In predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalMilliSecondsAllowed), v...))
	})
}

// TotalMilliSecondsAllowedNotIn applies the NotIn predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalMilliSecondsAllowed), v...))
	})
}

// TotalMilliSecondsAllowedGT applies the GT predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedGTE applies the GTE predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedLT applies the LT predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedLTE applies the LTE predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalMilliSecondsAllowed), v))
	})
}

// TotalMilliSecondsAllowedIsNil applies the IsNil predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalMilliSecondsAllowed)))
	})
}

// TotalMilliSecondsAllowedNotNil applies the NotNil predicate on the "total_milli_seconds_allowed" field.
func TotalMilliSecondsAllowedNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalMilliSecondsAllowed)))
	})
}

// TotalMoneyAllowedEQ applies the EQ predicate on the "total_money_allowed" field.
func TotalMoneyAllowedEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedNEQ applies the NEQ predicate on the "total_money_allowed" field.
func TotalMoneyAllowedNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedIn applies the In predicate on the "total_money_allowed" field.
func TotalMoneyAllowedIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalMoneyAllowed), v...))
	})
}

// TotalMoneyAllowedNotIn applies the NotIn predicate on the "total_money_allowed" field.
func TotalMoneyAllowedNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalMoneyAllowed), v...))
	})
}

// TotalMoneyAllowedGT applies the GT predicate on the "total_money_allowed" field.
func TotalMoneyAllowedGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedGTE applies the GTE predicate on the "total_money_allowed" field.
func TotalMoneyAllowedGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedLT applies the LT predicate on the "total_money_allowed" field.
func TotalMoneyAllowedLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedLTE applies the LTE predicate on the "total_money_allowed" field.
func TotalMoneyAllowedLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalMoneyAllowed), v))
	})
}

// TotalMoneyAllowedIsNil applies the IsNil predicate on the "total_money_allowed" field.
func TotalMoneyAllowedIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalMoneyAllowed)))
	})
}

// TotalMoneyAllowedNotNil applies the NotNil predicate on the "total_money_allowed" field.
func TotalMoneyAllowedNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalMoneyAllowed)))
	})
}

// MoneyUomIDEQ applies the EQ predicate on the "money_uom_id" field.
func MoneyUomIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDNEQ applies the NEQ predicate on the "money_uom_id" field.
func MoneyUomIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDIn applies the In predicate on the "money_uom_id" field.
func MoneyUomIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoneyUomID), v...))
	})
}

// MoneyUomIDNotIn applies the NotIn predicate on the "money_uom_id" field.
func MoneyUomIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoneyUomID), v...))
	})
}

// MoneyUomIDGT applies the GT predicate on the "money_uom_id" field.
func MoneyUomIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDGTE applies the GTE predicate on the "money_uom_id" field.
func MoneyUomIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDLT applies the LT predicate on the "money_uom_id" field.
func MoneyUomIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDLTE applies the LTE predicate on the "money_uom_id" field.
func MoneyUomIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMoneyUomID), v))
	})
}

// MoneyUomIDIsNil applies the IsNil predicate on the "money_uom_id" field.
func MoneyUomIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMoneyUomID)))
	})
}

// MoneyUomIDNotNil applies the NotNil predicate on the "money_uom_id" field.
func MoneyUomIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMoneyUomID)))
	})
}

// SpecialTermsEQ applies the EQ predicate on the "special_terms" field.
func SpecialTermsEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsNEQ applies the NEQ predicate on the "special_terms" field.
func SpecialTermsNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsIn applies the In predicate on the "special_terms" field.
func SpecialTermsIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpecialTerms), v...))
	})
}

// SpecialTermsNotIn applies the NotIn predicate on the "special_terms" field.
func SpecialTermsNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpecialTerms), v...))
	})
}

// SpecialTermsGT applies the GT predicate on the "special_terms" field.
func SpecialTermsGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsGTE applies the GTE predicate on the "special_terms" field.
func SpecialTermsGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsLT applies the LT predicate on the "special_terms" field.
func SpecialTermsLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsLTE applies the LTE predicate on the "special_terms" field.
func SpecialTermsLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsContains applies the Contains predicate on the "special_terms" field.
func SpecialTermsContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsHasPrefix applies the HasPrefix predicate on the "special_terms" field.
func SpecialTermsHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsHasSuffix applies the HasSuffix predicate on the "special_terms" field.
func SpecialTermsHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsIsNil applies the IsNil predicate on the "special_terms" field.
func SpecialTermsIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpecialTerms)))
	})
}

// SpecialTermsNotNil applies the NotNil predicate on the "special_terms" field.
func SpecialTermsNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpecialTerms)))
	})
}

// SpecialTermsEqualFold applies the EqualFold predicate on the "special_terms" field.
func SpecialTermsEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpecialTerms), v))
	})
}

// SpecialTermsContainsFold applies the ContainsFold predicate on the "special_terms" field.
func SpecialTermsContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpecialTerms), v))
	})
}

// TimeTransparencyEQ applies the EQ predicate on the "time_transparency" field.
func TimeTransparencyEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyNEQ applies the NEQ predicate on the "time_transparency" field.
func TimeTransparencyNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyIn applies the In predicate on the "time_transparency" field.
func TimeTransparencyIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeTransparency), v...))
	})
}

// TimeTransparencyNotIn applies the NotIn predicate on the "time_transparency" field.
func TimeTransparencyNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeTransparency), v...))
	})
}

// TimeTransparencyGT applies the GT predicate on the "time_transparency" field.
func TimeTransparencyGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyGTE applies the GTE predicate on the "time_transparency" field.
func TimeTransparencyGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyLT applies the LT predicate on the "time_transparency" field.
func TimeTransparencyLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyLTE applies the LTE predicate on the "time_transparency" field.
func TimeTransparencyLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeTransparency), v))
	})
}

// TimeTransparencyIsNil applies the IsNil predicate on the "time_transparency" field.
func TimeTransparencyIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeTransparency)))
	})
}

// TimeTransparencyNotNil applies the NotNil predicate on the "time_transparency" field.
func TimeTransparencyNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeTransparency)))
	})
}

// UniversalIDEQ applies the EQ predicate on the "universal_id" field.
func UniversalIDEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUniversalID), v))
	})
}

// UniversalIDNEQ applies the NEQ predicate on the "universal_id" field.
func UniversalIDNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUniversalID), v))
	})
}

// UniversalIDIn applies the In predicate on the "universal_id" field.
func UniversalIDIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUniversalID), v...))
	})
}

// UniversalIDNotIn applies the NotIn predicate on the "universal_id" field.
func UniversalIDNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUniversalID), v...))
	})
}

// UniversalIDGT applies the GT predicate on the "universal_id" field.
func UniversalIDGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUniversalID), v))
	})
}

// UniversalIDGTE applies the GTE predicate on the "universal_id" field.
func UniversalIDGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUniversalID), v))
	})
}

// UniversalIDLT applies the LT predicate on the "universal_id" field.
func UniversalIDLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUniversalID), v))
	})
}

// UniversalIDLTE applies the LTE predicate on the "universal_id" field.
func UniversalIDLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUniversalID), v))
	})
}

// UniversalIDContains applies the Contains predicate on the "universal_id" field.
func UniversalIDContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUniversalID), v))
	})
}

// UniversalIDHasPrefix applies the HasPrefix predicate on the "universal_id" field.
func UniversalIDHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUniversalID), v))
	})
}

// UniversalIDHasSuffix applies the HasSuffix predicate on the "universal_id" field.
func UniversalIDHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUniversalID), v))
	})
}

// UniversalIDIsNil applies the IsNil predicate on the "universal_id" field.
func UniversalIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUniversalID)))
	})
}

// UniversalIDNotNil applies the NotNil predicate on the "universal_id" field.
func UniversalIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUniversalID)))
	})
}

// UniversalIDEqualFold applies the EqualFold predicate on the "universal_id" field.
func UniversalIDEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUniversalID), v))
	})
}

// UniversalIDContainsFold applies the ContainsFold predicate on the "universal_id" field.
func UniversalIDContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUniversalID), v))
	})
}

// SourceReferenceIDEQ applies the EQ predicate on the "source_reference_id" field.
func SourceReferenceIDEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDNEQ applies the NEQ predicate on the "source_reference_id" field.
func SourceReferenceIDNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDIn applies the In predicate on the "source_reference_id" field.
func SourceReferenceIDIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceReferenceID), v...))
	})
}

// SourceReferenceIDNotIn applies the NotIn predicate on the "source_reference_id" field.
func SourceReferenceIDNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceReferenceID), v...))
	})
}

// SourceReferenceIDGT applies the GT predicate on the "source_reference_id" field.
func SourceReferenceIDGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDGTE applies the GTE predicate on the "source_reference_id" field.
func SourceReferenceIDGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDLT applies the LT predicate on the "source_reference_id" field.
func SourceReferenceIDLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDLTE applies the LTE predicate on the "source_reference_id" field.
func SourceReferenceIDLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDContains applies the Contains predicate on the "source_reference_id" field.
func SourceReferenceIDContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDHasPrefix applies the HasPrefix predicate on the "source_reference_id" field.
func SourceReferenceIDHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDHasSuffix applies the HasSuffix predicate on the "source_reference_id" field.
func SourceReferenceIDHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDIsNil applies the IsNil predicate on the "source_reference_id" field.
func SourceReferenceIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceReferenceID)))
	})
}

// SourceReferenceIDNotNil applies the NotNil predicate on the "source_reference_id" field.
func SourceReferenceIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceReferenceID)))
	})
}

// SourceReferenceIDEqualFold applies the EqualFold predicate on the "source_reference_id" field.
func SourceReferenceIDEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceReferenceID), v))
	})
}

// SourceReferenceIDContainsFold applies the ContainsFold predicate on the "source_reference_id" field.
func SourceReferenceIDContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceReferenceID), v))
	})
}

// FacilityIDEQ applies the EQ predicate on the "facility_id" field.
func FacilityIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDNEQ applies the NEQ predicate on the "facility_id" field.
func FacilityIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIn applies the In predicate on the "facility_id" field.
func FacilityIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDNotIn applies the NotIn predicate on the "facility_id" field.
func FacilityIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDGT applies the GT predicate on the "facility_id" field.
func FacilityIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDGTE applies the GTE predicate on the "facility_id" field.
func FacilityIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLT applies the LT predicate on the "facility_id" field.
func FacilityIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLTE applies the LTE predicate on the "facility_id" field.
func FacilityIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIsNil applies the IsNil predicate on the "facility_id" field.
func FacilityIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacilityID)))
	})
}

// FacilityIDNotNil applies the NotNil predicate on the "facility_id" field.
func FacilityIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacilityID)))
	})
}

// InfoURLEQ applies the EQ predicate on the "info_url" field.
func InfoURLEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfoURL), v))
	})
}

// InfoURLNEQ applies the NEQ predicate on the "info_url" field.
func InfoURLNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInfoURL), v))
	})
}

// InfoURLIn applies the In predicate on the "info_url" field.
func InfoURLIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInfoURL), v...))
	})
}

// InfoURLNotIn applies the NotIn predicate on the "info_url" field.
func InfoURLNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInfoURL), v...))
	})
}

// InfoURLGT applies the GT predicate on the "info_url" field.
func InfoURLGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInfoURL), v))
	})
}

// InfoURLGTE applies the GTE predicate on the "info_url" field.
func InfoURLGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInfoURL), v))
	})
}

// InfoURLLT applies the LT predicate on the "info_url" field.
func InfoURLLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInfoURL), v))
	})
}

// InfoURLLTE applies the LTE predicate on the "info_url" field.
func InfoURLLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInfoURL), v))
	})
}

// InfoURLContains applies the Contains predicate on the "info_url" field.
func InfoURLContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInfoURL), v))
	})
}

// InfoURLHasPrefix applies the HasPrefix predicate on the "info_url" field.
func InfoURLHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInfoURL), v))
	})
}

// InfoURLHasSuffix applies the HasSuffix predicate on the "info_url" field.
func InfoURLHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInfoURL), v))
	})
}

// InfoURLIsNil applies the IsNil predicate on the "info_url" field.
func InfoURLIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInfoURL)))
	})
}

// InfoURLNotNil applies the NotNil predicate on the "info_url" field.
func InfoURLNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInfoURL)))
	})
}

// InfoURLEqualFold applies the EqualFold predicate on the "info_url" field.
func InfoURLEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInfoURL), v))
	})
}

// InfoURLContainsFold applies the ContainsFold predicate on the "info_url" field.
func InfoURLContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInfoURL), v))
	})
}

// RecurrenceInfoIDEQ applies the EQ predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDNEQ applies the NEQ predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDIn applies the In predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecurrenceInfoID), v...))
	})
}

// RecurrenceInfoIDNotIn applies the NotIn predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecurrenceInfoID), v...))
	})
}

// RecurrenceInfoIDGT applies the GT predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDGTE applies the GTE predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDLT applies the LT predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDLTE applies the LTE predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecurrenceInfoID), v))
	})
}

// RecurrenceInfoIDIsNil applies the IsNil predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecurrenceInfoID)))
	})
}

// RecurrenceInfoIDNotNil applies the NotNil predicate on the "recurrence_info_id" field.
func RecurrenceInfoIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecurrenceInfoID)))
	})
}

// RuntimeDataIDEQ applies the EQ predicate on the "runtime_data_id" field.
func RuntimeDataIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDNEQ applies the NEQ predicate on the "runtime_data_id" field.
func RuntimeDataIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDIn applies the In predicate on the "runtime_data_id" field.
func RuntimeDataIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRuntimeDataID), v...))
	})
}

// RuntimeDataIDNotIn applies the NotIn predicate on the "runtime_data_id" field.
func RuntimeDataIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRuntimeDataID), v...))
	})
}

// RuntimeDataIDGT applies the GT predicate on the "runtime_data_id" field.
func RuntimeDataIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDGTE applies the GTE predicate on the "runtime_data_id" field.
func RuntimeDataIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDLT applies the LT predicate on the "runtime_data_id" field.
func RuntimeDataIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDLTE applies the LTE predicate on the "runtime_data_id" field.
func RuntimeDataIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRuntimeDataID), v))
	})
}

// RuntimeDataIDIsNil applies the IsNil predicate on the "runtime_data_id" field.
func RuntimeDataIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRuntimeDataID)))
	})
}

// RuntimeDataIDNotNil applies the NotNil predicate on the "runtime_data_id" field.
func RuntimeDataIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRuntimeDataID)))
	})
}

// NoteIDEQ applies the EQ predicate on the "note_id" field.
func NoteIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoteID), v))
	})
}

// NoteIDNEQ applies the NEQ predicate on the "note_id" field.
func NoteIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoteID), v))
	})
}

// NoteIDIn applies the In predicate on the "note_id" field.
func NoteIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoteID), v...))
	})
}

// NoteIDNotIn applies the NotIn predicate on the "note_id" field.
func NoteIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoteID), v...))
	})
}

// NoteIDGT applies the GT predicate on the "note_id" field.
func NoteIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoteID), v))
	})
}

// NoteIDGTE applies the GTE predicate on the "note_id" field.
func NoteIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoteID), v))
	})
}

// NoteIDLT applies the LT predicate on the "note_id" field.
func NoteIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoteID), v))
	})
}

// NoteIDLTE applies the LTE predicate on the "note_id" field.
func NoteIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoteID), v))
	})
}

// NoteIDIsNil applies the IsNil predicate on the "note_id" field.
func NoteIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoteID)))
	})
}

// NoteIDNotNil applies the NotNil predicate on the "note_id" field.
func NoteIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoteID)))
	})
}

// ServiceLoaderNameEQ applies the EQ predicate on the "service_loader_name" field.
func ServiceLoaderNameEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameNEQ applies the NEQ predicate on the "service_loader_name" field.
func ServiceLoaderNameNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameIn applies the In predicate on the "service_loader_name" field.
func ServiceLoaderNameIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceLoaderName), v...))
	})
}

// ServiceLoaderNameNotIn applies the NotIn predicate on the "service_loader_name" field.
func ServiceLoaderNameNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceLoaderName), v...))
	})
}

// ServiceLoaderNameGT applies the GT predicate on the "service_loader_name" field.
func ServiceLoaderNameGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameGTE applies the GTE predicate on the "service_loader_name" field.
func ServiceLoaderNameGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameLT applies the LT predicate on the "service_loader_name" field.
func ServiceLoaderNameLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameLTE applies the LTE predicate on the "service_loader_name" field.
func ServiceLoaderNameLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameContains applies the Contains predicate on the "service_loader_name" field.
func ServiceLoaderNameContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameHasPrefix applies the HasPrefix predicate on the "service_loader_name" field.
func ServiceLoaderNameHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameHasSuffix applies the HasSuffix predicate on the "service_loader_name" field.
func ServiceLoaderNameHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameIsNil applies the IsNil predicate on the "service_loader_name" field.
func ServiceLoaderNameIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldServiceLoaderName)))
	})
}

// ServiceLoaderNameNotNil applies the NotNil predicate on the "service_loader_name" field.
func ServiceLoaderNameNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldServiceLoaderName)))
	})
}

// ServiceLoaderNameEqualFold applies the EqualFold predicate on the "service_loader_name" field.
func ServiceLoaderNameEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceLoaderName), v))
	})
}

// ServiceLoaderNameContainsFold applies the ContainsFold predicate on the "service_loader_name" field.
func ServiceLoaderNameContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceLoaderName), v))
	})
}

// QuantityToProduceEQ applies the EQ predicate on the "quantity_to_produce" field.
func QuantityToProduceEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceNEQ applies the NEQ predicate on the "quantity_to_produce" field.
func QuantityToProduceNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceIn applies the In predicate on the "quantity_to_produce" field.
func QuantityToProduceIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityToProduce), v...))
	})
}

// QuantityToProduceNotIn applies the NotIn predicate on the "quantity_to_produce" field.
func QuantityToProduceNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityToProduce), v...))
	})
}

// QuantityToProduceGT applies the GT predicate on the "quantity_to_produce" field.
func QuantityToProduceGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceGTE applies the GTE predicate on the "quantity_to_produce" field.
func QuantityToProduceGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceLT applies the LT predicate on the "quantity_to_produce" field.
func QuantityToProduceLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceLTE applies the LTE predicate on the "quantity_to_produce" field.
func QuantityToProduceLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityToProduce), v))
	})
}

// QuantityToProduceIsNil applies the IsNil predicate on the "quantity_to_produce" field.
func QuantityToProduceIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityToProduce)))
	})
}

// QuantityToProduceNotNil applies the NotNil predicate on the "quantity_to_produce" field.
func QuantityToProduceNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityToProduce)))
	})
}

// QuantityProducedEQ applies the EQ predicate on the "quantity_produced" field.
func QuantityProducedEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedNEQ applies the NEQ predicate on the "quantity_produced" field.
func QuantityProducedNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedIn applies the In predicate on the "quantity_produced" field.
func QuantityProducedIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityProduced), v...))
	})
}

// QuantityProducedNotIn applies the NotIn predicate on the "quantity_produced" field.
func QuantityProducedNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityProduced), v...))
	})
}

// QuantityProducedGT applies the GT predicate on the "quantity_produced" field.
func QuantityProducedGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedGTE applies the GTE predicate on the "quantity_produced" field.
func QuantityProducedGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedLT applies the LT predicate on the "quantity_produced" field.
func QuantityProducedLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedLTE applies the LTE predicate on the "quantity_produced" field.
func QuantityProducedLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityProduced), v))
	})
}

// QuantityProducedIsNil applies the IsNil predicate on the "quantity_produced" field.
func QuantityProducedIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityProduced)))
	})
}

// QuantityProducedNotNil applies the NotNil predicate on the "quantity_produced" field.
func QuantityProducedNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityProduced)))
	})
}

// QuantityRejectedEQ applies the EQ predicate on the "quantity_rejected" field.
func QuantityRejectedEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedNEQ applies the NEQ predicate on the "quantity_rejected" field.
func QuantityRejectedNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedIn applies the In predicate on the "quantity_rejected" field.
func QuantityRejectedIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantityRejected), v...))
	})
}

// QuantityRejectedNotIn applies the NotIn predicate on the "quantity_rejected" field.
func QuantityRejectedNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantityRejected), v...))
	})
}

// QuantityRejectedGT applies the GT predicate on the "quantity_rejected" field.
func QuantityRejectedGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedGTE applies the GTE predicate on the "quantity_rejected" field.
func QuantityRejectedGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedLT applies the LT predicate on the "quantity_rejected" field.
func QuantityRejectedLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedLTE applies the LTE predicate on the "quantity_rejected" field.
func QuantityRejectedLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantityRejected), v))
	})
}

// QuantityRejectedIsNil applies the IsNil predicate on the "quantity_rejected" field.
func QuantityRejectedIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuantityRejected)))
	})
}

// QuantityRejectedNotNil applies the NotNil predicate on the "quantity_rejected" field.
func QuantityRejectedNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuantityRejected)))
	})
}

// ReservPersonsEQ applies the EQ predicate on the "reserv_persons" field.
func ReservPersonsEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsNEQ applies the NEQ predicate on the "reserv_persons" field.
func ReservPersonsNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsIn applies the In predicate on the "reserv_persons" field.
func ReservPersonsIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReservPersons), v...))
	})
}

// ReservPersonsNotIn applies the NotIn predicate on the "reserv_persons" field.
func ReservPersonsNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReservPersons), v...))
	})
}

// ReservPersonsGT applies the GT predicate on the "reserv_persons" field.
func ReservPersonsGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsGTE applies the GTE predicate on the "reserv_persons" field.
func ReservPersonsGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsLT applies the LT predicate on the "reserv_persons" field.
func ReservPersonsLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsLTE applies the LTE predicate on the "reserv_persons" field.
func ReservPersonsLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservPersons), v))
	})
}

// ReservPersonsIsNil applies the IsNil predicate on the "reserv_persons" field.
func ReservPersonsIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservPersons)))
	})
}

// ReservPersonsNotNil applies the NotNil predicate on the "reserv_persons" field.
func ReservPersonsNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservPersons)))
	})
}

// Reserv2NdPpPercEQ applies the EQ predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercNEQ applies the NEQ predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercIn applies the In predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserv2NdPpPerc), v...))
	})
}

// Reserv2NdPpPercNotIn applies the NotIn predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserv2NdPpPerc), v...))
	})
}

// Reserv2NdPpPercGT applies the GT predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercGTE applies the GTE predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercLT applies the LT predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercLTE applies the LTE predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserv2NdPpPerc), v))
	})
}

// Reserv2NdPpPercIsNil applies the IsNil predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserv2NdPpPerc)))
	})
}

// Reserv2NdPpPercNotNil applies the NotNil predicate on the "reserv_2_nd_pp_perc" field.
func Reserv2NdPpPercNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserv2NdPpPerc)))
	})
}

// ReservNthPpPercEQ applies the EQ predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercNEQ applies the NEQ predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNEQ(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercIn applies the In predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReservNthPpPerc), v...))
	})
}

// ReservNthPpPercNotIn applies the NotIn predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNotIn(vs ...float64) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReservNthPpPerc), v...))
	})
}

// ReservNthPpPercGT applies the GT predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercGT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercGTE applies the GTE predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercGTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercLT applies the LT predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercLT(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercLTE applies the LTE predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercLTE(v float64) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReservNthPpPerc), v))
	})
}

// ReservNthPpPercIsNil applies the IsNil predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservNthPpPerc)))
	})
}

// ReservNthPpPercNotNil applies the NotNil predicate on the "reserv_nth_pp_perc" field.
func ReservNthPpPercNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservNthPpPerc)))
	})
}

// AccommodationMapIDEQ applies the EQ predicate on the "accommodation_map_id" field.
func AccommodationMapIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDNEQ applies the NEQ predicate on the "accommodation_map_id" field.
func AccommodationMapIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDIn applies the In predicate on the "accommodation_map_id" field.
func AccommodationMapIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccommodationMapID), v...))
	})
}

// AccommodationMapIDNotIn applies the NotIn predicate on the "accommodation_map_id" field.
func AccommodationMapIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccommodationMapID), v...))
	})
}

// AccommodationMapIDGT applies the GT predicate on the "accommodation_map_id" field.
func AccommodationMapIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDGTE applies the GTE predicate on the "accommodation_map_id" field.
func AccommodationMapIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDLT applies the LT predicate on the "accommodation_map_id" field.
func AccommodationMapIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDLTE applies the LTE predicate on the "accommodation_map_id" field.
func AccommodationMapIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccommodationMapID), v))
	})
}

// AccommodationMapIDIsNil applies the IsNil predicate on the "accommodation_map_id" field.
func AccommodationMapIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccommodationMapID)))
	})
}

// AccommodationMapIDNotNil applies the NotNil predicate on the "accommodation_map_id" field.
func AccommodationMapIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccommodationMapID)))
	})
}

// AccommodationSpotIDEQ applies the EQ predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDNEQ applies the NEQ predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDIn applies the In predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccommodationSpotID), v...))
	})
}

// AccommodationSpotIDNotIn applies the NotIn predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccommodationSpotID), v...))
	})
}

// AccommodationSpotIDGT applies the GT predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDGTE applies the GTE predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDLT applies the LT predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDLTE applies the LTE predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccommodationSpotID), v))
	})
}

// AccommodationSpotIDIsNil applies the IsNil predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccommodationSpotID)))
	})
}

// AccommodationSpotIDNotNil applies the NotNil predicate on the "accommodation_spot_id" field.
func AccommodationSpotIDNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccommodationSpotID)))
	})
}

// RevisionNumberEQ applies the EQ predicate on the "revision_number" field.
func RevisionNumberEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberNEQ applies the NEQ predicate on the "revision_number" field.
func RevisionNumberNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberIn applies the In predicate on the "revision_number" field.
func RevisionNumberIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRevisionNumber), v...))
	})
}

// RevisionNumberNotIn applies the NotIn predicate on the "revision_number" field.
func RevisionNumberNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRevisionNumber), v...))
	})
}

// RevisionNumberGT applies the GT predicate on the "revision_number" field.
func RevisionNumberGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberGTE applies the GTE predicate on the "revision_number" field.
func RevisionNumberGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberLT applies the LT predicate on the "revision_number" field.
func RevisionNumberLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberLTE applies the LTE predicate on the "revision_number" field.
func RevisionNumberLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRevisionNumber), v))
	})
}

// RevisionNumberIsNil applies the IsNil predicate on the "revision_number" field.
func RevisionNumberIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRevisionNumber)))
	})
}

// RevisionNumberNotNil applies the NotNil predicate on the "revision_number" field.
func RevisionNumberNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRevisionNumber)))
	})
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDate), v...))
	})
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDate), v))
	})
}

// CreatedDateIsNil applies the IsNil predicate on the "created_date" field.
func CreatedDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedDate)))
	})
}

// CreatedDateNotNil applies the NotNil predicate on the "created_date" field.
func CreatedDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedDate)))
	})
}

// CreatedByUserLoginEQ applies the EQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginNEQ applies the NEQ predicate on the "created_by_user_login" field.
func CreatedByUserLoginNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIn applies the In predicate on the "created_by_user_login" field.
func CreatedByUserLoginIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginNotIn applies the NotIn predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedByUserLogin), v...))
	})
}

// CreatedByUserLoginGT applies the GT predicate on the "created_by_user_login" field.
func CreatedByUserLoginGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginGTE applies the GTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLT applies the LT predicate on the "created_by_user_login" field.
func CreatedByUserLoginLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginLTE applies the LTE predicate on the "created_by_user_login" field.
func CreatedByUserLoginLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContains applies the Contains predicate on the "created_by_user_login" field.
func CreatedByUserLoginContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasPrefix applies the HasPrefix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginHasSuffix applies the HasSuffix predicate on the "created_by_user_login" field.
func CreatedByUserLoginHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginIsNil applies the IsNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginNotNil applies the NotNil predicate on the "created_by_user_login" field.
func CreatedByUserLoginNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByUserLogin)))
	})
}

// CreatedByUserLoginEqualFold applies the EqualFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// CreatedByUserLoginContainsFold applies the ContainsFold predicate on the "created_by_user_login" field.
func CreatedByUserLoginContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedByUserLogin), v))
	})
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedDate), v...))
	})
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedDate), v))
	})
}

// LastModifiedDateIsNil applies the IsNil predicate on the "last_modified_date" field.
func LastModifiedDateIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedDateNotNil applies the NotNil predicate on the "last_modified_date" field.
func LastModifiedDateNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedDate)))
	})
}

// LastModifiedByUserLoginEQ applies the EQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginNEQ applies the NEQ predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNEQ(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIn applies the In predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginNotIn applies the NotIn predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotIn(vs ...string) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModifiedByUserLogin), v...))
	})
}

// LastModifiedByUserLoginGT applies the GT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginGTE applies the GTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginGTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLT applies the LT predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLT(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginLTE applies the LTE predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginLTE(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContains applies the Contains predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContains(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasPrefix applies the HasPrefix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasPrefix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginHasSuffix applies the HasSuffix predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginHasSuffix(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginIsNil applies the IsNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginNotNil applies the NotNil predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifiedByUserLogin)))
	})
}

// LastModifiedByUserLoginEqualFold applies the EqualFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginEqualFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// LastModifiedByUserLoginContainsFold applies the ContainsFold predicate on the "last_modified_by_user_login" field.
func LastModifiedByUserLoginContainsFold(v string) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastModifiedByUserLogin), v))
	})
}

// SequenceNumEQ applies the EQ predicate on the "sequence_num" field.
func SequenceNumEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumNEQ applies the NEQ predicate on the "sequence_num" field.
func SequenceNumNEQ(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumIn applies the In predicate on the "sequence_num" field.
func SequenceNumIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequenceNum), v...))
	})
}

// SequenceNumNotIn applies the NotIn predicate on the "sequence_num" field.
func SequenceNumNotIn(vs ...int) predicate.WorkEffort {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffort(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequenceNum), v...))
	})
}

// SequenceNumGT applies the GT predicate on the "sequence_num" field.
func SequenceNumGT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumGTE applies the GTE predicate on the "sequence_num" field.
func SequenceNumGTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumLT applies the LT predicate on the "sequence_num" field.
func SequenceNumLT(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumLTE applies the LTE predicate on the "sequence_num" field.
func SequenceNumLTE(v int) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequenceNum), v))
	})
}

// SequenceNumIsNil applies the IsNil predicate on the "sequence_num" field.
func SequenceNumIsNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSequenceNum)))
	})
}

// SequenceNumNotNil applies the NotNil predicate on the "sequence_num" field.
func SequenceNumNotNil() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSequenceNum)))
	})
}

// HasWorkEffortType applies the HasEdge predicate on the "work_effort_type" edge.
func HasWorkEffortType() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTypeTable, WorkEffortTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortTypeWith applies the HasEdge predicate on the "work_effort_type" edge with a given conditions (other predicates).
func HasWorkEffortTypeWith(preds ...predicate.WorkEffortType) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTypeTable, WorkEffortTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentStatusItem applies the HasEdge predicate on the "current_status_item" edge.
func HasCurrentStatusItem() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrentStatusItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrentStatusItemTable, CurrentStatusItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentStatusItemWith applies the HasEdge predicate on the "current_status_item" edge with a given conditions (other predicates).
func HasCurrentStatusItemWith(preds ...predicate.StatusItem) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrentStatusItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrentStatusItemTable, CurrentStatusItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFixedAsset applies the HasEdge predicate on the "fixed_asset" edge.
func HasFixedAsset() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixedAssetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FixedAssetTable, FixedAssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixedAssetWith applies the HasEdge predicate on the "fixed_asset" edge with a given conditions (other predicates).
func HasFixedAssetWith(preds ...predicate.FixedAsset) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixedAssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FixedAssetTable, FixedAssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemporalExpression applies the HasEdge predicate on the "temporal_expression" edge.
func HasTemporalExpression() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemporalExpressionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemporalExpressionTable, TemporalExpressionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemporalExpressionWith applies the HasEdge predicate on the "temporal_expression" edge with a given conditions (other predicates).
func HasTemporalExpressionWith(preds ...predicate.TemporalExpression) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemporalExpressionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemporalExpressionTable, TemporalExpressionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildWorkEfforts applies the HasEdge predicate on the "child_work_efforts" edge.
func HasChildWorkEfforts() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildWorkEffortsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChildWorkEffortsTable, ChildWorkEffortsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWorkEffortsWith applies the HasEdge predicate on the "child_work_efforts" edge with a given conditions (other predicates).
func HasChildWorkEffortsWith(preds ...predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChildWorkEffortsTable, ChildWorkEffortsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromWorkEffortAssocs applies the HasEdge predicate on the "from_work_effort_assocs" edge.
func HasFromWorkEffortAssocs() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromWorkEffortAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FromWorkEffortAssocsTable, FromWorkEffortAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromWorkEffortAssocsWith applies the HasEdge predicate on the "from_work_effort_assocs" edge with a given conditions (other predicates).
func HasFromWorkEffortAssocsWith(preds ...predicate.WorkEffortAssoc) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromWorkEffortAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FromWorkEffortAssocsTable, FromWorkEffortAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToWorkEffortAssocs applies the HasEdge predicate on the "to_work_effort_assocs" edge.
func HasToWorkEffortAssocs() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToWorkEffortAssocsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToWorkEffortAssocsTable, ToWorkEffortAssocsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToWorkEffortAssocsWith applies the HasEdge predicate on the "to_work_effort_assocs" edge with a given conditions (other predicates).
func HasToWorkEffortAssocsWith(preds ...predicate.WorkEffortAssoc) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ToWorkEffortAssocsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToWorkEffortAssocsTable, ToWorkEffortAssocsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEffortFixedAssetAssigns applies the HasEdge predicate on the "work_effort_fixed_asset_assigns" edge.
func HasWorkEffortFixedAssetAssigns() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortFixedAssetAssignsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortFixedAssetAssignsTable, WorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortFixedAssetAssignsWith applies the HasEdge predicate on the "work_effort_fixed_asset_assigns" edge with a given conditions (other predicates).
func HasWorkEffortFixedAssetAssignsWith(preds ...predicate.WorkEffortFixedAssetAssign) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortFixedAssetAssignsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortFixedAssetAssignsTable, WorkEffortFixedAssetAssignsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEffortPartyAssignments applies the HasEdge predicate on the "work_effort_party_assignments" edge.
func HasWorkEffortPartyAssignments() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortPartyAssignmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortPartyAssignmentsTable, WorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortPartyAssignmentsWith applies the HasEdge predicate on the "work_effort_party_assignments" edge with a given conditions (other predicates).
func HasWorkEffortPartyAssignmentsWith(preds ...predicate.WorkEffortPartyAssignment) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortPartyAssignmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortPartyAssignmentsTable, WorkEffortPartyAssignmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkEffortSkillStandards applies the HasEdge predicate on the "work_effort_skill_standards" edge.
func HasWorkEffortSkillStandards() predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortSkillStandardsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortSkillStandardsTable, WorkEffortSkillStandardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortSkillStandardsWith applies the HasEdge predicate on the "work_effort_skill_standards" edge with a given conditions (other predicates).
func HasWorkEffortSkillStandardsWith(preds ...predicate.WorkEffortSkillStandard) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortSkillStandardsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkEffortSkillStandardsTable, WorkEffortSkillStandardsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkEffort) predicate.WorkEffort {
	return predicate.WorkEffort(func(s *sql.Selector) {
		p(s.Not())
	})
}
