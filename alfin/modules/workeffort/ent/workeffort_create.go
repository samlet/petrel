// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortCreate is the builder for creating a WorkEffort entity.
type WorkEffortCreate struct {
	config
	mutation *WorkEffortMutation
	hooks    []Hook
}

// SetWorkEffortTypeID sets the "work_effort_type_id" field.
func (wec *WorkEffortCreate) SetWorkEffortTypeID(i int) *WorkEffortCreate {
	wec.mutation.SetWorkEffortTypeID(i)
	return wec
}

// SetNillableWorkEffortTypeID sets the "work_effort_type_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableWorkEffortTypeID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetWorkEffortTypeID(*i)
	}
	return wec
}

// SetCurrentStatusID sets the "current_status_id" field.
func (wec *WorkEffortCreate) SetCurrentStatusID(i int) *WorkEffortCreate {
	wec.mutation.SetCurrentStatusID(i)
	return wec
}

// SetNillableCurrentStatusID sets the "current_status_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableCurrentStatusID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetCurrentStatusID(*i)
	}
	return wec
}

// SetLastStatusUpdate sets the "last_status_update" field.
func (wec *WorkEffortCreate) SetLastStatusUpdate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetLastStatusUpdate(t)
	return wec
}

// SetNillableLastStatusUpdate sets the "last_status_update" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableLastStatusUpdate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetLastStatusUpdate(*t)
	}
	return wec
}

// SetWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field.
func (wec *WorkEffortCreate) SetWorkEffortPurposeTypeID(i int) *WorkEffortCreate {
	wec.mutation.SetWorkEffortPurposeTypeID(i)
	return wec
}

// SetNillableWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableWorkEffortPurposeTypeID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetWorkEffortPurposeTypeID(*i)
	}
	return wec
}

// SetScopeEnumID sets the "scope_enum_id" field.
func (wec *WorkEffortCreate) SetScopeEnumID(i int) *WorkEffortCreate {
	wec.mutation.SetScopeEnumID(i)
	return wec
}

// SetNillableScopeEnumID sets the "scope_enum_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableScopeEnumID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetScopeEnumID(*i)
	}
	return wec
}

// SetPriority sets the "priority" field.
func (wec *WorkEffortCreate) SetPriority(i int) *WorkEffortCreate {
	wec.mutation.SetPriority(i)
	return wec
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillablePriority(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetPriority(*i)
	}
	return wec
}

// SetPercentComplete sets the "percent_complete" field.
func (wec *WorkEffortCreate) SetPercentComplete(i int) *WorkEffortCreate {
	wec.mutation.SetPercentComplete(i)
	return wec
}

// SetNillablePercentComplete sets the "percent_complete" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillablePercentComplete(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetPercentComplete(*i)
	}
	return wec
}

// SetWorkEffortName sets the "work_effort_name" field.
func (wec *WorkEffortCreate) SetWorkEffortName(s string) *WorkEffortCreate {
	wec.mutation.SetWorkEffortName(s)
	return wec
}

// SetNillableWorkEffortName sets the "work_effort_name" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableWorkEffortName(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetWorkEffortName(*s)
	}
	return wec
}

// SetShowAsEnumID sets the "show_as_enum_id" field.
func (wec *WorkEffortCreate) SetShowAsEnumID(i int) *WorkEffortCreate {
	wec.mutation.SetShowAsEnumID(i)
	return wec
}

// SetNillableShowAsEnumID sets the "show_as_enum_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableShowAsEnumID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetShowAsEnumID(*i)
	}
	return wec
}

// SetSendNotificationEmail sets the "send_notification_email" field.
func (wec *WorkEffortCreate) SetSendNotificationEmail(wne workeffort.SendNotificationEmail) *WorkEffortCreate {
	wec.mutation.SetSendNotificationEmail(wne)
	return wec
}

// SetNillableSendNotificationEmail sets the "send_notification_email" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableSendNotificationEmail(wne *workeffort.SendNotificationEmail) *WorkEffortCreate {
	if wne != nil {
		wec.SetSendNotificationEmail(*wne)
	}
	return wec
}

// SetDescription sets the "description" field.
func (wec *WorkEffortCreate) SetDescription(s string) *WorkEffortCreate {
	wec.mutation.SetDescription(s)
	return wec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableDescription(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetDescription(*s)
	}
	return wec
}

// SetLocationDesc sets the "location_desc" field.
func (wec *WorkEffortCreate) SetLocationDesc(s string) *WorkEffortCreate {
	wec.mutation.SetLocationDesc(s)
	return wec
}

// SetNillableLocationDesc sets the "location_desc" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableLocationDesc(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetLocationDesc(*s)
	}
	return wec
}

// SetEstimatedStartDate sets the "estimated_start_date" field.
func (wec *WorkEffortCreate) SetEstimatedStartDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetEstimatedStartDate(t)
	return wec
}

// SetNillableEstimatedStartDate sets the "estimated_start_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableEstimatedStartDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetEstimatedStartDate(*t)
	}
	return wec
}

// SetEstimatedCompletionDate sets the "estimated_completion_date" field.
func (wec *WorkEffortCreate) SetEstimatedCompletionDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetEstimatedCompletionDate(t)
	return wec
}

// SetNillableEstimatedCompletionDate sets the "estimated_completion_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableEstimatedCompletionDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetEstimatedCompletionDate(*t)
	}
	return wec
}

// SetActualStartDate sets the "actual_start_date" field.
func (wec *WorkEffortCreate) SetActualStartDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetActualStartDate(t)
	return wec
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableActualStartDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetActualStartDate(*t)
	}
	return wec
}

// SetActualCompletionDate sets the "actual_completion_date" field.
func (wec *WorkEffortCreate) SetActualCompletionDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetActualCompletionDate(t)
	return wec
}

// SetNillableActualCompletionDate sets the "actual_completion_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableActualCompletionDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetActualCompletionDate(*t)
	}
	return wec
}

// SetEstimatedMilliSeconds sets the "estimated_milli_seconds" field.
func (wec *WorkEffortCreate) SetEstimatedMilliSeconds(f float64) *WorkEffortCreate {
	wec.mutation.SetEstimatedMilliSeconds(f)
	return wec
}

// SetNillableEstimatedMilliSeconds sets the "estimated_milli_seconds" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableEstimatedMilliSeconds(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetEstimatedMilliSeconds(*f)
	}
	return wec
}

// SetEstimatedSetupMillis sets the "estimated_setup_millis" field.
func (wec *WorkEffortCreate) SetEstimatedSetupMillis(f float64) *WorkEffortCreate {
	wec.mutation.SetEstimatedSetupMillis(f)
	return wec
}

// SetNillableEstimatedSetupMillis sets the "estimated_setup_millis" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableEstimatedSetupMillis(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetEstimatedSetupMillis(*f)
	}
	return wec
}

// SetEstimateCalcMethod sets the "estimate_calc_method" field.
func (wec *WorkEffortCreate) SetEstimateCalcMethod(i int) *WorkEffortCreate {
	wec.mutation.SetEstimateCalcMethod(i)
	return wec
}

// SetNillableEstimateCalcMethod sets the "estimate_calc_method" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableEstimateCalcMethod(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetEstimateCalcMethod(*i)
	}
	return wec
}

// SetActualMilliSeconds sets the "actual_milli_seconds" field.
func (wec *WorkEffortCreate) SetActualMilliSeconds(f float64) *WorkEffortCreate {
	wec.mutation.SetActualMilliSeconds(f)
	return wec
}

// SetNillableActualMilliSeconds sets the "actual_milli_seconds" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableActualMilliSeconds(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetActualMilliSeconds(*f)
	}
	return wec
}

// SetActualSetupMillis sets the "actual_setup_millis" field.
func (wec *WorkEffortCreate) SetActualSetupMillis(f float64) *WorkEffortCreate {
	wec.mutation.SetActualSetupMillis(f)
	return wec
}

// SetNillableActualSetupMillis sets the "actual_setup_millis" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableActualSetupMillis(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetActualSetupMillis(*f)
	}
	return wec
}

// SetTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field.
func (wec *WorkEffortCreate) SetTotalMilliSecondsAllowed(f float64) *WorkEffortCreate {
	wec.mutation.SetTotalMilliSecondsAllowed(f)
	return wec
}

// SetNillableTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableTotalMilliSecondsAllowed(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetTotalMilliSecondsAllowed(*f)
	}
	return wec
}

// SetTotalMoneyAllowed sets the "total_money_allowed" field.
func (wec *WorkEffortCreate) SetTotalMoneyAllowed(f float64) *WorkEffortCreate {
	wec.mutation.SetTotalMoneyAllowed(f)
	return wec
}

// SetNillableTotalMoneyAllowed sets the "total_money_allowed" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableTotalMoneyAllowed(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetTotalMoneyAllowed(*f)
	}
	return wec
}

// SetMoneyUomID sets the "money_uom_id" field.
func (wec *WorkEffortCreate) SetMoneyUomID(i int) *WorkEffortCreate {
	wec.mutation.SetMoneyUomID(i)
	return wec
}

// SetNillableMoneyUomID sets the "money_uom_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableMoneyUomID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetMoneyUomID(*i)
	}
	return wec
}

// SetSpecialTerms sets the "special_terms" field.
func (wec *WorkEffortCreate) SetSpecialTerms(s string) *WorkEffortCreate {
	wec.mutation.SetSpecialTerms(s)
	return wec
}

// SetNillableSpecialTerms sets the "special_terms" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableSpecialTerms(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetSpecialTerms(*s)
	}
	return wec
}

// SetTimeTransparency sets the "time_transparency" field.
func (wec *WorkEffortCreate) SetTimeTransparency(i int) *WorkEffortCreate {
	wec.mutation.SetTimeTransparency(i)
	return wec
}

// SetNillableTimeTransparency sets the "time_transparency" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableTimeTransparency(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetTimeTransparency(*i)
	}
	return wec
}

// SetUniversalID sets the "universal_id" field.
func (wec *WorkEffortCreate) SetUniversalID(s string) *WorkEffortCreate {
	wec.mutation.SetUniversalID(s)
	return wec
}

// SetNillableUniversalID sets the "universal_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableUniversalID(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetUniversalID(*s)
	}
	return wec
}

// SetSourceReferenceID sets the "source_reference_id" field.
func (wec *WorkEffortCreate) SetSourceReferenceID(s string) *WorkEffortCreate {
	wec.mutation.SetSourceReferenceID(s)
	return wec
}

// SetNillableSourceReferenceID sets the "source_reference_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableSourceReferenceID(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetSourceReferenceID(*s)
	}
	return wec
}

// SetFacilityID sets the "facility_id" field.
func (wec *WorkEffortCreate) SetFacilityID(i int) *WorkEffortCreate {
	wec.mutation.SetFacilityID(i)
	return wec
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableFacilityID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetFacilityID(*i)
	}
	return wec
}

// SetInfoURL sets the "info_url" field.
func (wec *WorkEffortCreate) SetInfoURL(s string) *WorkEffortCreate {
	wec.mutation.SetInfoURL(s)
	return wec
}

// SetNillableInfoURL sets the "info_url" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableInfoURL(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetInfoURL(*s)
	}
	return wec
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (wec *WorkEffortCreate) SetRecurrenceInfoID(i int) *WorkEffortCreate {
	wec.mutation.SetRecurrenceInfoID(i)
	return wec
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableRecurrenceInfoID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetRecurrenceInfoID(*i)
	}
	return wec
}

// SetRuntimeDataID sets the "runtime_data_id" field.
func (wec *WorkEffortCreate) SetRuntimeDataID(i int) *WorkEffortCreate {
	wec.mutation.SetRuntimeDataID(i)
	return wec
}

// SetNillableRuntimeDataID sets the "runtime_data_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableRuntimeDataID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetRuntimeDataID(*i)
	}
	return wec
}

// SetNoteID sets the "note_id" field.
func (wec *WorkEffortCreate) SetNoteID(i int) *WorkEffortCreate {
	wec.mutation.SetNoteID(i)
	return wec
}

// SetNillableNoteID sets the "note_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableNoteID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetNoteID(*i)
	}
	return wec
}

// SetServiceLoaderName sets the "service_loader_name" field.
func (wec *WorkEffortCreate) SetServiceLoaderName(s string) *WorkEffortCreate {
	wec.mutation.SetServiceLoaderName(s)
	return wec
}

// SetNillableServiceLoaderName sets the "service_loader_name" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableServiceLoaderName(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetServiceLoaderName(*s)
	}
	return wec
}

// SetQuantityToProduce sets the "quantity_to_produce" field.
func (wec *WorkEffortCreate) SetQuantityToProduce(f float64) *WorkEffortCreate {
	wec.mutation.SetQuantityToProduce(f)
	return wec
}

// SetNillableQuantityToProduce sets the "quantity_to_produce" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableQuantityToProduce(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetQuantityToProduce(*f)
	}
	return wec
}

// SetQuantityProduced sets the "quantity_produced" field.
func (wec *WorkEffortCreate) SetQuantityProduced(f float64) *WorkEffortCreate {
	wec.mutation.SetQuantityProduced(f)
	return wec
}

// SetNillableQuantityProduced sets the "quantity_produced" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableQuantityProduced(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetQuantityProduced(*f)
	}
	return wec
}

// SetQuantityRejected sets the "quantity_rejected" field.
func (wec *WorkEffortCreate) SetQuantityRejected(f float64) *WorkEffortCreate {
	wec.mutation.SetQuantityRejected(f)
	return wec
}

// SetNillableQuantityRejected sets the "quantity_rejected" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableQuantityRejected(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetQuantityRejected(*f)
	}
	return wec
}

// SetReservPersons sets the "reserv_persons" field.
func (wec *WorkEffortCreate) SetReservPersons(f float64) *WorkEffortCreate {
	wec.mutation.SetReservPersons(f)
	return wec
}

// SetNillableReservPersons sets the "reserv_persons" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableReservPersons(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetReservPersons(*f)
	}
	return wec
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (wec *WorkEffortCreate) SetReserv2NdPpPerc(f float64) *WorkEffortCreate {
	wec.mutation.SetReserv2NdPpPerc(f)
	return wec
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableReserv2NdPpPerc(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetReserv2NdPpPerc(*f)
	}
	return wec
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (wec *WorkEffortCreate) SetReservNthPpPerc(f float64) *WorkEffortCreate {
	wec.mutation.SetReservNthPpPerc(f)
	return wec
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableReservNthPpPerc(f *float64) *WorkEffortCreate {
	if f != nil {
		wec.SetReservNthPpPerc(*f)
	}
	return wec
}

// SetAccommodationMapID sets the "accommodation_map_id" field.
func (wec *WorkEffortCreate) SetAccommodationMapID(i int) *WorkEffortCreate {
	wec.mutation.SetAccommodationMapID(i)
	return wec
}

// SetNillableAccommodationMapID sets the "accommodation_map_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableAccommodationMapID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetAccommodationMapID(*i)
	}
	return wec
}

// SetAccommodationSpotID sets the "accommodation_spot_id" field.
func (wec *WorkEffortCreate) SetAccommodationSpotID(i int) *WorkEffortCreate {
	wec.mutation.SetAccommodationSpotID(i)
	return wec
}

// SetNillableAccommodationSpotID sets the "accommodation_spot_id" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableAccommodationSpotID(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetAccommodationSpotID(*i)
	}
	return wec
}

// SetRevisionNumber sets the "revision_number" field.
func (wec *WorkEffortCreate) SetRevisionNumber(i int) *WorkEffortCreate {
	wec.mutation.SetRevisionNumber(i)
	return wec
}

// SetNillableRevisionNumber sets the "revision_number" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableRevisionNumber(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetRevisionNumber(*i)
	}
	return wec
}

// SetCreatedDate sets the "created_date" field.
func (wec *WorkEffortCreate) SetCreatedDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetCreatedDate(t)
	return wec
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableCreatedDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetCreatedDate(*t)
	}
	return wec
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (wec *WorkEffortCreate) SetCreatedByUserLogin(s string) *WorkEffortCreate {
	wec.mutation.SetCreatedByUserLogin(s)
	return wec
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableCreatedByUserLogin(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetCreatedByUserLogin(*s)
	}
	return wec
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (wec *WorkEffortCreate) SetLastModifiedDate(t time.Time) *WorkEffortCreate {
	wec.mutation.SetLastModifiedDate(t)
	return wec
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableLastModifiedDate(t *time.Time) *WorkEffortCreate {
	if t != nil {
		wec.SetLastModifiedDate(*t)
	}
	return wec
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (wec *WorkEffortCreate) SetLastModifiedByUserLogin(s string) *WorkEffortCreate {
	wec.mutation.SetLastModifiedByUserLogin(s)
	return wec
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableLastModifiedByUserLogin(s *string) *WorkEffortCreate {
	if s != nil {
		wec.SetLastModifiedByUserLogin(*s)
	}
	return wec
}

// SetSequenceNum sets the "sequence_num" field.
func (wec *WorkEffortCreate) SetSequenceNum(i int) *WorkEffortCreate {
	wec.mutation.SetSequenceNum(i)
	return wec
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableSequenceNum(i *int) *WorkEffortCreate {
	if i != nil {
		wec.SetSequenceNum(*i)
	}
	return wec
}

// SetParentID sets the "parent" edge to the WorkEffort entity by ID.
func (wec *WorkEffortCreate) SetParentID(id int) *WorkEffortCreate {
	wec.mutation.SetParentID(id)
	return wec
}

// SetNillableParentID sets the "parent" edge to the WorkEffort entity by ID if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableParentID(id *int) *WorkEffortCreate {
	if id != nil {
		wec = wec.SetParentID(*id)
	}
	return wec
}

// SetParent sets the "parent" edge to the WorkEffort entity.
func (wec *WorkEffortCreate) SetParent(w *WorkEffort) *WorkEffortCreate {
	return wec.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkEffort entity by IDs.
func (wec *WorkEffortCreate) AddChildIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddChildIDs(ids...)
	return wec
}

// AddChildren adds the "children" edges to the WorkEffort entity.
func (wec *WorkEffortCreate) AddChildren(w ...*WorkEffort) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddChildIDs(ids...)
}

// SetFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID.
func (wec *WorkEffortCreate) SetFixedAssetID(id int) *WorkEffortCreate {
	wec.mutation.SetFixedAssetID(id)
	return wec
}

// SetNillableFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableFixedAssetID(id *int) *WorkEffortCreate {
	if id != nil {
		wec = wec.SetFixedAssetID(*id)
	}
	return wec
}

// SetFixedAsset sets the "fixed_asset" edge to the FixedAsset entity.
func (wec *WorkEffortCreate) SetFixedAsset(f *FixedAsset) *WorkEffortCreate {
	return wec.SetFixedAssetID(f.ID)
}

// SetTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID.
func (wec *WorkEffortCreate) SetTemporalExpressionID(id int) *WorkEffortCreate {
	wec.mutation.SetTemporalExpressionID(id)
	return wec
}

// SetNillableTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (wec *WorkEffortCreate) SetNillableTemporalExpressionID(id *int) *WorkEffortCreate {
	if id != nil {
		wec = wec.SetTemporalExpressionID(*id)
	}
	return wec
}

// SetTemporalExpression sets the "temporal_expression" edge to the TemporalExpression entity.
func (wec *WorkEffortCreate) SetTemporalExpression(t *TemporalExpression) *WorkEffortCreate {
	return wec.SetTemporalExpressionID(t.ID)
}

// AddChildWorkEffortIDs adds the "child_work_efforts" edge to the WorkEffort entity by IDs.
func (wec *WorkEffortCreate) AddChildWorkEffortIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddChildWorkEffortIDs(ids...)
	return wec
}

// AddChildWorkEfforts adds the "child_work_efforts" edges to the WorkEffort entity.
func (wec *WorkEffortCreate) AddChildWorkEfforts(w ...*WorkEffort) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddChildWorkEffortIDs(ids...)
}

// AddFromWorkEffortAssocIDs adds the "from_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (wec *WorkEffortCreate) AddFromWorkEffortAssocIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddFromWorkEffortAssocIDs(ids...)
	return wec
}

// AddFromWorkEffortAssocs adds the "from_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (wec *WorkEffortCreate) AddFromWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddFromWorkEffortAssocIDs(ids...)
}

// AddToWorkEffortAssocIDs adds the "to_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (wec *WorkEffortCreate) AddToWorkEffortAssocIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddToWorkEffortAssocIDs(ids...)
	return wec
}

// AddToWorkEffortAssocs adds the "to_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (wec *WorkEffortCreate) AddToWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddToWorkEffortAssocIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (wec *WorkEffortCreate) AddWorkEffortFixedAssetAssignIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return wec
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (wec *WorkEffortCreate) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (wec *WorkEffortCreate) AddWorkEffortPartyAssignmentIDs(ids ...int) *WorkEffortCreate {
	wec.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return wec
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (wec *WorkEffortCreate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *WorkEffortCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the WorkEffortMutation object of the builder.
func (wec *WorkEffortCreate) Mutation() *WorkEffortMutation {
	return wec.mutation
}

// Save creates the WorkEffort in the database.
func (wec *WorkEffortCreate) Save(ctx context.Context) (*WorkEffort, error) {
	var (
		err  error
		node *WorkEffort
	)
	wec.defaults()
	if len(wec.hooks) == 0 {
		if err = wec.check(); err != nil {
			return nil, err
		}
		node, err = wec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wec.check(); err != nil {
				return nil, err
			}
			wec.mutation = mutation
			node, err = wec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wec.hooks) - 1; i >= 0; i-- {
			mut = wec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkEffortCreate) SaveX(ctx context.Context) *WorkEffort {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wec *WorkEffortCreate) defaults() {
	if _, ok := wec.mutation.LastStatusUpdate(); !ok {
		v := workeffort.DefaultLastStatusUpdate()
		wec.mutation.SetLastStatusUpdate(v)
	}
	if _, ok := wec.mutation.EstimatedStartDate(); !ok {
		v := workeffort.DefaultEstimatedStartDate()
		wec.mutation.SetEstimatedStartDate(v)
	}
	if _, ok := wec.mutation.EstimatedCompletionDate(); !ok {
		v := workeffort.DefaultEstimatedCompletionDate()
		wec.mutation.SetEstimatedCompletionDate(v)
	}
	if _, ok := wec.mutation.ActualStartDate(); !ok {
		v := workeffort.DefaultActualStartDate()
		wec.mutation.SetActualStartDate(v)
	}
	if _, ok := wec.mutation.ActualCompletionDate(); !ok {
		v := workeffort.DefaultActualCompletionDate()
		wec.mutation.SetActualCompletionDate(v)
	}
	if _, ok := wec.mutation.CreatedDate(); !ok {
		v := workeffort.DefaultCreatedDate()
		wec.mutation.SetCreatedDate(v)
	}
	if _, ok := wec.mutation.LastModifiedDate(); !ok {
		v := workeffort.DefaultLastModifiedDate()
		wec.mutation.SetLastModifiedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkEffortCreate) check() error {
	if v, ok := wec.mutation.SendNotificationEmail(); ok {
		if err := workeffort.SendNotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "send_notification_email", err: fmt.Errorf("ent: validator failed for field \"send_notification_email\": %w", err)}
		}
	}
	if v, ok := wec.mutation.SourceReferenceID(); ok {
		if err := workeffort.SourceReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "source_reference_id", err: fmt.Errorf("ent: validator failed for field \"source_reference_id\": %w", err)}
		}
	}
	return nil
}

func (wec *WorkEffortCreate) sqlSave(ctx context.Context) (*WorkEffort, error) {
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wec *WorkEffortCreate) createSpec() (*WorkEffort, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkEffort{config: wec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workeffort.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffort.FieldID,
			},
		}
	)
	if value, ok := wec.mutation.WorkEffortTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortTypeID,
		})
		_node.WorkEffortTypeID = value
	}
	if value, ok := wec.mutation.CurrentStatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldCurrentStatusID,
		})
		_node.CurrentStatusID = value
	}
	if value, ok := wec.mutation.LastStatusUpdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastStatusUpdate,
		})
		_node.LastStatusUpdate = value
	}
	if value, ok := wec.mutation.WorkEffortPurposeTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
		_node.WorkEffortPurposeTypeID = value
	}
	if value, ok := wec.mutation.ScopeEnumID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldScopeEnumID,
		})
		_node.ScopeEnumID = value
	}
	if value, ok := wec.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := wec.mutation.PercentComplete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPercentComplete,
		})
		_node.PercentComplete = value
	}
	if value, ok := wec.mutation.WorkEffortName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldWorkEffortName,
		})
		_node.WorkEffortName = value
	}
	if value, ok := wec.mutation.ShowAsEnumID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldShowAsEnumID,
		})
		_node.ShowAsEnumID = value
	}
	if value, ok := wec.mutation.SendNotificationEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffort.FieldSendNotificationEmail,
		})
		_node.SendNotificationEmail = value
	}
	if value, ok := wec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := wec.mutation.LocationDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLocationDesc,
		})
		_node.LocationDesc = value
	}
	if value, ok := wec.mutation.EstimatedStartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedStartDate,
		})
		_node.EstimatedStartDate = value
	}
	if value, ok := wec.mutation.EstimatedCompletionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedCompletionDate,
		})
		_node.EstimatedCompletionDate = value
	}
	if value, ok := wec.mutation.ActualStartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualStartDate,
		})
		_node.ActualStartDate = value
	}
	if value, ok := wec.mutation.ActualCompletionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualCompletionDate,
		})
		_node.ActualCompletionDate = value
	}
	if value, ok := wec.mutation.EstimatedMilliSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
		_node.EstimatedMilliSeconds = value
	}
	if value, ok := wec.mutation.EstimatedSetupMillis(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
		_node.EstimatedSetupMillis = value
	}
	if value, ok := wec.mutation.EstimateCalcMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldEstimateCalcMethod,
		})
		_node.EstimateCalcMethod = value
	}
	if value, ok := wec.mutation.ActualMilliSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualMilliSeconds,
		})
		_node.ActualMilliSeconds = value
	}
	if value, ok := wec.mutation.ActualSetupMillis(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualSetupMillis,
		})
		_node.ActualSetupMillis = value
	}
	if value, ok := wec.mutation.TotalMilliSecondsAllowed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
		_node.TotalMilliSecondsAllowed = value
	}
	if value, ok := wec.mutation.TotalMoneyAllowed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
		_node.TotalMoneyAllowed = value
	}
	if value, ok := wec.mutation.MoneyUomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldMoneyUomID,
		})
		_node.MoneyUomID = value
	}
	if value, ok := wec.mutation.SpecialTerms(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSpecialTerms,
		})
		_node.SpecialTerms = value
	}
	if value, ok := wec.mutation.TimeTransparency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldTimeTransparency,
		})
		_node.TimeTransparency = value
	}
	if value, ok := wec.mutation.UniversalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldUniversalID,
		})
		_node.UniversalID = value
	}
	if value, ok := wec.mutation.SourceReferenceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSourceReferenceID,
		})
		_node.SourceReferenceID = value
	}
	if value, ok := wec.mutation.FacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldFacilityID,
		})
		_node.FacilityID = value
	}
	if value, ok := wec.mutation.InfoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldInfoURL,
		})
		_node.InfoURL = value
	}
	if value, ok := wec.mutation.RecurrenceInfoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRecurrenceInfoID,
		})
		_node.RecurrenceInfoID = value
	}
	if value, ok := wec.mutation.RuntimeDataID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRuntimeDataID,
		})
		_node.RuntimeDataID = value
	}
	if value, ok := wec.mutation.NoteID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldNoteID,
		})
		_node.NoteID = value
	}
	if value, ok := wec.mutation.ServiceLoaderName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldServiceLoaderName,
		})
		_node.ServiceLoaderName = value
	}
	if value, ok := wec.mutation.QuantityToProduce(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityToProduce,
		})
		_node.QuantityToProduce = value
	}
	if value, ok := wec.mutation.QuantityProduced(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityProduced,
		})
		_node.QuantityProduced = value
	}
	if value, ok := wec.mutation.QuantityRejected(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityRejected,
		})
		_node.QuantityRejected = value
	}
	if value, ok := wec.mutation.ReservPersons(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservPersons,
		})
		_node.ReservPersons = value
	}
	if value, ok := wec.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
		_node.Reserv2NdPpPerc = value
	}
	if value, ok := wec.mutation.ReservNthPpPerc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservNthPpPerc,
		})
		_node.ReservNthPpPerc = value
	}
	if value, ok := wec.mutation.AccommodationMapID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationMapID,
		})
		_node.AccommodationMapID = value
	}
	if value, ok := wec.mutation.AccommodationSpotID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationSpotID,
		})
		_node.AccommodationSpotID = value
	}
	if value, ok := wec.mutation.RevisionNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRevisionNumber,
		})
		_node.RevisionNumber = value
	}
	if value, ok := wec.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := wec.mutation.CreatedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldCreatedByUserLogin,
		})
		_node.CreatedByUserLogin = value
	}
	if value, ok := wec.mutation.LastModifiedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastModifiedDate,
		})
		_node.LastModifiedDate = value
	}
	if value, ok := wec.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLastModifiedByUserLogin,
		})
		_node.LastModifiedByUserLogin = value
	}
	if value, ok := wec.mutation.SequenceNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldSequenceNum,
		})
		_node.SequenceNum = value
	}
	if nodes := wec.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.ParentTable,
			Columns: []string{workeffort.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.work_effort_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.FixedAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.FixedAssetTable,
			Columns: []string{workeffort.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fixed_asset_work_efforts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.TemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.TemporalExpressionTable,
			Columns: []string{workeffort.TemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.temporal_expression_work_efforts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ChildWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.FromWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ToWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkEffortCreateBulk is the builder for creating many WorkEffort entities in bulk.
type WorkEffortCreateBulk struct {
	config
	builders []*WorkEffortCreate
}

// Save creates the WorkEffort entities in the database.
func (wecb *WorkEffortCreateBulk) Save(ctx context.Context) ([]*WorkEffort, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkEffort, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkEffortMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkEffortCreateBulk) SaveX(ctx context.Context) []*WorkEffort {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
