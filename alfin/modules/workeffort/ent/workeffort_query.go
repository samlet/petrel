// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortskillstandard"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workefforttype"
)

// WorkEffortQuery is the builder for querying WorkEffort entities.
type WorkEffortQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.WorkEffort
	// eager-loading edges.
	withWorkEffortType              *WorkEffortTypeQuery
	withParent                      *WorkEffortQuery
	withChildren                    *WorkEffortQuery
	withCurrentStatusItem           *StatusItemQuery
	withFixedAsset                  *FixedAssetQuery
	withTemporalExpression          *TemporalExpressionQuery
	withChildWorkEfforts            *WorkEffortQuery
	withFromWorkEffortAssocs        *WorkEffortAssocQuery
	withToWorkEffortAssocs          *WorkEffortAssocQuery
	withWorkEffortFixedAssetAssigns *WorkEffortFixedAssetAssignQuery
	withWorkEffortPartyAssignments  *WorkEffortPartyAssignmentQuery
	withWorkEffortSkillStandards    *WorkEffortSkillStandardQuery
	withFKs                         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkEffortQuery builder.
func (weq *WorkEffortQuery) Where(ps ...predicate.WorkEffort) *WorkEffortQuery {
	weq.predicates = append(weq.predicates, ps...)
	return weq
}

// Limit adds a limit step to the query.
func (weq *WorkEffortQuery) Limit(limit int) *WorkEffortQuery {
	weq.limit = &limit
	return weq
}

// Offset adds an offset step to the query.
func (weq *WorkEffortQuery) Offset(offset int) *WorkEffortQuery {
	weq.offset = &offset
	return weq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (weq *WorkEffortQuery) Unique(unique bool) *WorkEffortQuery {
	weq.unique = &unique
	return weq
}

// Order adds an order step to the query.
func (weq *WorkEffortQuery) Order(o ...OrderFunc) *WorkEffortQuery {
	weq.order = append(weq.order, o...)
	return weq
}

// QueryWorkEffortType chains the current query on the "work_effort_type" edge.
func (weq *WorkEffortQuery) QueryWorkEffortType() *WorkEffortTypeQuery {
	query := &WorkEffortTypeQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workefforttype.Table, workefforttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.WorkEffortTypeTable, workeffort.WorkEffortTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (weq *WorkEffortQuery) QueryParent() *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.ParentTable, workeffort.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (weq *WorkEffortQuery) QueryChildren() *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ChildrenTable, workeffort.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrentStatusItem chains the current query on the "current_status_item" edge.
func (weq *WorkEffortQuery) QueryCurrentStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.CurrentStatusItemTable, workeffort.CurrentStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixedAsset chains the current query on the "fixed_asset" edge.
func (weq *WorkEffortQuery) QueryFixedAsset() *FixedAssetQuery {
	query := &FixedAssetQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(fixedasset.Table, fixedasset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.FixedAssetTable, workeffort.FixedAssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemporalExpression chains the current query on the "temporal_expression" edge.
func (weq *WorkEffortQuery) QueryTemporalExpression() *TemporalExpressionQuery {
	query := &TemporalExpressionQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(temporalexpression.Table, temporalexpression.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffort.TemporalExpressionTable, workeffort.TemporalExpressionColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildWorkEfforts chains the current query on the "child_work_efforts" edge.
func (weq *WorkEffortQuery) QueryChildWorkEfforts() *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, workeffort.ChildWorkEffortsTable, workeffort.ChildWorkEffortsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFromWorkEffortAssocs chains the current query on the "from_work_effort_assocs" edge.
func (weq *WorkEffortQuery) QueryFromWorkEffortAssocs() *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.FromWorkEffortAssocsTable, workeffort.FromWorkEffortAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToWorkEffortAssocs chains the current query on the "to_work_effort_assocs" edge.
func (weq *WorkEffortQuery) QueryToWorkEffortAssocs() *WorkEffortAssocQuery {
	query := &WorkEffortAssocQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffortassoc.Table, workeffortassoc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.ToWorkEffortAssocsTable, workeffort.ToWorkEffortAssocsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortFixedAssetAssigns chains the current query on the "work_effort_fixed_asset_assigns" edge.
func (weq *WorkEffortQuery) QueryWorkEffortFixedAssetAssigns() *WorkEffortFixedAssetAssignQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffortfixedassetassign.Table, workeffortfixedassetassign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortFixedAssetAssignsTable, workeffort.WorkEffortFixedAssetAssignsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortPartyAssignments chains the current query on the "work_effort_party_assignments" edge.
func (weq *WorkEffortQuery) QueryWorkEffortPartyAssignments() *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortPartyAssignmentQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortPartyAssignmentsTable, workeffort.WorkEffortPartyAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkEffortSkillStandards chains the current query on the "work_effort_skill_standards" edge.
func (weq *WorkEffortQuery) QueryWorkEffortSkillStandards() *WorkEffortSkillStandardQuery {
	query := &WorkEffortSkillStandardQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffort.Table, workeffort.FieldID, selector),
			sqlgraph.To(workeffortskillstandard.Table, workeffortskillstandard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workeffort.WorkEffortSkillStandardsTable, workeffort.WorkEffortSkillStandardsColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkEffort entity from the query.
// Returns a *NotFoundError when no WorkEffort was found.
func (weq *WorkEffortQuery) First(ctx context.Context) (*WorkEffort, error) {
	nodes, err := weq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workeffort.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (weq *WorkEffortQuery) FirstX(ctx context.Context) *WorkEffort {
	node, err := weq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkEffort ID from the query.
// Returns a *NotFoundError when no WorkEffort ID was found.
func (weq *WorkEffortQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workeffort.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (weq *WorkEffortQuery) FirstIDX(ctx context.Context) int {
	id, err := weq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkEffort entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one WorkEffort entity is not found.
// Returns a *NotFoundError when no WorkEffort entities are found.
func (weq *WorkEffortQuery) Only(ctx context.Context) (*WorkEffort, error) {
	nodes, err := weq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workeffort.Label}
	default:
		return nil, &NotSingularError{workeffort.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (weq *WorkEffortQuery) OnlyX(ctx context.Context) *WorkEffort {
	node, err := weq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkEffort ID in the query.
// Returns a *NotSingularError when exactly one WorkEffort ID is not found.
// Returns a *NotFoundError when no entities are found.
func (weq *WorkEffortQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = &NotSingularError{workeffort.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (weq *WorkEffortQuery) OnlyIDX(ctx context.Context) int {
	id, err := weq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkEfforts.
func (weq *WorkEffortQuery) All(ctx context.Context) ([]*WorkEffort, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return weq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (weq *WorkEffortQuery) AllX(ctx context.Context) []*WorkEffort {
	nodes, err := weq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkEffort IDs.
func (weq *WorkEffortQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := weq.Select(workeffort.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (weq *WorkEffortQuery) IDsX(ctx context.Context) []int {
	ids, err := weq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (weq *WorkEffortQuery) Count(ctx context.Context) (int, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return weq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (weq *WorkEffortQuery) CountX(ctx context.Context) int {
	count, err := weq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (weq *WorkEffortQuery) Exist(ctx context.Context) (bool, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return weq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (weq *WorkEffortQuery) ExistX(ctx context.Context) bool {
	exist, err := weq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkEffortQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (weq *WorkEffortQuery) Clone() *WorkEffortQuery {
	if weq == nil {
		return nil
	}
	return &WorkEffortQuery{
		config:                          weq.config,
		limit:                           weq.limit,
		offset:                          weq.offset,
		order:                           append([]OrderFunc{}, weq.order...),
		predicates:                      append([]predicate.WorkEffort{}, weq.predicates...),
		withWorkEffortType:              weq.withWorkEffortType.Clone(),
		withParent:                      weq.withParent.Clone(),
		withChildren:                    weq.withChildren.Clone(),
		withCurrentStatusItem:           weq.withCurrentStatusItem.Clone(),
		withFixedAsset:                  weq.withFixedAsset.Clone(),
		withTemporalExpression:          weq.withTemporalExpression.Clone(),
		withChildWorkEfforts:            weq.withChildWorkEfforts.Clone(),
		withFromWorkEffortAssocs:        weq.withFromWorkEffortAssocs.Clone(),
		withToWorkEffortAssocs:          weq.withToWorkEffortAssocs.Clone(),
		withWorkEffortFixedAssetAssigns: weq.withWorkEffortFixedAssetAssigns.Clone(),
		withWorkEffortPartyAssignments:  weq.withWorkEffortPartyAssignments.Clone(),
		withWorkEffortSkillStandards:    weq.withWorkEffortSkillStandards.Clone(),
		// clone intermediate query.
		sql:  weq.sql.Clone(),
		path: weq.path,
	}
}

// WithWorkEffortType tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_type" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithWorkEffortType(opts ...func(*WorkEffortTypeQuery)) *WorkEffortQuery {
	query := &WorkEffortTypeQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkEffortType = query
	return weq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithParent(opts ...func(*WorkEffortQuery)) *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withParent = query
	return weq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithChildren(opts ...func(*WorkEffortQuery)) *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withChildren = query
	return weq
}

// WithCurrentStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "current_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithCurrentStatusItem(opts ...func(*StatusItemQuery)) *WorkEffortQuery {
	query := &StatusItemQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withCurrentStatusItem = query
	return weq
}

// WithFixedAsset tells the query-builder to eager-load the nodes that are connected to
// the "fixed_asset" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithFixedAsset(opts ...func(*FixedAssetQuery)) *WorkEffortQuery {
	query := &FixedAssetQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withFixedAsset = query
	return weq
}

// WithTemporalExpression tells the query-builder to eager-load the nodes that are connected to
// the "temporal_expression" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithTemporalExpression(opts ...func(*TemporalExpressionQuery)) *WorkEffortQuery {
	query := &TemporalExpressionQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withTemporalExpression = query
	return weq
}

// WithChildWorkEfforts tells the query-builder to eager-load the nodes that are connected to
// the "child_work_efforts" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithChildWorkEfforts(opts ...func(*WorkEffortQuery)) *WorkEffortQuery {
	query := &WorkEffortQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withChildWorkEfforts = query
	return weq
}

// WithFromWorkEffortAssocs tells the query-builder to eager-load the nodes that are connected to
// the "from_work_effort_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithFromWorkEffortAssocs(opts ...func(*WorkEffortAssocQuery)) *WorkEffortQuery {
	query := &WorkEffortAssocQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withFromWorkEffortAssocs = query
	return weq
}

// WithToWorkEffortAssocs tells the query-builder to eager-load the nodes that are connected to
// the "to_work_effort_assocs" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithToWorkEffortAssocs(opts ...func(*WorkEffortAssocQuery)) *WorkEffortQuery {
	query := &WorkEffortAssocQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withToWorkEffortAssocs = query
	return weq
}

// WithWorkEffortFixedAssetAssigns tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_fixed_asset_assigns" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithWorkEffortFixedAssetAssigns(opts ...func(*WorkEffortFixedAssetAssignQuery)) *WorkEffortQuery {
	query := &WorkEffortFixedAssetAssignQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkEffortFixedAssetAssigns = query
	return weq
}

// WithWorkEffortPartyAssignments tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_party_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithWorkEffortPartyAssignments(opts ...func(*WorkEffortPartyAssignmentQuery)) *WorkEffortQuery {
	query := &WorkEffortPartyAssignmentQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkEffortPartyAssignments = query
	return weq
}

// WithWorkEffortSkillStandards tells the query-builder to eager-load the nodes that are connected to
// the "work_effort_skill_standards" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkEffortQuery) WithWorkEffortSkillStandards(opts ...func(*WorkEffortSkillStandardQuery)) *WorkEffortQuery {
	query := &WorkEffortSkillStandardQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkEffortSkillStandards = query
	return weq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkEffort.Query().
//		GroupBy(workeffort.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (weq *WorkEffortQuery) GroupBy(field string, fields ...string) *WorkEffortGroupBy {
	group := &WorkEffortGroupBy{config: weq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return weq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.WorkEffort.Query().
//		Select(workeffort.FieldCreateTime).
//		Scan(ctx, &v)
//
func (weq *WorkEffortQuery) Select(field string, fields ...string) *WorkEffortSelect {
	weq.fields = append([]string{field}, fields...)
	return &WorkEffortSelect{WorkEffortQuery: weq}
}

func (weq *WorkEffortQuery) prepareQuery(ctx context.Context) error {
	for _, f := range weq.fields {
		if !workeffort.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if weq.path != nil {
		prev, err := weq.path(ctx)
		if err != nil {
			return err
		}
		weq.sql = prev
	}
	return nil
}

func (weq *WorkEffortQuery) sqlAll(ctx context.Context) ([]*WorkEffort, error) {
	var (
		nodes       = []*WorkEffort{}
		withFKs     = weq.withFKs
		_spec       = weq.querySpec()
		loadedTypes = [12]bool{
			weq.withWorkEffortType != nil,
			weq.withParent != nil,
			weq.withChildren != nil,
			weq.withCurrentStatusItem != nil,
			weq.withFixedAsset != nil,
			weq.withTemporalExpression != nil,
			weq.withChildWorkEfforts != nil,
			weq.withFromWorkEffortAssocs != nil,
			weq.withToWorkEffortAssocs != nil,
			weq.withWorkEffortFixedAssetAssigns != nil,
			weq.withWorkEffortPartyAssignments != nil,
			weq.withWorkEffortSkillStandards != nil,
		}
	)
	if weq.withWorkEffortType != nil || weq.withParent != nil || weq.withCurrentStatusItem != nil || weq.withFixedAsset != nil || weq.withTemporalExpression != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workeffort.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &WorkEffort{config: weq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, weq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := weq.withWorkEffortType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffort)
		for i := range nodes {
			if nodes[i].work_effort_type_work_efforts == nil {
				continue
			}
			fk := *nodes[i].work_effort_type_work_efforts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workefforttype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_type_work_efforts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.WorkEffortType = n
			}
		}
	}

	if query := weq.withParent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffort)
		for i := range nodes {
			if nodes[i].work_effort_children == nil {
				continue
			}
			fk := *nodes[i].work_effort_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workeffort.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := weq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*WorkEffort{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffort(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	if query := weq.withCurrentStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffort)
		for i := range nodes {
			if nodes[i].status_item_current_work_efforts == nil {
				continue
			}
			fk := *nodes[i].status_item_current_work_efforts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_current_work_efforts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CurrentStatusItem = n
			}
		}
	}

	if query := weq.withFixedAsset; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffort)
		for i := range nodes {
			if nodes[i].fixed_asset_work_efforts == nil {
				continue
			}
			fk := *nodes[i].fixed_asset_work_efforts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(fixedasset.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "fixed_asset_work_efforts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FixedAsset = n
			}
		}
	}

	if query := weq.withTemporalExpression; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffort)
		for i := range nodes {
			if nodes[i].temporal_expression_work_efforts == nil {
				continue
			}
			fk := *nodes[i].temporal_expression_work_efforts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(temporalexpression.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "temporal_expression_work_efforts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.TemporalExpression = n
			}
		}
	}

	if query := weq.withChildWorkEfforts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*WorkEffort, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ChildWorkEfforts = []*WorkEffort{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*WorkEffort)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   workeffort.ChildWorkEffortsTable,
				Columns: workeffort.ChildWorkEffortsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(workeffort.ChildWorkEffortsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, weq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "child_work_efforts": %w`, err)
		}
		query.Where(workeffort.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "child_work_efforts" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ChildWorkEfforts = append(nodes[i].Edges.ChildWorkEfforts, n)
			}
		}
	}

	if query := weq.withFromWorkEffortAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FromWorkEffortAssocs = []*WorkEffortAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.FromWorkEffortAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_from_work_effort_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_from_work_effort_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_from_work_effort_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.FromWorkEffortAssocs = append(node.Edges.FromWorkEffortAssocs, n)
		}
	}

	if query := weq.withToWorkEffortAssocs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ToWorkEffortAssocs = []*WorkEffortAssoc{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortAssoc(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.ToWorkEffortAssocsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_to_work_effort_assocs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_to_work_effort_assocs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_to_work_effort_assocs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ToWorkEffortAssocs = append(node.Edges.ToWorkEffortAssocs, n)
		}
	}

	if query := weq.withWorkEffortFixedAssetAssigns; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortFixedAssetAssigns = []*WorkEffortFixedAssetAssign{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortFixedAssetAssign(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.WorkEffortFixedAssetAssignsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_work_effort_fixed_asset_assigns
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_work_effort_fixed_asset_assigns" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_work_effort_fixed_asset_assigns" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortFixedAssetAssigns = append(node.Edges.WorkEffortFixedAssetAssigns, n)
		}
	}

	if query := weq.withWorkEffortPartyAssignments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortPartyAssignments = []*WorkEffortPartyAssignment{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.WorkEffortPartyAssignmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_work_effort_party_assignments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_work_effort_party_assignments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_work_effort_party_assignments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortPartyAssignments = append(node.Edges.WorkEffortPartyAssignments, n)
		}
	}

	if query := weq.withWorkEffortSkillStandards; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkEffort)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkEffortSkillStandards = []*WorkEffortSkillStandard{}
		}
		query.withFKs = true
		query.Where(predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
			s.Where(sql.InValues(workeffort.WorkEffortSkillStandardsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.work_effort_work_effort_skill_standards
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "work_effort_work_effort_skill_standards" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_work_effort_skill_standards" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.WorkEffortSkillStandards = append(node.Edges.WorkEffortSkillStandards, n)
		}
	}

	return nodes, nil
}

func (weq *WorkEffortQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := weq.querySpec()
	return sqlgraph.CountNodes(ctx, weq.driver, _spec)
}

func (weq *WorkEffortQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := weq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (weq *WorkEffortQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffort.Table,
			Columns: workeffort.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffort.FieldID,
			},
		},
		From:   weq.sql,
		Unique: true,
	}
	if unique := weq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := weq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffort.FieldID)
		for i := range fields {
			if fields[i] != workeffort.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := weq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := weq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := weq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := weq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (weq *WorkEffortQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(weq.driver.Dialect())
	t1 := builder.Table(workeffort.Table)
	columns := weq.fields
	if len(columns) == 0 {
		columns = workeffort.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if weq.sql != nil {
		selector = weq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range weq.predicates {
		p(selector)
	}
	for _, p := range weq.order {
		p(selector)
	}
	if offset := weq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := weq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkEffortGroupBy is the group-by builder for WorkEffort entities.
type WorkEffortGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wegb *WorkEffortGroupBy) Aggregate(fns ...AggregateFunc) *WorkEffortGroupBy {
	wegb.fns = append(wegb.fns, fns...)
	return wegb
}

// Scan applies the group-by query and scans the result into the given value.
func (wegb *WorkEffortGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wegb.path(ctx)
	if err != nil {
		return err
	}
	wegb.sql = query
	return wegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) StringsX(ctx context.Context) []string {
	v, err := wegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) StringX(ctx context.Context) string {
	v, err := wegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) IntsX(ctx context.Context) []int {
	v, err := wegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) IntX(ctx context.Context) int {
	v, err := wegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) Float64X(ctx context.Context) float64 {
	v, err := wegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkEffortGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wegb *WorkEffortGroupBy) BoolX(ctx context.Context) bool {
	v, err := wegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wegb *WorkEffortGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wegb.fields {
		if !workeffort.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wegb *WorkEffortGroupBy) sqlQuery() *sql.Selector {
	selector := wegb.sql.Select()
	aggregation := make([]string, 0, len(wegb.fns))
	for _, fn := range wegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wegb.fields)+len(wegb.fns))
		for _, f := range wegb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wegb.fields...)...)
}

// WorkEffortSelect is the builder for selecting fields of WorkEffort entities.
type WorkEffortSelect struct {
	*WorkEffortQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (wes *WorkEffortSelect) Scan(ctx context.Context, v interface{}) error {
	if err := wes.prepareQuery(ctx); err != nil {
		return err
	}
	wes.sql = wes.WorkEffortQuery.sqlQuery(ctx)
	return wes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wes *WorkEffortSelect) ScanX(ctx context.Context, v interface{}) {
	if err := wes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Strings(ctx context.Context) ([]string, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkEffortSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wes *WorkEffortSelect) StringsX(ctx context.Context) []string {
	v, err := wes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wes *WorkEffortSelect) StringX(ctx context.Context) string {
	v, err := wes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Ints(ctx context.Context) ([]int, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkEffortSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wes *WorkEffortSelect) IntsX(ctx context.Context) []int {
	v, err := wes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wes *WorkEffortSelect) IntX(ctx context.Context) int {
	v, err := wes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkEffortSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wes *WorkEffortSelect) Float64sX(ctx context.Context) []float64 {
	v, err := wes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wes *WorkEffortSelect) Float64X(ctx context.Context) float64 {
	v, err := wes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkEffortSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wes *WorkEffortSelect) BoolsX(ctx context.Context) []bool {
	v, err := wes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (wes *WorkEffortSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffort.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wes *WorkEffortSelect) BoolX(ctx context.Context) bool {
	v, err := wes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wes *WorkEffortSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wes.sql.Query()
	if err := wes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
