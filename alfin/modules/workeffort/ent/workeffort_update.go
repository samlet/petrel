// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/temporalexpression"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortUpdate is the builder for updating WorkEffort entities.
type WorkEffortUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortMutation
}

// Where adds a new predicate for the WorkEffortUpdate builder.
func (weu *WorkEffortUpdate) Where(ps ...predicate.WorkEffort) *WorkEffortUpdate {
	weu.mutation.predicates = append(weu.mutation.predicates, ps...)
	return weu
}

// SetWorkEffortTypeID sets the "work_effort_type_id" field.
func (weu *WorkEffortUpdate) SetWorkEffortTypeID(i int) *WorkEffortUpdate {
	weu.mutation.ResetWorkEffortTypeID()
	weu.mutation.SetWorkEffortTypeID(i)
	return weu
}

// SetNillableWorkEffortTypeID sets the "work_effort_type_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableWorkEffortTypeID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetWorkEffortTypeID(*i)
	}
	return weu
}

// AddWorkEffortTypeID adds i to the "work_effort_type_id" field.
func (weu *WorkEffortUpdate) AddWorkEffortTypeID(i int) *WorkEffortUpdate {
	weu.mutation.AddWorkEffortTypeID(i)
	return weu
}

// ClearWorkEffortTypeID clears the value of the "work_effort_type_id" field.
func (weu *WorkEffortUpdate) ClearWorkEffortTypeID() *WorkEffortUpdate {
	weu.mutation.ClearWorkEffortTypeID()
	return weu
}

// SetCurrentStatusID sets the "current_status_id" field.
func (weu *WorkEffortUpdate) SetCurrentStatusID(i int) *WorkEffortUpdate {
	weu.mutation.ResetCurrentStatusID()
	weu.mutation.SetCurrentStatusID(i)
	return weu
}

// SetNillableCurrentStatusID sets the "current_status_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableCurrentStatusID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetCurrentStatusID(*i)
	}
	return weu
}

// AddCurrentStatusID adds i to the "current_status_id" field.
func (weu *WorkEffortUpdate) AddCurrentStatusID(i int) *WorkEffortUpdate {
	weu.mutation.AddCurrentStatusID(i)
	return weu
}

// ClearCurrentStatusID clears the value of the "current_status_id" field.
func (weu *WorkEffortUpdate) ClearCurrentStatusID() *WorkEffortUpdate {
	weu.mutation.ClearCurrentStatusID()
	return weu
}

// SetLastStatusUpdate sets the "last_status_update" field.
func (weu *WorkEffortUpdate) SetLastStatusUpdate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetLastStatusUpdate(t)
	return weu
}

// SetNillableLastStatusUpdate sets the "last_status_update" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableLastStatusUpdate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetLastStatusUpdate(*t)
	}
	return weu
}

// ClearLastStatusUpdate clears the value of the "last_status_update" field.
func (weu *WorkEffortUpdate) ClearLastStatusUpdate() *WorkEffortUpdate {
	weu.mutation.ClearLastStatusUpdate()
	return weu
}

// SetWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field.
func (weu *WorkEffortUpdate) SetWorkEffortPurposeTypeID(i int) *WorkEffortUpdate {
	weu.mutation.ResetWorkEffortPurposeTypeID()
	weu.mutation.SetWorkEffortPurposeTypeID(i)
	return weu
}

// SetNillableWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableWorkEffortPurposeTypeID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetWorkEffortPurposeTypeID(*i)
	}
	return weu
}

// AddWorkEffortPurposeTypeID adds i to the "work_effort_purpose_type_id" field.
func (weu *WorkEffortUpdate) AddWorkEffortPurposeTypeID(i int) *WorkEffortUpdate {
	weu.mutation.AddWorkEffortPurposeTypeID(i)
	return weu
}

// ClearWorkEffortPurposeTypeID clears the value of the "work_effort_purpose_type_id" field.
func (weu *WorkEffortUpdate) ClearWorkEffortPurposeTypeID() *WorkEffortUpdate {
	weu.mutation.ClearWorkEffortPurposeTypeID()
	return weu
}

// SetScopeEnumID sets the "scope_enum_id" field.
func (weu *WorkEffortUpdate) SetScopeEnumID(i int) *WorkEffortUpdate {
	weu.mutation.ResetScopeEnumID()
	weu.mutation.SetScopeEnumID(i)
	return weu
}

// SetNillableScopeEnumID sets the "scope_enum_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableScopeEnumID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetScopeEnumID(*i)
	}
	return weu
}

// AddScopeEnumID adds i to the "scope_enum_id" field.
func (weu *WorkEffortUpdate) AddScopeEnumID(i int) *WorkEffortUpdate {
	weu.mutation.AddScopeEnumID(i)
	return weu
}

// ClearScopeEnumID clears the value of the "scope_enum_id" field.
func (weu *WorkEffortUpdate) ClearScopeEnumID() *WorkEffortUpdate {
	weu.mutation.ClearScopeEnumID()
	return weu
}

// SetPriority sets the "priority" field.
func (weu *WorkEffortUpdate) SetPriority(i int) *WorkEffortUpdate {
	weu.mutation.ResetPriority()
	weu.mutation.SetPriority(i)
	return weu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillablePriority(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetPriority(*i)
	}
	return weu
}

// AddPriority adds i to the "priority" field.
func (weu *WorkEffortUpdate) AddPriority(i int) *WorkEffortUpdate {
	weu.mutation.AddPriority(i)
	return weu
}

// ClearPriority clears the value of the "priority" field.
func (weu *WorkEffortUpdate) ClearPriority() *WorkEffortUpdate {
	weu.mutation.ClearPriority()
	return weu
}

// SetPercentComplete sets the "percent_complete" field.
func (weu *WorkEffortUpdate) SetPercentComplete(i int) *WorkEffortUpdate {
	weu.mutation.ResetPercentComplete()
	weu.mutation.SetPercentComplete(i)
	return weu
}

// SetNillablePercentComplete sets the "percent_complete" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillablePercentComplete(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetPercentComplete(*i)
	}
	return weu
}

// AddPercentComplete adds i to the "percent_complete" field.
func (weu *WorkEffortUpdate) AddPercentComplete(i int) *WorkEffortUpdate {
	weu.mutation.AddPercentComplete(i)
	return weu
}

// ClearPercentComplete clears the value of the "percent_complete" field.
func (weu *WorkEffortUpdate) ClearPercentComplete() *WorkEffortUpdate {
	weu.mutation.ClearPercentComplete()
	return weu
}

// SetWorkEffortName sets the "work_effort_name" field.
func (weu *WorkEffortUpdate) SetWorkEffortName(s string) *WorkEffortUpdate {
	weu.mutation.SetWorkEffortName(s)
	return weu
}

// SetNillableWorkEffortName sets the "work_effort_name" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableWorkEffortName(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetWorkEffortName(*s)
	}
	return weu
}

// ClearWorkEffortName clears the value of the "work_effort_name" field.
func (weu *WorkEffortUpdate) ClearWorkEffortName() *WorkEffortUpdate {
	weu.mutation.ClearWorkEffortName()
	return weu
}

// SetShowAsEnumID sets the "show_as_enum_id" field.
func (weu *WorkEffortUpdate) SetShowAsEnumID(i int) *WorkEffortUpdate {
	weu.mutation.ResetShowAsEnumID()
	weu.mutation.SetShowAsEnumID(i)
	return weu
}

// SetNillableShowAsEnumID sets the "show_as_enum_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableShowAsEnumID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetShowAsEnumID(*i)
	}
	return weu
}

// AddShowAsEnumID adds i to the "show_as_enum_id" field.
func (weu *WorkEffortUpdate) AddShowAsEnumID(i int) *WorkEffortUpdate {
	weu.mutation.AddShowAsEnumID(i)
	return weu
}

// ClearShowAsEnumID clears the value of the "show_as_enum_id" field.
func (weu *WorkEffortUpdate) ClearShowAsEnumID() *WorkEffortUpdate {
	weu.mutation.ClearShowAsEnumID()
	return weu
}

// SetSendNotificationEmail sets the "send_notification_email" field.
func (weu *WorkEffortUpdate) SetSendNotificationEmail(wne workeffort.SendNotificationEmail) *WorkEffortUpdate {
	weu.mutation.SetSendNotificationEmail(wne)
	return weu
}

// SetNillableSendNotificationEmail sets the "send_notification_email" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableSendNotificationEmail(wne *workeffort.SendNotificationEmail) *WorkEffortUpdate {
	if wne != nil {
		weu.SetSendNotificationEmail(*wne)
	}
	return weu
}

// ClearSendNotificationEmail clears the value of the "send_notification_email" field.
func (weu *WorkEffortUpdate) ClearSendNotificationEmail() *WorkEffortUpdate {
	weu.mutation.ClearSendNotificationEmail()
	return weu
}

// SetDescription sets the "description" field.
func (weu *WorkEffortUpdate) SetDescription(s string) *WorkEffortUpdate {
	weu.mutation.SetDescription(s)
	return weu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableDescription(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetDescription(*s)
	}
	return weu
}

// ClearDescription clears the value of the "description" field.
func (weu *WorkEffortUpdate) ClearDescription() *WorkEffortUpdate {
	weu.mutation.ClearDescription()
	return weu
}

// SetLocationDesc sets the "location_desc" field.
func (weu *WorkEffortUpdate) SetLocationDesc(s string) *WorkEffortUpdate {
	weu.mutation.SetLocationDesc(s)
	return weu
}

// SetNillableLocationDesc sets the "location_desc" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableLocationDesc(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetLocationDesc(*s)
	}
	return weu
}

// ClearLocationDesc clears the value of the "location_desc" field.
func (weu *WorkEffortUpdate) ClearLocationDesc() *WorkEffortUpdate {
	weu.mutation.ClearLocationDesc()
	return weu
}

// SetEstimatedStartDate sets the "estimated_start_date" field.
func (weu *WorkEffortUpdate) SetEstimatedStartDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetEstimatedStartDate(t)
	return weu
}

// SetNillableEstimatedStartDate sets the "estimated_start_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableEstimatedStartDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetEstimatedStartDate(*t)
	}
	return weu
}

// ClearEstimatedStartDate clears the value of the "estimated_start_date" field.
func (weu *WorkEffortUpdate) ClearEstimatedStartDate() *WorkEffortUpdate {
	weu.mutation.ClearEstimatedStartDate()
	return weu
}

// SetEstimatedCompletionDate sets the "estimated_completion_date" field.
func (weu *WorkEffortUpdate) SetEstimatedCompletionDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetEstimatedCompletionDate(t)
	return weu
}

// SetNillableEstimatedCompletionDate sets the "estimated_completion_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableEstimatedCompletionDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetEstimatedCompletionDate(*t)
	}
	return weu
}

// ClearEstimatedCompletionDate clears the value of the "estimated_completion_date" field.
func (weu *WorkEffortUpdate) ClearEstimatedCompletionDate() *WorkEffortUpdate {
	weu.mutation.ClearEstimatedCompletionDate()
	return weu
}

// SetActualStartDate sets the "actual_start_date" field.
func (weu *WorkEffortUpdate) SetActualStartDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetActualStartDate(t)
	return weu
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableActualStartDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetActualStartDate(*t)
	}
	return weu
}

// ClearActualStartDate clears the value of the "actual_start_date" field.
func (weu *WorkEffortUpdate) ClearActualStartDate() *WorkEffortUpdate {
	weu.mutation.ClearActualStartDate()
	return weu
}

// SetActualCompletionDate sets the "actual_completion_date" field.
func (weu *WorkEffortUpdate) SetActualCompletionDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetActualCompletionDate(t)
	return weu
}

// SetNillableActualCompletionDate sets the "actual_completion_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableActualCompletionDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetActualCompletionDate(*t)
	}
	return weu
}

// ClearActualCompletionDate clears the value of the "actual_completion_date" field.
func (weu *WorkEffortUpdate) ClearActualCompletionDate() *WorkEffortUpdate {
	weu.mutation.ClearActualCompletionDate()
	return weu
}

// SetEstimatedMilliSeconds sets the "estimated_milli_seconds" field.
func (weu *WorkEffortUpdate) SetEstimatedMilliSeconds(f float64) *WorkEffortUpdate {
	weu.mutation.ResetEstimatedMilliSeconds()
	weu.mutation.SetEstimatedMilliSeconds(f)
	return weu
}

// SetNillableEstimatedMilliSeconds sets the "estimated_milli_seconds" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableEstimatedMilliSeconds(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetEstimatedMilliSeconds(*f)
	}
	return weu
}

// AddEstimatedMilliSeconds adds f to the "estimated_milli_seconds" field.
func (weu *WorkEffortUpdate) AddEstimatedMilliSeconds(f float64) *WorkEffortUpdate {
	weu.mutation.AddEstimatedMilliSeconds(f)
	return weu
}

// ClearEstimatedMilliSeconds clears the value of the "estimated_milli_seconds" field.
func (weu *WorkEffortUpdate) ClearEstimatedMilliSeconds() *WorkEffortUpdate {
	weu.mutation.ClearEstimatedMilliSeconds()
	return weu
}

// SetEstimatedSetupMillis sets the "estimated_setup_millis" field.
func (weu *WorkEffortUpdate) SetEstimatedSetupMillis(f float64) *WorkEffortUpdate {
	weu.mutation.ResetEstimatedSetupMillis()
	weu.mutation.SetEstimatedSetupMillis(f)
	return weu
}

// SetNillableEstimatedSetupMillis sets the "estimated_setup_millis" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableEstimatedSetupMillis(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetEstimatedSetupMillis(*f)
	}
	return weu
}

// AddEstimatedSetupMillis adds f to the "estimated_setup_millis" field.
func (weu *WorkEffortUpdate) AddEstimatedSetupMillis(f float64) *WorkEffortUpdate {
	weu.mutation.AddEstimatedSetupMillis(f)
	return weu
}

// ClearEstimatedSetupMillis clears the value of the "estimated_setup_millis" field.
func (weu *WorkEffortUpdate) ClearEstimatedSetupMillis() *WorkEffortUpdate {
	weu.mutation.ClearEstimatedSetupMillis()
	return weu
}

// SetEstimateCalcMethod sets the "estimate_calc_method" field.
func (weu *WorkEffortUpdate) SetEstimateCalcMethod(i int) *WorkEffortUpdate {
	weu.mutation.ResetEstimateCalcMethod()
	weu.mutation.SetEstimateCalcMethod(i)
	return weu
}

// SetNillableEstimateCalcMethod sets the "estimate_calc_method" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableEstimateCalcMethod(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetEstimateCalcMethod(*i)
	}
	return weu
}

// AddEstimateCalcMethod adds i to the "estimate_calc_method" field.
func (weu *WorkEffortUpdate) AddEstimateCalcMethod(i int) *WorkEffortUpdate {
	weu.mutation.AddEstimateCalcMethod(i)
	return weu
}

// ClearEstimateCalcMethod clears the value of the "estimate_calc_method" field.
func (weu *WorkEffortUpdate) ClearEstimateCalcMethod() *WorkEffortUpdate {
	weu.mutation.ClearEstimateCalcMethod()
	return weu
}

// SetActualMilliSeconds sets the "actual_milli_seconds" field.
func (weu *WorkEffortUpdate) SetActualMilliSeconds(f float64) *WorkEffortUpdate {
	weu.mutation.ResetActualMilliSeconds()
	weu.mutation.SetActualMilliSeconds(f)
	return weu
}

// SetNillableActualMilliSeconds sets the "actual_milli_seconds" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableActualMilliSeconds(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetActualMilliSeconds(*f)
	}
	return weu
}

// AddActualMilliSeconds adds f to the "actual_milli_seconds" field.
func (weu *WorkEffortUpdate) AddActualMilliSeconds(f float64) *WorkEffortUpdate {
	weu.mutation.AddActualMilliSeconds(f)
	return weu
}

// ClearActualMilliSeconds clears the value of the "actual_milli_seconds" field.
func (weu *WorkEffortUpdate) ClearActualMilliSeconds() *WorkEffortUpdate {
	weu.mutation.ClearActualMilliSeconds()
	return weu
}

// SetActualSetupMillis sets the "actual_setup_millis" field.
func (weu *WorkEffortUpdate) SetActualSetupMillis(f float64) *WorkEffortUpdate {
	weu.mutation.ResetActualSetupMillis()
	weu.mutation.SetActualSetupMillis(f)
	return weu
}

// SetNillableActualSetupMillis sets the "actual_setup_millis" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableActualSetupMillis(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetActualSetupMillis(*f)
	}
	return weu
}

// AddActualSetupMillis adds f to the "actual_setup_millis" field.
func (weu *WorkEffortUpdate) AddActualSetupMillis(f float64) *WorkEffortUpdate {
	weu.mutation.AddActualSetupMillis(f)
	return weu
}

// ClearActualSetupMillis clears the value of the "actual_setup_millis" field.
func (weu *WorkEffortUpdate) ClearActualSetupMillis() *WorkEffortUpdate {
	weu.mutation.ClearActualSetupMillis()
	return weu
}

// SetTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field.
func (weu *WorkEffortUpdate) SetTotalMilliSecondsAllowed(f float64) *WorkEffortUpdate {
	weu.mutation.ResetTotalMilliSecondsAllowed()
	weu.mutation.SetTotalMilliSecondsAllowed(f)
	return weu
}

// SetNillableTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableTotalMilliSecondsAllowed(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetTotalMilliSecondsAllowed(*f)
	}
	return weu
}

// AddTotalMilliSecondsAllowed adds f to the "total_milli_seconds_allowed" field.
func (weu *WorkEffortUpdate) AddTotalMilliSecondsAllowed(f float64) *WorkEffortUpdate {
	weu.mutation.AddTotalMilliSecondsAllowed(f)
	return weu
}

// ClearTotalMilliSecondsAllowed clears the value of the "total_milli_seconds_allowed" field.
func (weu *WorkEffortUpdate) ClearTotalMilliSecondsAllowed() *WorkEffortUpdate {
	weu.mutation.ClearTotalMilliSecondsAllowed()
	return weu
}

// SetTotalMoneyAllowed sets the "total_money_allowed" field.
func (weu *WorkEffortUpdate) SetTotalMoneyAllowed(f float64) *WorkEffortUpdate {
	weu.mutation.ResetTotalMoneyAllowed()
	weu.mutation.SetTotalMoneyAllowed(f)
	return weu
}

// SetNillableTotalMoneyAllowed sets the "total_money_allowed" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableTotalMoneyAllowed(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetTotalMoneyAllowed(*f)
	}
	return weu
}

// AddTotalMoneyAllowed adds f to the "total_money_allowed" field.
func (weu *WorkEffortUpdate) AddTotalMoneyAllowed(f float64) *WorkEffortUpdate {
	weu.mutation.AddTotalMoneyAllowed(f)
	return weu
}

// ClearTotalMoneyAllowed clears the value of the "total_money_allowed" field.
func (weu *WorkEffortUpdate) ClearTotalMoneyAllowed() *WorkEffortUpdate {
	weu.mutation.ClearTotalMoneyAllowed()
	return weu
}

// SetMoneyUomID sets the "money_uom_id" field.
func (weu *WorkEffortUpdate) SetMoneyUomID(i int) *WorkEffortUpdate {
	weu.mutation.ResetMoneyUomID()
	weu.mutation.SetMoneyUomID(i)
	return weu
}

// SetNillableMoneyUomID sets the "money_uom_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableMoneyUomID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetMoneyUomID(*i)
	}
	return weu
}

// AddMoneyUomID adds i to the "money_uom_id" field.
func (weu *WorkEffortUpdate) AddMoneyUomID(i int) *WorkEffortUpdate {
	weu.mutation.AddMoneyUomID(i)
	return weu
}

// ClearMoneyUomID clears the value of the "money_uom_id" field.
func (weu *WorkEffortUpdate) ClearMoneyUomID() *WorkEffortUpdate {
	weu.mutation.ClearMoneyUomID()
	return weu
}

// SetSpecialTerms sets the "special_terms" field.
func (weu *WorkEffortUpdate) SetSpecialTerms(s string) *WorkEffortUpdate {
	weu.mutation.SetSpecialTerms(s)
	return weu
}

// SetNillableSpecialTerms sets the "special_terms" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableSpecialTerms(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetSpecialTerms(*s)
	}
	return weu
}

// ClearSpecialTerms clears the value of the "special_terms" field.
func (weu *WorkEffortUpdate) ClearSpecialTerms() *WorkEffortUpdate {
	weu.mutation.ClearSpecialTerms()
	return weu
}

// SetTimeTransparency sets the "time_transparency" field.
func (weu *WorkEffortUpdate) SetTimeTransparency(i int) *WorkEffortUpdate {
	weu.mutation.ResetTimeTransparency()
	weu.mutation.SetTimeTransparency(i)
	return weu
}

// SetNillableTimeTransparency sets the "time_transparency" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableTimeTransparency(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetTimeTransparency(*i)
	}
	return weu
}

// AddTimeTransparency adds i to the "time_transparency" field.
func (weu *WorkEffortUpdate) AddTimeTransparency(i int) *WorkEffortUpdate {
	weu.mutation.AddTimeTransparency(i)
	return weu
}

// ClearTimeTransparency clears the value of the "time_transparency" field.
func (weu *WorkEffortUpdate) ClearTimeTransparency() *WorkEffortUpdate {
	weu.mutation.ClearTimeTransparency()
	return weu
}

// SetUniversalID sets the "universal_id" field.
func (weu *WorkEffortUpdate) SetUniversalID(s string) *WorkEffortUpdate {
	weu.mutation.SetUniversalID(s)
	return weu
}

// SetNillableUniversalID sets the "universal_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableUniversalID(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetUniversalID(*s)
	}
	return weu
}

// ClearUniversalID clears the value of the "universal_id" field.
func (weu *WorkEffortUpdate) ClearUniversalID() *WorkEffortUpdate {
	weu.mutation.ClearUniversalID()
	return weu
}

// SetSourceReferenceID sets the "source_reference_id" field.
func (weu *WorkEffortUpdate) SetSourceReferenceID(s string) *WorkEffortUpdate {
	weu.mutation.SetSourceReferenceID(s)
	return weu
}

// SetNillableSourceReferenceID sets the "source_reference_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableSourceReferenceID(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetSourceReferenceID(*s)
	}
	return weu
}

// ClearSourceReferenceID clears the value of the "source_reference_id" field.
func (weu *WorkEffortUpdate) ClearSourceReferenceID() *WorkEffortUpdate {
	weu.mutation.ClearSourceReferenceID()
	return weu
}

// SetFacilityID sets the "facility_id" field.
func (weu *WorkEffortUpdate) SetFacilityID(i int) *WorkEffortUpdate {
	weu.mutation.ResetFacilityID()
	weu.mutation.SetFacilityID(i)
	return weu
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableFacilityID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetFacilityID(*i)
	}
	return weu
}

// AddFacilityID adds i to the "facility_id" field.
func (weu *WorkEffortUpdate) AddFacilityID(i int) *WorkEffortUpdate {
	weu.mutation.AddFacilityID(i)
	return weu
}

// ClearFacilityID clears the value of the "facility_id" field.
func (weu *WorkEffortUpdate) ClearFacilityID() *WorkEffortUpdate {
	weu.mutation.ClearFacilityID()
	return weu
}

// SetInfoURL sets the "info_url" field.
func (weu *WorkEffortUpdate) SetInfoURL(s string) *WorkEffortUpdate {
	weu.mutation.SetInfoURL(s)
	return weu
}

// SetNillableInfoURL sets the "info_url" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableInfoURL(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetInfoURL(*s)
	}
	return weu
}

// ClearInfoURL clears the value of the "info_url" field.
func (weu *WorkEffortUpdate) ClearInfoURL() *WorkEffortUpdate {
	weu.mutation.ClearInfoURL()
	return weu
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (weu *WorkEffortUpdate) SetRecurrenceInfoID(i int) *WorkEffortUpdate {
	weu.mutation.ResetRecurrenceInfoID()
	weu.mutation.SetRecurrenceInfoID(i)
	return weu
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableRecurrenceInfoID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetRecurrenceInfoID(*i)
	}
	return weu
}

// AddRecurrenceInfoID adds i to the "recurrence_info_id" field.
func (weu *WorkEffortUpdate) AddRecurrenceInfoID(i int) *WorkEffortUpdate {
	weu.mutation.AddRecurrenceInfoID(i)
	return weu
}

// ClearRecurrenceInfoID clears the value of the "recurrence_info_id" field.
func (weu *WorkEffortUpdate) ClearRecurrenceInfoID() *WorkEffortUpdate {
	weu.mutation.ClearRecurrenceInfoID()
	return weu
}

// SetRuntimeDataID sets the "runtime_data_id" field.
func (weu *WorkEffortUpdate) SetRuntimeDataID(i int) *WorkEffortUpdate {
	weu.mutation.ResetRuntimeDataID()
	weu.mutation.SetRuntimeDataID(i)
	return weu
}

// SetNillableRuntimeDataID sets the "runtime_data_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableRuntimeDataID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetRuntimeDataID(*i)
	}
	return weu
}

// AddRuntimeDataID adds i to the "runtime_data_id" field.
func (weu *WorkEffortUpdate) AddRuntimeDataID(i int) *WorkEffortUpdate {
	weu.mutation.AddRuntimeDataID(i)
	return weu
}

// ClearRuntimeDataID clears the value of the "runtime_data_id" field.
func (weu *WorkEffortUpdate) ClearRuntimeDataID() *WorkEffortUpdate {
	weu.mutation.ClearRuntimeDataID()
	return weu
}

// SetNoteID sets the "note_id" field.
func (weu *WorkEffortUpdate) SetNoteID(i int) *WorkEffortUpdate {
	weu.mutation.ResetNoteID()
	weu.mutation.SetNoteID(i)
	return weu
}

// SetNillableNoteID sets the "note_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableNoteID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetNoteID(*i)
	}
	return weu
}

// AddNoteID adds i to the "note_id" field.
func (weu *WorkEffortUpdate) AddNoteID(i int) *WorkEffortUpdate {
	weu.mutation.AddNoteID(i)
	return weu
}

// ClearNoteID clears the value of the "note_id" field.
func (weu *WorkEffortUpdate) ClearNoteID() *WorkEffortUpdate {
	weu.mutation.ClearNoteID()
	return weu
}

// SetServiceLoaderName sets the "service_loader_name" field.
func (weu *WorkEffortUpdate) SetServiceLoaderName(s string) *WorkEffortUpdate {
	weu.mutation.SetServiceLoaderName(s)
	return weu
}

// SetNillableServiceLoaderName sets the "service_loader_name" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableServiceLoaderName(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetServiceLoaderName(*s)
	}
	return weu
}

// ClearServiceLoaderName clears the value of the "service_loader_name" field.
func (weu *WorkEffortUpdate) ClearServiceLoaderName() *WorkEffortUpdate {
	weu.mutation.ClearServiceLoaderName()
	return weu
}

// SetQuantityToProduce sets the "quantity_to_produce" field.
func (weu *WorkEffortUpdate) SetQuantityToProduce(f float64) *WorkEffortUpdate {
	weu.mutation.ResetQuantityToProduce()
	weu.mutation.SetQuantityToProduce(f)
	return weu
}

// SetNillableQuantityToProduce sets the "quantity_to_produce" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableQuantityToProduce(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetQuantityToProduce(*f)
	}
	return weu
}

// AddQuantityToProduce adds f to the "quantity_to_produce" field.
func (weu *WorkEffortUpdate) AddQuantityToProduce(f float64) *WorkEffortUpdate {
	weu.mutation.AddQuantityToProduce(f)
	return weu
}

// ClearQuantityToProduce clears the value of the "quantity_to_produce" field.
func (weu *WorkEffortUpdate) ClearQuantityToProduce() *WorkEffortUpdate {
	weu.mutation.ClearQuantityToProduce()
	return weu
}

// SetQuantityProduced sets the "quantity_produced" field.
func (weu *WorkEffortUpdate) SetQuantityProduced(f float64) *WorkEffortUpdate {
	weu.mutation.ResetQuantityProduced()
	weu.mutation.SetQuantityProduced(f)
	return weu
}

// SetNillableQuantityProduced sets the "quantity_produced" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableQuantityProduced(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetQuantityProduced(*f)
	}
	return weu
}

// AddQuantityProduced adds f to the "quantity_produced" field.
func (weu *WorkEffortUpdate) AddQuantityProduced(f float64) *WorkEffortUpdate {
	weu.mutation.AddQuantityProduced(f)
	return weu
}

// ClearQuantityProduced clears the value of the "quantity_produced" field.
func (weu *WorkEffortUpdate) ClearQuantityProduced() *WorkEffortUpdate {
	weu.mutation.ClearQuantityProduced()
	return weu
}

// SetQuantityRejected sets the "quantity_rejected" field.
func (weu *WorkEffortUpdate) SetQuantityRejected(f float64) *WorkEffortUpdate {
	weu.mutation.ResetQuantityRejected()
	weu.mutation.SetQuantityRejected(f)
	return weu
}

// SetNillableQuantityRejected sets the "quantity_rejected" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableQuantityRejected(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetQuantityRejected(*f)
	}
	return weu
}

// AddQuantityRejected adds f to the "quantity_rejected" field.
func (weu *WorkEffortUpdate) AddQuantityRejected(f float64) *WorkEffortUpdate {
	weu.mutation.AddQuantityRejected(f)
	return weu
}

// ClearQuantityRejected clears the value of the "quantity_rejected" field.
func (weu *WorkEffortUpdate) ClearQuantityRejected() *WorkEffortUpdate {
	weu.mutation.ClearQuantityRejected()
	return weu
}

// SetReservPersons sets the "reserv_persons" field.
func (weu *WorkEffortUpdate) SetReservPersons(f float64) *WorkEffortUpdate {
	weu.mutation.ResetReservPersons()
	weu.mutation.SetReservPersons(f)
	return weu
}

// SetNillableReservPersons sets the "reserv_persons" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableReservPersons(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetReservPersons(*f)
	}
	return weu
}

// AddReservPersons adds f to the "reserv_persons" field.
func (weu *WorkEffortUpdate) AddReservPersons(f float64) *WorkEffortUpdate {
	weu.mutation.AddReservPersons(f)
	return weu
}

// ClearReservPersons clears the value of the "reserv_persons" field.
func (weu *WorkEffortUpdate) ClearReservPersons() *WorkEffortUpdate {
	weu.mutation.ClearReservPersons()
	return weu
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (weu *WorkEffortUpdate) SetReserv2NdPpPerc(f float64) *WorkEffortUpdate {
	weu.mutation.ResetReserv2NdPpPerc()
	weu.mutation.SetReserv2NdPpPerc(f)
	return weu
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableReserv2NdPpPerc(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetReserv2NdPpPerc(*f)
	}
	return weu
}

// AddReserv2NdPpPerc adds f to the "reserv_2_nd_pp_perc" field.
func (weu *WorkEffortUpdate) AddReserv2NdPpPerc(f float64) *WorkEffortUpdate {
	weu.mutation.AddReserv2NdPpPerc(f)
	return weu
}

// ClearReserv2NdPpPerc clears the value of the "reserv_2_nd_pp_perc" field.
func (weu *WorkEffortUpdate) ClearReserv2NdPpPerc() *WorkEffortUpdate {
	weu.mutation.ClearReserv2NdPpPerc()
	return weu
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (weu *WorkEffortUpdate) SetReservNthPpPerc(f float64) *WorkEffortUpdate {
	weu.mutation.ResetReservNthPpPerc()
	weu.mutation.SetReservNthPpPerc(f)
	return weu
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableReservNthPpPerc(f *float64) *WorkEffortUpdate {
	if f != nil {
		weu.SetReservNthPpPerc(*f)
	}
	return weu
}

// AddReservNthPpPerc adds f to the "reserv_nth_pp_perc" field.
func (weu *WorkEffortUpdate) AddReservNthPpPerc(f float64) *WorkEffortUpdate {
	weu.mutation.AddReservNthPpPerc(f)
	return weu
}

// ClearReservNthPpPerc clears the value of the "reserv_nth_pp_perc" field.
func (weu *WorkEffortUpdate) ClearReservNthPpPerc() *WorkEffortUpdate {
	weu.mutation.ClearReservNthPpPerc()
	return weu
}

// SetAccommodationMapID sets the "accommodation_map_id" field.
func (weu *WorkEffortUpdate) SetAccommodationMapID(i int) *WorkEffortUpdate {
	weu.mutation.ResetAccommodationMapID()
	weu.mutation.SetAccommodationMapID(i)
	return weu
}

// SetNillableAccommodationMapID sets the "accommodation_map_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableAccommodationMapID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetAccommodationMapID(*i)
	}
	return weu
}

// AddAccommodationMapID adds i to the "accommodation_map_id" field.
func (weu *WorkEffortUpdate) AddAccommodationMapID(i int) *WorkEffortUpdate {
	weu.mutation.AddAccommodationMapID(i)
	return weu
}

// ClearAccommodationMapID clears the value of the "accommodation_map_id" field.
func (weu *WorkEffortUpdate) ClearAccommodationMapID() *WorkEffortUpdate {
	weu.mutation.ClearAccommodationMapID()
	return weu
}

// SetAccommodationSpotID sets the "accommodation_spot_id" field.
func (weu *WorkEffortUpdate) SetAccommodationSpotID(i int) *WorkEffortUpdate {
	weu.mutation.ResetAccommodationSpotID()
	weu.mutation.SetAccommodationSpotID(i)
	return weu
}

// SetNillableAccommodationSpotID sets the "accommodation_spot_id" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableAccommodationSpotID(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetAccommodationSpotID(*i)
	}
	return weu
}

// AddAccommodationSpotID adds i to the "accommodation_spot_id" field.
func (weu *WorkEffortUpdate) AddAccommodationSpotID(i int) *WorkEffortUpdate {
	weu.mutation.AddAccommodationSpotID(i)
	return weu
}

// ClearAccommodationSpotID clears the value of the "accommodation_spot_id" field.
func (weu *WorkEffortUpdate) ClearAccommodationSpotID() *WorkEffortUpdate {
	weu.mutation.ClearAccommodationSpotID()
	return weu
}

// SetRevisionNumber sets the "revision_number" field.
func (weu *WorkEffortUpdate) SetRevisionNumber(i int) *WorkEffortUpdate {
	weu.mutation.ResetRevisionNumber()
	weu.mutation.SetRevisionNumber(i)
	return weu
}

// SetNillableRevisionNumber sets the "revision_number" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableRevisionNumber(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetRevisionNumber(*i)
	}
	return weu
}

// AddRevisionNumber adds i to the "revision_number" field.
func (weu *WorkEffortUpdate) AddRevisionNumber(i int) *WorkEffortUpdate {
	weu.mutation.AddRevisionNumber(i)
	return weu
}

// ClearRevisionNumber clears the value of the "revision_number" field.
func (weu *WorkEffortUpdate) ClearRevisionNumber() *WorkEffortUpdate {
	weu.mutation.ClearRevisionNumber()
	return weu
}

// SetCreatedDate sets the "created_date" field.
func (weu *WorkEffortUpdate) SetCreatedDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetCreatedDate(t)
	return weu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableCreatedDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetCreatedDate(*t)
	}
	return weu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (weu *WorkEffortUpdate) ClearCreatedDate() *WorkEffortUpdate {
	weu.mutation.ClearCreatedDate()
	return weu
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (weu *WorkEffortUpdate) SetCreatedByUserLogin(s string) *WorkEffortUpdate {
	weu.mutation.SetCreatedByUserLogin(s)
	return weu
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableCreatedByUserLogin(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetCreatedByUserLogin(*s)
	}
	return weu
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (weu *WorkEffortUpdate) ClearCreatedByUserLogin() *WorkEffortUpdate {
	weu.mutation.ClearCreatedByUserLogin()
	return weu
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (weu *WorkEffortUpdate) SetLastModifiedDate(t time.Time) *WorkEffortUpdate {
	weu.mutation.SetLastModifiedDate(t)
	return weu
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableLastModifiedDate(t *time.Time) *WorkEffortUpdate {
	if t != nil {
		weu.SetLastModifiedDate(*t)
	}
	return weu
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (weu *WorkEffortUpdate) ClearLastModifiedDate() *WorkEffortUpdate {
	weu.mutation.ClearLastModifiedDate()
	return weu
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (weu *WorkEffortUpdate) SetLastModifiedByUserLogin(s string) *WorkEffortUpdate {
	weu.mutation.SetLastModifiedByUserLogin(s)
	return weu
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableLastModifiedByUserLogin(s *string) *WorkEffortUpdate {
	if s != nil {
		weu.SetLastModifiedByUserLogin(*s)
	}
	return weu
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (weu *WorkEffortUpdate) ClearLastModifiedByUserLogin() *WorkEffortUpdate {
	weu.mutation.ClearLastModifiedByUserLogin()
	return weu
}

// SetSequenceNum sets the "sequence_num" field.
func (weu *WorkEffortUpdate) SetSequenceNum(i int) *WorkEffortUpdate {
	weu.mutation.ResetSequenceNum()
	weu.mutation.SetSequenceNum(i)
	return weu
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableSequenceNum(i *int) *WorkEffortUpdate {
	if i != nil {
		weu.SetSequenceNum(*i)
	}
	return weu
}

// AddSequenceNum adds i to the "sequence_num" field.
func (weu *WorkEffortUpdate) AddSequenceNum(i int) *WorkEffortUpdate {
	weu.mutation.AddSequenceNum(i)
	return weu
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (weu *WorkEffortUpdate) ClearSequenceNum() *WorkEffortUpdate {
	weu.mutation.ClearSequenceNum()
	return weu
}

// SetParentID sets the "parent" edge to the WorkEffort entity by ID.
func (weu *WorkEffortUpdate) SetParentID(id int) *WorkEffortUpdate {
	weu.mutation.SetParentID(id)
	return weu
}

// SetNillableParentID sets the "parent" edge to the WorkEffort entity by ID if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableParentID(id *int) *WorkEffortUpdate {
	if id != nil {
		weu = weu.SetParentID(*id)
	}
	return weu
}

// SetParent sets the "parent" edge to the WorkEffort entity.
func (weu *WorkEffortUpdate) SetParent(w *WorkEffort) *WorkEffortUpdate {
	return weu.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkEffort entity by IDs.
func (weu *WorkEffortUpdate) AddChildIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddChildIDs(ids...)
	return weu
}

// AddChildren adds the "children" edges to the WorkEffort entity.
func (weu *WorkEffortUpdate) AddChildren(w ...*WorkEffort) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddChildIDs(ids...)
}

// SetFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID.
func (weu *WorkEffortUpdate) SetFixedAssetID(id int) *WorkEffortUpdate {
	weu.mutation.SetFixedAssetID(id)
	return weu
}

// SetNillableFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableFixedAssetID(id *int) *WorkEffortUpdate {
	if id != nil {
		weu = weu.SetFixedAssetID(*id)
	}
	return weu
}

// SetFixedAsset sets the "fixed_asset" edge to the FixedAsset entity.
func (weu *WorkEffortUpdate) SetFixedAsset(f *FixedAsset) *WorkEffortUpdate {
	return weu.SetFixedAssetID(f.ID)
}

// SetTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID.
func (weu *WorkEffortUpdate) SetTemporalExpressionID(id int) *WorkEffortUpdate {
	weu.mutation.SetTemporalExpressionID(id)
	return weu
}

// SetNillableTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (weu *WorkEffortUpdate) SetNillableTemporalExpressionID(id *int) *WorkEffortUpdate {
	if id != nil {
		weu = weu.SetTemporalExpressionID(*id)
	}
	return weu
}

// SetTemporalExpression sets the "temporal_expression" edge to the TemporalExpression entity.
func (weu *WorkEffortUpdate) SetTemporalExpression(t *TemporalExpression) *WorkEffortUpdate {
	return weu.SetTemporalExpressionID(t.ID)
}

// AddChildWorkEffortIDs adds the "child_work_efforts" edge to the WorkEffort entity by IDs.
func (weu *WorkEffortUpdate) AddChildWorkEffortIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddChildWorkEffortIDs(ids...)
	return weu
}

// AddChildWorkEfforts adds the "child_work_efforts" edges to the WorkEffort entity.
func (weu *WorkEffortUpdate) AddChildWorkEfforts(w ...*WorkEffort) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddChildWorkEffortIDs(ids...)
}

// AddFromWorkEffortAssocIDs adds the "from_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (weu *WorkEffortUpdate) AddFromWorkEffortAssocIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddFromWorkEffortAssocIDs(ids...)
	return weu
}

// AddFromWorkEffortAssocs adds the "from_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weu *WorkEffortUpdate) AddFromWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddFromWorkEffortAssocIDs(ids...)
}

// AddToWorkEffortAssocIDs adds the "to_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (weu *WorkEffortUpdate) AddToWorkEffortAssocIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddToWorkEffortAssocIDs(ids...)
	return weu
}

// AddToWorkEffortAssocs adds the "to_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weu *WorkEffortUpdate) AddToWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddToWorkEffortAssocIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (weu *WorkEffortUpdate) AddWorkEffortFixedAssetAssignIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return weu
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (weu *WorkEffortUpdate) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (weu *WorkEffortUpdate) AddWorkEffortPartyAssignmentIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return weu
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (weu *WorkEffortUpdate) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the WorkEffortMutation object of the builder.
func (weu *WorkEffortUpdate) Mutation() *WorkEffortMutation {
	return weu.mutation
}

// ClearParent clears the "parent" edge to the WorkEffort entity.
func (weu *WorkEffortUpdate) ClearParent() *WorkEffortUpdate {
	weu.mutation.ClearParent()
	return weu
}

// ClearChildren clears all "children" edges to the WorkEffort entity.
func (weu *WorkEffortUpdate) ClearChildren() *WorkEffortUpdate {
	weu.mutation.ClearChildren()
	return weu
}

// RemoveChildIDs removes the "children" edge to WorkEffort entities by IDs.
func (weu *WorkEffortUpdate) RemoveChildIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveChildIDs(ids...)
	return weu
}

// RemoveChildren removes "children" edges to WorkEffort entities.
func (weu *WorkEffortUpdate) RemoveChildren(w ...*WorkEffort) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveChildIDs(ids...)
}

// ClearFixedAsset clears the "fixed_asset" edge to the FixedAsset entity.
func (weu *WorkEffortUpdate) ClearFixedAsset() *WorkEffortUpdate {
	weu.mutation.ClearFixedAsset()
	return weu
}

// ClearTemporalExpression clears the "temporal_expression" edge to the TemporalExpression entity.
func (weu *WorkEffortUpdate) ClearTemporalExpression() *WorkEffortUpdate {
	weu.mutation.ClearTemporalExpression()
	return weu
}

// ClearChildWorkEfforts clears all "child_work_efforts" edges to the WorkEffort entity.
func (weu *WorkEffortUpdate) ClearChildWorkEfforts() *WorkEffortUpdate {
	weu.mutation.ClearChildWorkEfforts()
	return weu
}

// RemoveChildWorkEffortIDs removes the "child_work_efforts" edge to WorkEffort entities by IDs.
func (weu *WorkEffortUpdate) RemoveChildWorkEffortIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveChildWorkEffortIDs(ids...)
	return weu
}

// RemoveChildWorkEfforts removes "child_work_efforts" edges to WorkEffort entities.
func (weu *WorkEffortUpdate) RemoveChildWorkEfforts(w ...*WorkEffort) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveChildWorkEffortIDs(ids...)
}

// ClearFromWorkEffortAssocs clears all "from_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weu *WorkEffortUpdate) ClearFromWorkEffortAssocs() *WorkEffortUpdate {
	weu.mutation.ClearFromWorkEffortAssocs()
	return weu
}

// RemoveFromWorkEffortAssocIDs removes the "from_work_effort_assocs" edge to WorkEffortAssoc entities by IDs.
func (weu *WorkEffortUpdate) RemoveFromWorkEffortAssocIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveFromWorkEffortAssocIDs(ids...)
	return weu
}

// RemoveFromWorkEffortAssocs removes "from_work_effort_assocs" edges to WorkEffortAssoc entities.
func (weu *WorkEffortUpdate) RemoveFromWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveFromWorkEffortAssocIDs(ids...)
}

// ClearToWorkEffortAssocs clears all "to_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weu *WorkEffortUpdate) ClearToWorkEffortAssocs() *WorkEffortUpdate {
	weu.mutation.ClearToWorkEffortAssocs()
	return weu
}

// RemoveToWorkEffortAssocIDs removes the "to_work_effort_assocs" edge to WorkEffortAssoc entities by IDs.
func (weu *WorkEffortUpdate) RemoveToWorkEffortAssocIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveToWorkEffortAssocIDs(ids...)
	return weu
}

// RemoveToWorkEffortAssocs removes "to_work_effort_assocs" edges to WorkEffortAssoc entities.
func (weu *WorkEffortUpdate) RemoveToWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveToWorkEffortAssocIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (weu *WorkEffortUpdate) ClearWorkEffortFixedAssetAssigns() *WorkEffortUpdate {
	weu.mutation.ClearWorkEffortFixedAssetAssigns()
	return weu
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (weu *WorkEffortUpdate) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return weu
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (weu *WorkEffortUpdate) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (weu *WorkEffortUpdate) ClearWorkEffortPartyAssignments() *WorkEffortUpdate {
	weu.mutation.ClearWorkEffortPartyAssignments()
	return weu
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (weu *WorkEffortUpdate) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *WorkEffortUpdate {
	weu.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return weu
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (weu *WorkEffortUpdate) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *WorkEffortUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkEffortUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(weu.hooks) == 0 {
		if err = weu.check(); err != nil {
			return 0, err
		}
		affected, err = weu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = weu.check(); err != nil {
				return 0, err
			}
			weu.mutation = mutation
			affected, err = weu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(weu.hooks) - 1; i >= 0; i-- {
			mut = weu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, weu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkEffortUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkEffortUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkEffortUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkEffortUpdate) check() error {
	if v, ok := weu.mutation.SendNotificationEmail(); ok {
		if err := workeffort.SendNotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "send_notification_email", err: fmt.Errorf("ent: validator failed for field \"send_notification_email\": %w", err)}
		}
	}
	if v, ok := weu.mutation.SourceReferenceID(); ok {
		if err := workeffort.SourceReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "source_reference_id", err: fmt.Errorf("ent: validator failed for field \"source_reference_id\": %w", err)}
		}
	}
	return nil
}

func (weu *WorkEffortUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffort.Table,
			Columns: workeffort.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffort.FieldID,
			},
		},
	}
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.WorkEffortTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if value, ok := weu.mutation.AddedWorkEffortTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if weu.mutation.WorkEffortTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if value, ok := weu.mutation.CurrentStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if value, ok := weu.mutation.AddedCurrentStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if weu.mutation.CurrentStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if value, ok := weu.mutation.LastStatusUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastStatusUpdate,
		})
	}
	if weu.mutation.LastStatusUpdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldLastStatusUpdate,
		})
	}
	if value, ok := weu.mutation.WorkEffortPurposeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if value, ok := weu.mutation.AddedWorkEffortPurposeTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if weu.mutation.WorkEffortPurposeTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if value, ok := weu.mutation.ScopeEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if value, ok := weu.mutation.AddedScopeEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if weu.mutation.ScopeEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if value, ok := weu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPriority,
		})
	}
	if value, ok := weu.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPriority,
		})
	}
	if weu.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldPriority,
		})
	}
	if value, ok := weu.mutation.PercentComplete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if value, ok := weu.mutation.AddedPercentComplete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if weu.mutation.PercentCompleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if value, ok := weu.mutation.WorkEffortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldWorkEffortName,
		})
	}
	if weu.mutation.WorkEffortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldWorkEffortName,
		})
	}
	if value, ok := weu.mutation.ShowAsEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if value, ok := weu.mutation.AddedShowAsEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if weu.mutation.ShowAsEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if value, ok := weu.mutation.SendNotificationEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffort.FieldSendNotificationEmail,
		})
	}
	if weu.mutation.SendNotificationEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workeffort.FieldSendNotificationEmail,
		})
	}
	if value, ok := weu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldDescription,
		})
	}
	if weu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldDescription,
		})
	}
	if value, ok := weu.mutation.LocationDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLocationDesc,
		})
	}
	if weu.mutation.LocationDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldLocationDesc,
		})
	}
	if value, ok := weu.mutation.EstimatedStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedStartDate,
		})
	}
	if weu.mutation.EstimatedStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldEstimatedStartDate,
		})
	}
	if value, ok := weu.mutation.EstimatedCompletionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedCompletionDate,
		})
	}
	if weu.mutation.EstimatedCompletionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldEstimatedCompletionDate,
		})
	}
	if value, ok := weu.mutation.ActualStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualStartDate,
		})
	}
	if weu.mutation.ActualStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldActualStartDate,
		})
	}
	if value, ok := weu.mutation.ActualCompletionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualCompletionDate,
		})
	}
	if weu.mutation.ActualCompletionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldActualCompletionDate,
		})
	}
	if value, ok := weu.mutation.EstimatedMilliSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if value, ok := weu.mutation.AddedEstimatedMilliSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if weu.mutation.EstimatedMilliSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if value, ok := weu.mutation.EstimatedSetupMillis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if value, ok := weu.mutation.AddedEstimatedSetupMillis(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if weu.mutation.EstimatedSetupMillisCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if value, ok := weu.mutation.EstimateCalcMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if value, ok := weu.mutation.AddedEstimateCalcMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if weu.mutation.EstimateCalcMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if value, ok := weu.mutation.ActualMilliSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if value, ok := weu.mutation.AddedActualMilliSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if weu.mutation.ActualMilliSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if value, ok := weu.mutation.ActualSetupMillis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if value, ok := weu.mutation.AddedActualSetupMillis(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if weu.mutation.ActualSetupMillisCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if value, ok := weu.mutation.TotalMilliSecondsAllowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if value, ok := weu.mutation.AddedTotalMilliSecondsAllowed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if weu.mutation.TotalMilliSecondsAllowedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if value, ok := weu.mutation.TotalMoneyAllowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if value, ok := weu.mutation.AddedTotalMoneyAllowed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if weu.mutation.TotalMoneyAllowedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if value, ok := weu.mutation.MoneyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if value, ok := weu.mutation.AddedMoneyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if weu.mutation.MoneyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if value, ok := weu.mutation.SpecialTerms(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSpecialTerms,
		})
	}
	if weu.mutation.SpecialTermsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldSpecialTerms,
		})
	}
	if value, ok := weu.mutation.TimeTransparency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if value, ok := weu.mutation.AddedTimeTransparency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if weu.mutation.TimeTransparencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if value, ok := weu.mutation.UniversalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldUniversalID,
		})
	}
	if weu.mutation.UniversalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldUniversalID,
		})
	}
	if value, ok := weu.mutation.SourceReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSourceReferenceID,
		})
	}
	if weu.mutation.SourceReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldSourceReferenceID,
		})
	}
	if value, ok := weu.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldFacilityID,
		})
	}
	if value, ok := weu.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldFacilityID,
		})
	}
	if weu.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldFacilityID,
		})
	}
	if value, ok := weu.mutation.InfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldInfoURL,
		})
	}
	if weu.mutation.InfoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldInfoURL,
		})
	}
	if value, ok := weu.mutation.RecurrenceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if value, ok := weu.mutation.AddedRecurrenceInfoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if weu.mutation.RecurrenceInfoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if value, ok := weu.mutation.RuntimeDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if value, ok := weu.mutation.AddedRuntimeDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if weu.mutation.RuntimeDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if value, ok := weu.mutation.NoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldNoteID,
		})
	}
	if value, ok := weu.mutation.AddedNoteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldNoteID,
		})
	}
	if weu.mutation.NoteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldNoteID,
		})
	}
	if value, ok := weu.mutation.ServiceLoaderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldServiceLoaderName,
		})
	}
	if weu.mutation.ServiceLoaderNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldServiceLoaderName,
		})
	}
	if value, ok := weu.mutation.QuantityToProduce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if value, ok := weu.mutation.AddedQuantityToProduce(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if weu.mutation.QuantityToProduceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if value, ok := weu.mutation.QuantityProduced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if value, ok := weu.mutation.AddedQuantityProduced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if weu.mutation.QuantityProducedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if value, ok := weu.mutation.QuantityRejected(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if value, ok := weu.mutation.AddedQuantityRejected(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if weu.mutation.QuantityRejectedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if value, ok := weu.mutation.ReservPersons(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservPersons,
		})
	}
	if value, ok := weu.mutation.AddedReservPersons(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservPersons,
		})
	}
	if weu.mutation.ReservPersonsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReservPersons,
		})
	}
	if value, ok := weu.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := weu.mutation.AddedReserv2NdPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if weu.mutation.Reserv2NdPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := weu.mutation.ReservNthPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if value, ok := weu.mutation.AddedReservNthPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if weu.mutation.ReservNthPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if value, ok := weu.mutation.AccommodationMapID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if value, ok := weu.mutation.AddedAccommodationMapID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if weu.mutation.AccommodationMapIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if value, ok := weu.mutation.AccommodationSpotID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if value, ok := weu.mutation.AddedAccommodationSpotID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if weu.mutation.AccommodationSpotIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if value, ok := weu.mutation.RevisionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if value, ok := weu.mutation.AddedRevisionNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if weu.mutation.RevisionNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if value, ok := weu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldCreatedDate,
		})
	}
	if weu.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldCreatedDate,
		})
	}
	if value, ok := weu.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldCreatedByUserLogin,
		})
	}
	if weu.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldCreatedByUserLogin,
		})
	}
	if value, ok := weu.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastModifiedDate,
		})
	}
	if weu.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldLastModifiedDate,
		})
	}
	if value, ok := weu.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLastModifiedByUserLogin,
		})
	}
	if weu.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldLastModifiedByUserLogin,
		})
	}
	if value, ok := weu.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if value, ok := weu.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if weu.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if weu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.ParentTable,
			Columns: []string{workeffort.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.ParentTable,
			Columns: []string{workeffort.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !weu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.FixedAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.FixedAssetTable,
			Columns: []string{workeffort.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.FixedAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.FixedAssetTable,
			Columns: []string{workeffort.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.TemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.TemporalExpressionTable,
			Columns: []string{workeffort.TemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.TemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.TemporalExpressionTable,
			Columns: []string{workeffort.TemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ChildWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedChildWorkEffortsIDs(); len(nodes) > 0 && !weu.mutation.ChildWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ChildWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.FromWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedFromWorkEffortAssocsIDs(); len(nodes) > 0 && !weu.mutation.FromWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.FromWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ToWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedToWorkEffortAssocsIDs(); len(nodes) > 0 && !weu.mutation.ToWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ToWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !weu.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !weu.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffort.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortUpdateOne is the builder for updating a single WorkEffort entity.
type WorkEffortUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortMutation
}

// SetWorkEffortTypeID sets the "work_effort_type_id" field.
func (weuo *WorkEffortUpdateOne) SetWorkEffortTypeID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetWorkEffortTypeID()
	weuo.mutation.SetWorkEffortTypeID(i)
	return weuo
}

// SetNillableWorkEffortTypeID sets the "work_effort_type_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableWorkEffortTypeID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetWorkEffortTypeID(*i)
	}
	return weuo
}

// AddWorkEffortTypeID adds i to the "work_effort_type_id" field.
func (weuo *WorkEffortUpdateOne) AddWorkEffortTypeID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddWorkEffortTypeID(i)
	return weuo
}

// ClearWorkEffortTypeID clears the value of the "work_effort_type_id" field.
func (weuo *WorkEffortUpdateOne) ClearWorkEffortTypeID() *WorkEffortUpdateOne {
	weuo.mutation.ClearWorkEffortTypeID()
	return weuo
}

// SetCurrentStatusID sets the "current_status_id" field.
func (weuo *WorkEffortUpdateOne) SetCurrentStatusID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetCurrentStatusID()
	weuo.mutation.SetCurrentStatusID(i)
	return weuo
}

// SetNillableCurrentStatusID sets the "current_status_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableCurrentStatusID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetCurrentStatusID(*i)
	}
	return weuo
}

// AddCurrentStatusID adds i to the "current_status_id" field.
func (weuo *WorkEffortUpdateOne) AddCurrentStatusID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddCurrentStatusID(i)
	return weuo
}

// ClearCurrentStatusID clears the value of the "current_status_id" field.
func (weuo *WorkEffortUpdateOne) ClearCurrentStatusID() *WorkEffortUpdateOne {
	weuo.mutation.ClearCurrentStatusID()
	return weuo
}

// SetLastStatusUpdate sets the "last_status_update" field.
func (weuo *WorkEffortUpdateOne) SetLastStatusUpdate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetLastStatusUpdate(t)
	return weuo
}

// SetNillableLastStatusUpdate sets the "last_status_update" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableLastStatusUpdate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetLastStatusUpdate(*t)
	}
	return weuo
}

// ClearLastStatusUpdate clears the value of the "last_status_update" field.
func (weuo *WorkEffortUpdateOne) ClearLastStatusUpdate() *WorkEffortUpdateOne {
	weuo.mutation.ClearLastStatusUpdate()
	return weuo
}

// SetWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field.
func (weuo *WorkEffortUpdateOne) SetWorkEffortPurposeTypeID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetWorkEffortPurposeTypeID()
	weuo.mutation.SetWorkEffortPurposeTypeID(i)
	return weuo
}

// SetNillableWorkEffortPurposeTypeID sets the "work_effort_purpose_type_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableWorkEffortPurposeTypeID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetWorkEffortPurposeTypeID(*i)
	}
	return weuo
}

// AddWorkEffortPurposeTypeID adds i to the "work_effort_purpose_type_id" field.
func (weuo *WorkEffortUpdateOne) AddWorkEffortPurposeTypeID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddWorkEffortPurposeTypeID(i)
	return weuo
}

// ClearWorkEffortPurposeTypeID clears the value of the "work_effort_purpose_type_id" field.
func (weuo *WorkEffortUpdateOne) ClearWorkEffortPurposeTypeID() *WorkEffortUpdateOne {
	weuo.mutation.ClearWorkEffortPurposeTypeID()
	return weuo
}

// SetScopeEnumID sets the "scope_enum_id" field.
func (weuo *WorkEffortUpdateOne) SetScopeEnumID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetScopeEnumID()
	weuo.mutation.SetScopeEnumID(i)
	return weuo
}

// SetNillableScopeEnumID sets the "scope_enum_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableScopeEnumID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetScopeEnumID(*i)
	}
	return weuo
}

// AddScopeEnumID adds i to the "scope_enum_id" field.
func (weuo *WorkEffortUpdateOne) AddScopeEnumID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddScopeEnumID(i)
	return weuo
}

// ClearScopeEnumID clears the value of the "scope_enum_id" field.
func (weuo *WorkEffortUpdateOne) ClearScopeEnumID() *WorkEffortUpdateOne {
	weuo.mutation.ClearScopeEnumID()
	return weuo
}

// SetPriority sets the "priority" field.
func (weuo *WorkEffortUpdateOne) SetPriority(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetPriority()
	weuo.mutation.SetPriority(i)
	return weuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillablePriority(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetPriority(*i)
	}
	return weuo
}

// AddPriority adds i to the "priority" field.
func (weuo *WorkEffortUpdateOne) AddPriority(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddPriority(i)
	return weuo
}

// ClearPriority clears the value of the "priority" field.
func (weuo *WorkEffortUpdateOne) ClearPriority() *WorkEffortUpdateOne {
	weuo.mutation.ClearPriority()
	return weuo
}

// SetPercentComplete sets the "percent_complete" field.
func (weuo *WorkEffortUpdateOne) SetPercentComplete(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetPercentComplete()
	weuo.mutation.SetPercentComplete(i)
	return weuo
}

// SetNillablePercentComplete sets the "percent_complete" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillablePercentComplete(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetPercentComplete(*i)
	}
	return weuo
}

// AddPercentComplete adds i to the "percent_complete" field.
func (weuo *WorkEffortUpdateOne) AddPercentComplete(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddPercentComplete(i)
	return weuo
}

// ClearPercentComplete clears the value of the "percent_complete" field.
func (weuo *WorkEffortUpdateOne) ClearPercentComplete() *WorkEffortUpdateOne {
	weuo.mutation.ClearPercentComplete()
	return weuo
}

// SetWorkEffortName sets the "work_effort_name" field.
func (weuo *WorkEffortUpdateOne) SetWorkEffortName(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetWorkEffortName(s)
	return weuo
}

// SetNillableWorkEffortName sets the "work_effort_name" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableWorkEffortName(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetWorkEffortName(*s)
	}
	return weuo
}

// ClearWorkEffortName clears the value of the "work_effort_name" field.
func (weuo *WorkEffortUpdateOne) ClearWorkEffortName() *WorkEffortUpdateOne {
	weuo.mutation.ClearWorkEffortName()
	return weuo
}

// SetShowAsEnumID sets the "show_as_enum_id" field.
func (weuo *WorkEffortUpdateOne) SetShowAsEnumID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetShowAsEnumID()
	weuo.mutation.SetShowAsEnumID(i)
	return weuo
}

// SetNillableShowAsEnumID sets the "show_as_enum_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableShowAsEnumID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetShowAsEnumID(*i)
	}
	return weuo
}

// AddShowAsEnumID adds i to the "show_as_enum_id" field.
func (weuo *WorkEffortUpdateOne) AddShowAsEnumID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddShowAsEnumID(i)
	return weuo
}

// ClearShowAsEnumID clears the value of the "show_as_enum_id" field.
func (weuo *WorkEffortUpdateOne) ClearShowAsEnumID() *WorkEffortUpdateOne {
	weuo.mutation.ClearShowAsEnumID()
	return weuo
}

// SetSendNotificationEmail sets the "send_notification_email" field.
func (weuo *WorkEffortUpdateOne) SetSendNotificationEmail(wne workeffort.SendNotificationEmail) *WorkEffortUpdateOne {
	weuo.mutation.SetSendNotificationEmail(wne)
	return weuo
}

// SetNillableSendNotificationEmail sets the "send_notification_email" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableSendNotificationEmail(wne *workeffort.SendNotificationEmail) *WorkEffortUpdateOne {
	if wne != nil {
		weuo.SetSendNotificationEmail(*wne)
	}
	return weuo
}

// ClearSendNotificationEmail clears the value of the "send_notification_email" field.
func (weuo *WorkEffortUpdateOne) ClearSendNotificationEmail() *WorkEffortUpdateOne {
	weuo.mutation.ClearSendNotificationEmail()
	return weuo
}

// SetDescription sets the "description" field.
func (weuo *WorkEffortUpdateOne) SetDescription(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetDescription(s)
	return weuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableDescription(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetDescription(*s)
	}
	return weuo
}

// ClearDescription clears the value of the "description" field.
func (weuo *WorkEffortUpdateOne) ClearDescription() *WorkEffortUpdateOne {
	weuo.mutation.ClearDescription()
	return weuo
}

// SetLocationDesc sets the "location_desc" field.
func (weuo *WorkEffortUpdateOne) SetLocationDesc(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetLocationDesc(s)
	return weuo
}

// SetNillableLocationDesc sets the "location_desc" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableLocationDesc(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetLocationDesc(*s)
	}
	return weuo
}

// ClearLocationDesc clears the value of the "location_desc" field.
func (weuo *WorkEffortUpdateOne) ClearLocationDesc() *WorkEffortUpdateOne {
	weuo.mutation.ClearLocationDesc()
	return weuo
}

// SetEstimatedStartDate sets the "estimated_start_date" field.
func (weuo *WorkEffortUpdateOne) SetEstimatedStartDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetEstimatedStartDate(t)
	return weuo
}

// SetNillableEstimatedStartDate sets the "estimated_start_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableEstimatedStartDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetEstimatedStartDate(*t)
	}
	return weuo
}

// ClearEstimatedStartDate clears the value of the "estimated_start_date" field.
func (weuo *WorkEffortUpdateOne) ClearEstimatedStartDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearEstimatedStartDate()
	return weuo
}

// SetEstimatedCompletionDate sets the "estimated_completion_date" field.
func (weuo *WorkEffortUpdateOne) SetEstimatedCompletionDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetEstimatedCompletionDate(t)
	return weuo
}

// SetNillableEstimatedCompletionDate sets the "estimated_completion_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableEstimatedCompletionDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetEstimatedCompletionDate(*t)
	}
	return weuo
}

// ClearEstimatedCompletionDate clears the value of the "estimated_completion_date" field.
func (weuo *WorkEffortUpdateOne) ClearEstimatedCompletionDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearEstimatedCompletionDate()
	return weuo
}

// SetActualStartDate sets the "actual_start_date" field.
func (weuo *WorkEffortUpdateOne) SetActualStartDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetActualStartDate(t)
	return weuo
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableActualStartDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetActualStartDate(*t)
	}
	return weuo
}

// ClearActualStartDate clears the value of the "actual_start_date" field.
func (weuo *WorkEffortUpdateOne) ClearActualStartDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearActualStartDate()
	return weuo
}

// SetActualCompletionDate sets the "actual_completion_date" field.
func (weuo *WorkEffortUpdateOne) SetActualCompletionDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetActualCompletionDate(t)
	return weuo
}

// SetNillableActualCompletionDate sets the "actual_completion_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableActualCompletionDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetActualCompletionDate(*t)
	}
	return weuo
}

// ClearActualCompletionDate clears the value of the "actual_completion_date" field.
func (weuo *WorkEffortUpdateOne) ClearActualCompletionDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearActualCompletionDate()
	return weuo
}

// SetEstimatedMilliSeconds sets the "estimated_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) SetEstimatedMilliSeconds(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetEstimatedMilliSeconds()
	weuo.mutation.SetEstimatedMilliSeconds(f)
	return weuo
}

// SetNillableEstimatedMilliSeconds sets the "estimated_milli_seconds" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableEstimatedMilliSeconds(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetEstimatedMilliSeconds(*f)
	}
	return weuo
}

// AddEstimatedMilliSeconds adds f to the "estimated_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) AddEstimatedMilliSeconds(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddEstimatedMilliSeconds(f)
	return weuo
}

// ClearEstimatedMilliSeconds clears the value of the "estimated_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) ClearEstimatedMilliSeconds() *WorkEffortUpdateOne {
	weuo.mutation.ClearEstimatedMilliSeconds()
	return weuo
}

// SetEstimatedSetupMillis sets the "estimated_setup_millis" field.
func (weuo *WorkEffortUpdateOne) SetEstimatedSetupMillis(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetEstimatedSetupMillis()
	weuo.mutation.SetEstimatedSetupMillis(f)
	return weuo
}

// SetNillableEstimatedSetupMillis sets the "estimated_setup_millis" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableEstimatedSetupMillis(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetEstimatedSetupMillis(*f)
	}
	return weuo
}

// AddEstimatedSetupMillis adds f to the "estimated_setup_millis" field.
func (weuo *WorkEffortUpdateOne) AddEstimatedSetupMillis(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddEstimatedSetupMillis(f)
	return weuo
}

// ClearEstimatedSetupMillis clears the value of the "estimated_setup_millis" field.
func (weuo *WorkEffortUpdateOne) ClearEstimatedSetupMillis() *WorkEffortUpdateOne {
	weuo.mutation.ClearEstimatedSetupMillis()
	return weuo
}

// SetEstimateCalcMethod sets the "estimate_calc_method" field.
func (weuo *WorkEffortUpdateOne) SetEstimateCalcMethod(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetEstimateCalcMethod()
	weuo.mutation.SetEstimateCalcMethod(i)
	return weuo
}

// SetNillableEstimateCalcMethod sets the "estimate_calc_method" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableEstimateCalcMethod(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetEstimateCalcMethod(*i)
	}
	return weuo
}

// AddEstimateCalcMethod adds i to the "estimate_calc_method" field.
func (weuo *WorkEffortUpdateOne) AddEstimateCalcMethod(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddEstimateCalcMethod(i)
	return weuo
}

// ClearEstimateCalcMethod clears the value of the "estimate_calc_method" field.
func (weuo *WorkEffortUpdateOne) ClearEstimateCalcMethod() *WorkEffortUpdateOne {
	weuo.mutation.ClearEstimateCalcMethod()
	return weuo
}

// SetActualMilliSeconds sets the "actual_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) SetActualMilliSeconds(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetActualMilliSeconds()
	weuo.mutation.SetActualMilliSeconds(f)
	return weuo
}

// SetNillableActualMilliSeconds sets the "actual_milli_seconds" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableActualMilliSeconds(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetActualMilliSeconds(*f)
	}
	return weuo
}

// AddActualMilliSeconds adds f to the "actual_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) AddActualMilliSeconds(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddActualMilliSeconds(f)
	return weuo
}

// ClearActualMilliSeconds clears the value of the "actual_milli_seconds" field.
func (weuo *WorkEffortUpdateOne) ClearActualMilliSeconds() *WorkEffortUpdateOne {
	weuo.mutation.ClearActualMilliSeconds()
	return weuo
}

// SetActualSetupMillis sets the "actual_setup_millis" field.
func (weuo *WorkEffortUpdateOne) SetActualSetupMillis(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetActualSetupMillis()
	weuo.mutation.SetActualSetupMillis(f)
	return weuo
}

// SetNillableActualSetupMillis sets the "actual_setup_millis" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableActualSetupMillis(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetActualSetupMillis(*f)
	}
	return weuo
}

// AddActualSetupMillis adds f to the "actual_setup_millis" field.
func (weuo *WorkEffortUpdateOne) AddActualSetupMillis(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddActualSetupMillis(f)
	return weuo
}

// ClearActualSetupMillis clears the value of the "actual_setup_millis" field.
func (weuo *WorkEffortUpdateOne) ClearActualSetupMillis() *WorkEffortUpdateOne {
	weuo.mutation.ClearActualSetupMillis()
	return weuo
}

// SetTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field.
func (weuo *WorkEffortUpdateOne) SetTotalMilliSecondsAllowed(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetTotalMilliSecondsAllowed()
	weuo.mutation.SetTotalMilliSecondsAllowed(f)
	return weuo
}

// SetNillableTotalMilliSecondsAllowed sets the "total_milli_seconds_allowed" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableTotalMilliSecondsAllowed(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetTotalMilliSecondsAllowed(*f)
	}
	return weuo
}

// AddTotalMilliSecondsAllowed adds f to the "total_milli_seconds_allowed" field.
func (weuo *WorkEffortUpdateOne) AddTotalMilliSecondsAllowed(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddTotalMilliSecondsAllowed(f)
	return weuo
}

// ClearTotalMilliSecondsAllowed clears the value of the "total_milli_seconds_allowed" field.
func (weuo *WorkEffortUpdateOne) ClearTotalMilliSecondsAllowed() *WorkEffortUpdateOne {
	weuo.mutation.ClearTotalMilliSecondsAllowed()
	return weuo
}

// SetTotalMoneyAllowed sets the "total_money_allowed" field.
func (weuo *WorkEffortUpdateOne) SetTotalMoneyAllowed(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetTotalMoneyAllowed()
	weuo.mutation.SetTotalMoneyAllowed(f)
	return weuo
}

// SetNillableTotalMoneyAllowed sets the "total_money_allowed" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableTotalMoneyAllowed(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetTotalMoneyAllowed(*f)
	}
	return weuo
}

// AddTotalMoneyAllowed adds f to the "total_money_allowed" field.
func (weuo *WorkEffortUpdateOne) AddTotalMoneyAllowed(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddTotalMoneyAllowed(f)
	return weuo
}

// ClearTotalMoneyAllowed clears the value of the "total_money_allowed" field.
func (weuo *WorkEffortUpdateOne) ClearTotalMoneyAllowed() *WorkEffortUpdateOne {
	weuo.mutation.ClearTotalMoneyAllowed()
	return weuo
}

// SetMoneyUomID sets the "money_uom_id" field.
func (weuo *WorkEffortUpdateOne) SetMoneyUomID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetMoneyUomID()
	weuo.mutation.SetMoneyUomID(i)
	return weuo
}

// SetNillableMoneyUomID sets the "money_uom_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableMoneyUomID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetMoneyUomID(*i)
	}
	return weuo
}

// AddMoneyUomID adds i to the "money_uom_id" field.
func (weuo *WorkEffortUpdateOne) AddMoneyUomID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddMoneyUomID(i)
	return weuo
}

// ClearMoneyUomID clears the value of the "money_uom_id" field.
func (weuo *WorkEffortUpdateOne) ClearMoneyUomID() *WorkEffortUpdateOne {
	weuo.mutation.ClearMoneyUomID()
	return weuo
}

// SetSpecialTerms sets the "special_terms" field.
func (weuo *WorkEffortUpdateOne) SetSpecialTerms(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetSpecialTerms(s)
	return weuo
}

// SetNillableSpecialTerms sets the "special_terms" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableSpecialTerms(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetSpecialTerms(*s)
	}
	return weuo
}

// ClearSpecialTerms clears the value of the "special_terms" field.
func (weuo *WorkEffortUpdateOne) ClearSpecialTerms() *WorkEffortUpdateOne {
	weuo.mutation.ClearSpecialTerms()
	return weuo
}

// SetTimeTransparency sets the "time_transparency" field.
func (weuo *WorkEffortUpdateOne) SetTimeTransparency(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetTimeTransparency()
	weuo.mutation.SetTimeTransparency(i)
	return weuo
}

// SetNillableTimeTransparency sets the "time_transparency" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableTimeTransparency(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetTimeTransparency(*i)
	}
	return weuo
}

// AddTimeTransparency adds i to the "time_transparency" field.
func (weuo *WorkEffortUpdateOne) AddTimeTransparency(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddTimeTransparency(i)
	return weuo
}

// ClearTimeTransparency clears the value of the "time_transparency" field.
func (weuo *WorkEffortUpdateOne) ClearTimeTransparency() *WorkEffortUpdateOne {
	weuo.mutation.ClearTimeTransparency()
	return weuo
}

// SetUniversalID sets the "universal_id" field.
func (weuo *WorkEffortUpdateOne) SetUniversalID(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetUniversalID(s)
	return weuo
}

// SetNillableUniversalID sets the "universal_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableUniversalID(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetUniversalID(*s)
	}
	return weuo
}

// ClearUniversalID clears the value of the "universal_id" field.
func (weuo *WorkEffortUpdateOne) ClearUniversalID() *WorkEffortUpdateOne {
	weuo.mutation.ClearUniversalID()
	return weuo
}

// SetSourceReferenceID sets the "source_reference_id" field.
func (weuo *WorkEffortUpdateOne) SetSourceReferenceID(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetSourceReferenceID(s)
	return weuo
}

// SetNillableSourceReferenceID sets the "source_reference_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableSourceReferenceID(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetSourceReferenceID(*s)
	}
	return weuo
}

// ClearSourceReferenceID clears the value of the "source_reference_id" field.
func (weuo *WorkEffortUpdateOne) ClearSourceReferenceID() *WorkEffortUpdateOne {
	weuo.mutation.ClearSourceReferenceID()
	return weuo
}

// SetFacilityID sets the "facility_id" field.
func (weuo *WorkEffortUpdateOne) SetFacilityID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetFacilityID()
	weuo.mutation.SetFacilityID(i)
	return weuo
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableFacilityID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetFacilityID(*i)
	}
	return weuo
}

// AddFacilityID adds i to the "facility_id" field.
func (weuo *WorkEffortUpdateOne) AddFacilityID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddFacilityID(i)
	return weuo
}

// ClearFacilityID clears the value of the "facility_id" field.
func (weuo *WorkEffortUpdateOne) ClearFacilityID() *WorkEffortUpdateOne {
	weuo.mutation.ClearFacilityID()
	return weuo
}

// SetInfoURL sets the "info_url" field.
func (weuo *WorkEffortUpdateOne) SetInfoURL(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetInfoURL(s)
	return weuo
}

// SetNillableInfoURL sets the "info_url" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableInfoURL(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetInfoURL(*s)
	}
	return weuo
}

// ClearInfoURL clears the value of the "info_url" field.
func (weuo *WorkEffortUpdateOne) ClearInfoURL() *WorkEffortUpdateOne {
	weuo.mutation.ClearInfoURL()
	return weuo
}

// SetRecurrenceInfoID sets the "recurrence_info_id" field.
func (weuo *WorkEffortUpdateOne) SetRecurrenceInfoID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetRecurrenceInfoID()
	weuo.mutation.SetRecurrenceInfoID(i)
	return weuo
}

// SetNillableRecurrenceInfoID sets the "recurrence_info_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableRecurrenceInfoID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetRecurrenceInfoID(*i)
	}
	return weuo
}

// AddRecurrenceInfoID adds i to the "recurrence_info_id" field.
func (weuo *WorkEffortUpdateOne) AddRecurrenceInfoID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddRecurrenceInfoID(i)
	return weuo
}

// ClearRecurrenceInfoID clears the value of the "recurrence_info_id" field.
func (weuo *WorkEffortUpdateOne) ClearRecurrenceInfoID() *WorkEffortUpdateOne {
	weuo.mutation.ClearRecurrenceInfoID()
	return weuo
}

// SetRuntimeDataID sets the "runtime_data_id" field.
func (weuo *WorkEffortUpdateOne) SetRuntimeDataID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetRuntimeDataID()
	weuo.mutation.SetRuntimeDataID(i)
	return weuo
}

// SetNillableRuntimeDataID sets the "runtime_data_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableRuntimeDataID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetRuntimeDataID(*i)
	}
	return weuo
}

// AddRuntimeDataID adds i to the "runtime_data_id" field.
func (weuo *WorkEffortUpdateOne) AddRuntimeDataID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddRuntimeDataID(i)
	return weuo
}

// ClearRuntimeDataID clears the value of the "runtime_data_id" field.
func (weuo *WorkEffortUpdateOne) ClearRuntimeDataID() *WorkEffortUpdateOne {
	weuo.mutation.ClearRuntimeDataID()
	return weuo
}

// SetNoteID sets the "note_id" field.
func (weuo *WorkEffortUpdateOne) SetNoteID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetNoteID()
	weuo.mutation.SetNoteID(i)
	return weuo
}

// SetNillableNoteID sets the "note_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableNoteID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetNoteID(*i)
	}
	return weuo
}

// AddNoteID adds i to the "note_id" field.
func (weuo *WorkEffortUpdateOne) AddNoteID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddNoteID(i)
	return weuo
}

// ClearNoteID clears the value of the "note_id" field.
func (weuo *WorkEffortUpdateOne) ClearNoteID() *WorkEffortUpdateOne {
	weuo.mutation.ClearNoteID()
	return weuo
}

// SetServiceLoaderName sets the "service_loader_name" field.
func (weuo *WorkEffortUpdateOne) SetServiceLoaderName(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetServiceLoaderName(s)
	return weuo
}

// SetNillableServiceLoaderName sets the "service_loader_name" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableServiceLoaderName(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetServiceLoaderName(*s)
	}
	return weuo
}

// ClearServiceLoaderName clears the value of the "service_loader_name" field.
func (weuo *WorkEffortUpdateOne) ClearServiceLoaderName() *WorkEffortUpdateOne {
	weuo.mutation.ClearServiceLoaderName()
	return weuo
}

// SetQuantityToProduce sets the "quantity_to_produce" field.
func (weuo *WorkEffortUpdateOne) SetQuantityToProduce(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetQuantityToProduce()
	weuo.mutation.SetQuantityToProduce(f)
	return weuo
}

// SetNillableQuantityToProduce sets the "quantity_to_produce" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableQuantityToProduce(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetQuantityToProduce(*f)
	}
	return weuo
}

// AddQuantityToProduce adds f to the "quantity_to_produce" field.
func (weuo *WorkEffortUpdateOne) AddQuantityToProduce(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddQuantityToProduce(f)
	return weuo
}

// ClearQuantityToProduce clears the value of the "quantity_to_produce" field.
func (weuo *WorkEffortUpdateOne) ClearQuantityToProduce() *WorkEffortUpdateOne {
	weuo.mutation.ClearQuantityToProduce()
	return weuo
}

// SetQuantityProduced sets the "quantity_produced" field.
func (weuo *WorkEffortUpdateOne) SetQuantityProduced(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetQuantityProduced()
	weuo.mutation.SetQuantityProduced(f)
	return weuo
}

// SetNillableQuantityProduced sets the "quantity_produced" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableQuantityProduced(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetQuantityProduced(*f)
	}
	return weuo
}

// AddQuantityProduced adds f to the "quantity_produced" field.
func (weuo *WorkEffortUpdateOne) AddQuantityProduced(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddQuantityProduced(f)
	return weuo
}

// ClearQuantityProduced clears the value of the "quantity_produced" field.
func (weuo *WorkEffortUpdateOne) ClearQuantityProduced() *WorkEffortUpdateOne {
	weuo.mutation.ClearQuantityProduced()
	return weuo
}

// SetQuantityRejected sets the "quantity_rejected" field.
func (weuo *WorkEffortUpdateOne) SetQuantityRejected(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetQuantityRejected()
	weuo.mutation.SetQuantityRejected(f)
	return weuo
}

// SetNillableQuantityRejected sets the "quantity_rejected" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableQuantityRejected(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetQuantityRejected(*f)
	}
	return weuo
}

// AddQuantityRejected adds f to the "quantity_rejected" field.
func (weuo *WorkEffortUpdateOne) AddQuantityRejected(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddQuantityRejected(f)
	return weuo
}

// ClearQuantityRejected clears the value of the "quantity_rejected" field.
func (weuo *WorkEffortUpdateOne) ClearQuantityRejected() *WorkEffortUpdateOne {
	weuo.mutation.ClearQuantityRejected()
	return weuo
}

// SetReservPersons sets the "reserv_persons" field.
func (weuo *WorkEffortUpdateOne) SetReservPersons(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetReservPersons()
	weuo.mutation.SetReservPersons(f)
	return weuo
}

// SetNillableReservPersons sets the "reserv_persons" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableReservPersons(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetReservPersons(*f)
	}
	return weuo
}

// AddReservPersons adds f to the "reserv_persons" field.
func (weuo *WorkEffortUpdateOne) AddReservPersons(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddReservPersons(f)
	return weuo
}

// ClearReservPersons clears the value of the "reserv_persons" field.
func (weuo *WorkEffortUpdateOne) ClearReservPersons() *WorkEffortUpdateOne {
	weuo.mutation.ClearReservPersons()
	return weuo
}

// SetReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field.
func (weuo *WorkEffortUpdateOne) SetReserv2NdPpPerc(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetReserv2NdPpPerc()
	weuo.mutation.SetReserv2NdPpPerc(f)
	return weuo
}

// SetNillableReserv2NdPpPerc sets the "reserv_2_nd_pp_perc" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableReserv2NdPpPerc(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetReserv2NdPpPerc(*f)
	}
	return weuo
}

// AddReserv2NdPpPerc adds f to the "reserv_2_nd_pp_perc" field.
func (weuo *WorkEffortUpdateOne) AddReserv2NdPpPerc(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddReserv2NdPpPerc(f)
	return weuo
}

// ClearReserv2NdPpPerc clears the value of the "reserv_2_nd_pp_perc" field.
func (weuo *WorkEffortUpdateOne) ClearReserv2NdPpPerc() *WorkEffortUpdateOne {
	weuo.mutation.ClearReserv2NdPpPerc()
	return weuo
}

// SetReservNthPpPerc sets the "reserv_nth_pp_perc" field.
func (weuo *WorkEffortUpdateOne) SetReservNthPpPerc(f float64) *WorkEffortUpdateOne {
	weuo.mutation.ResetReservNthPpPerc()
	weuo.mutation.SetReservNthPpPerc(f)
	return weuo
}

// SetNillableReservNthPpPerc sets the "reserv_nth_pp_perc" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableReservNthPpPerc(f *float64) *WorkEffortUpdateOne {
	if f != nil {
		weuo.SetReservNthPpPerc(*f)
	}
	return weuo
}

// AddReservNthPpPerc adds f to the "reserv_nth_pp_perc" field.
func (weuo *WorkEffortUpdateOne) AddReservNthPpPerc(f float64) *WorkEffortUpdateOne {
	weuo.mutation.AddReservNthPpPerc(f)
	return weuo
}

// ClearReservNthPpPerc clears the value of the "reserv_nth_pp_perc" field.
func (weuo *WorkEffortUpdateOne) ClearReservNthPpPerc() *WorkEffortUpdateOne {
	weuo.mutation.ClearReservNthPpPerc()
	return weuo
}

// SetAccommodationMapID sets the "accommodation_map_id" field.
func (weuo *WorkEffortUpdateOne) SetAccommodationMapID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetAccommodationMapID()
	weuo.mutation.SetAccommodationMapID(i)
	return weuo
}

// SetNillableAccommodationMapID sets the "accommodation_map_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableAccommodationMapID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetAccommodationMapID(*i)
	}
	return weuo
}

// AddAccommodationMapID adds i to the "accommodation_map_id" field.
func (weuo *WorkEffortUpdateOne) AddAccommodationMapID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddAccommodationMapID(i)
	return weuo
}

// ClearAccommodationMapID clears the value of the "accommodation_map_id" field.
func (weuo *WorkEffortUpdateOne) ClearAccommodationMapID() *WorkEffortUpdateOne {
	weuo.mutation.ClearAccommodationMapID()
	return weuo
}

// SetAccommodationSpotID sets the "accommodation_spot_id" field.
func (weuo *WorkEffortUpdateOne) SetAccommodationSpotID(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetAccommodationSpotID()
	weuo.mutation.SetAccommodationSpotID(i)
	return weuo
}

// SetNillableAccommodationSpotID sets the "accommodation_spot_id" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableAccommodationSpotID(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetAccommodationSpotID(*i)
	}
	return weuo
}

// AddAccommodationSpotID adds i to the "accommodation_spot_id" field.
func (weuo *WorkEffortUpdateOne) AddAccommodationSpotID(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddAccommodationSpotID(i)
	return weuo
}

// ClearAccommodationSpotID clears the value of the "accommodation_spot_id" field.
func (weuo *WorkEffortUpdateOne) ClearAccommodationSpotID() *WorkEffortUpdateOne {
	weuo.mutation.ClearAccommodationSpotID()
	return weuo
}

// SetRevisionNumber sets the "revision_number" field.
func (weuo *WorkEffortUpdateOne) SetRevisionNumber(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetRevisionNumber()
	weuo.mutation.SetRevisionNumber(i)
	return weuo
}

// SetNillableRevisionNumber sets the "revision_number" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableRevisionNumber(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetRevisionNumber(*i)
	}
	return weuo
}

// AddRevisionNumber adds i to the "revision_number" field.
func (weuo *WorkEffortUpdateOne) AddRevisionNumber(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddRevisionNumber(i)
	return weuo
}

// ClearRevisionNumber clears the value of the "revision_number" field.
func (weuo *WorkEffortUpdateOne) ClearRevisionNumber() *WorkEffortUpdateOne {
	weuo.mutation.ClearRevisionNumber()
	return weuo
}

// SetCreatedDate sets the "created_date" field.
func (weuo *WorkEffortUpdateOne) SetCreatedDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetCreatedDate(t)
	return weuo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableCreatedDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetCreatedDate(*t)
	}
	return weuo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (weuo *WorkEffortUpdateOne) ClearCreatedDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearCreatedDate()
	return weuo
}

// SetCreatedByUserLogin sets the "created_by_user_login" field.
func (weuo *WorkEffortUpdateOne) SetCreatedByUserLogin(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetCreatedByUserLogin(s)
	return weuo
}

// SetNillableCreatedByUserLogin sets the "created_by_user_login" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableCreatedByUserLogin(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetCreatedByUserLogin(*s)
	}
	return weuo
}

// ClearCreatedByUserLogin clears the value of the "created_by_user_login" field.
func (weuo *WorkEffortUpdateOne) ClearCreatedByUserLogin() *WorkEffortUpdateOne {
	weuo.mutation.ClearCreatedByUserLogin()
	return weuo
}

// SetLastModifiedDate sets the "last_modified_date" field.
func (weuo *WorkEffortUpdateOne) SetLastModifiedDate(t time.Time) *WorkEffortUpdateOne {
	weuo.mutation.SetLastModifiedDate(t)
	return weuo
}

// SetNillableLastModifiedDate sets the "last_modified_date" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableLastModifiedDate(t *time.Time) *WorkEffortUpdateOne {
	if t != nil {
		weuo.SetLastModifiedDate(*t)
	}
	return weuo
}

// ClearLastModifiedDate clears the value of the "last_modified_date" field.
func (weuo *WorkEffortUpdateOne) ClearLastModifiedDate() *WorkEffortUpdateOne {
	weuo.mutation.ClearLastModifiedDate()
	return weuo
}

// SetLastModifiedByUserLogin sets the "last_modified_by_user_login" field.
func (weuo *WorkEffortUpdateOne) SetLastModifiedByUserLogin(s string) *WorkEffortUpdateOne {
	weuo.mutation.SetLastModifiedByUserLogin(s)
	return weuo
}

// SetNillableLastModifiedByUserLogin sets the "last_modified_by_user_login" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableLastModifiedByUserLogin(s *string) *WorkEffortUpdateOne {
	if s != nil {
		weuo.SetLastModifiedByUserLogin(*s)
	}
	return weuo
}

// ClearLastModifiedByUserLogin clears the value of the "last_modified_by_user_login" field.
func (weuo *WorkEffortUpdateOne) ClearLastModifiedByUserLogin() *WorkEffortUpdateOne {
	weuo.mutation.ClearLastModifiedByUserLogin()
	return weuo
}

// SetSequenceNum sets the "sequence_num" field.
func (weuo *WorkEffortUpdateOne) SetSequenceNum(i int) *WorkEffortUpdateOne {
	weuo.mutation.ResetSequenceNum()
	weuo.mutation.SetSequenceNum(i)
	return weuo
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableSequenceNum(i *int) *WorkEffortUpdateOne {
	if i != nil {
		weuo.SetSequenceNum(*i)
	}
	return weuo
}

// AddSequenceNum adds i to the "sequence_num" field.
func (weuo *WorkEffortUpdateOne) AddSequenceNum(i int) *WorkEffortUpdateOne {
	weuo.mutation.AddSequenceNum(i)
	return weuo
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (weuo *WorkEffortUpdateOne) ClearSequenceNum() *WorkEffortUpdateOne {
	weuo.mutation.ClearSequenceNum()
	return weuo
}

// SetParentID sets the "parent" edge to the WorkEffort entity by ID.
func (weuo *WorkEffortUpdateOne) SetParentID(id int) *WorkEffortUpdateOne {
	weuo.mutation.SetParentID(id)
	return weuo
}

// SetNillableParentID sets the "parent" edge to the WorkEffort entity by ID if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableParentID(id *int) *WorkEffortUpdateOne {
	if id != nil {
		weuo = weuo.SetParentID(*id)
	}
	return weuo
}

// SetParent sets the "parent" edge to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) SetParent(w *WorkEffort) *WorkEffortUpdateOne {
	return weuo.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkEffort entity by IDs.
func (weuo *WorkEffortUpdateOne) AddChildIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddChildIDs(ids...)
	return weuo
}

// AddChildren adds the "children" edges to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) AddChildren(w ...*WorkEffort) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddChildIDs(ids...)
}

// SetFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID.
func (weuo *WorkEffortUpdateOne) SetFixedAssetID(id int) *WorkEffortUpdateOne {
	weuo.mutation.SetFixedAssetID(id)
	return weuo
}

// SetNillableFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableFixedAssetID(id *int) *WorkEffortUpdateOne {
	if id != nil {
		weuo = weuo.SetFixedAssetID(*id)
	}
	return weuo
}

// SetFixedAsset sets the "fixed_asset" edge to the FixedAsset entity.
func (weuo *WorkEffortUpdateOne) SetFixedAsset(f *FixedAsset) *WorkEffortUpdateOne {
	return weuo.SetFixedAssetID(f.ID)
}

// SetTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID.
func (weuo *WorkEffortUpdateOne) SetTemporalExpressionID(id int) *WorkEffortUpdateOne {
	weuo.mutation.SetTemporalExpressionID(id)
	return weuo
}

// SetNillableTemporalExpressionID sets the "temporal_expression" edge to the TemporalExpression entity by ID if the given value is not nil.
func (weuo *WorkEffortUpdateOne) SetNillableTemporalExpressionID(id *int) *WorkEffortUpdateOne {
	if id != nil {
		weuo = weuo.SetTemporalExpressionID(*id)
	}
	return weuo
}

// SetTemporalExpression sets the "temporal_expression" edge to the TemporalExpression entity.
func (weuo *WorkEffortUpdateOne) SetTemporalExpression(t *TemporalExpression) *WorkEffortUpdateOne {
	return weuo.SetTemporalExpressionID(t.ID)
}

// AddChildWorkEffortIDs adds the "child_work_efforts" edge to the WorkEffort entity by IDs.
func (weuo *WorkEffortUpdateOne) AddChildWorkEffortIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddChildWorkEffortIDs(ids...)
	return weuo
}

// AddChildWorkEfforts adds the "child_work_efforts" edges to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) AddChildWorkEfforts(w ...*WorkEffort) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddChildWorkEffortIDs(ids...)
}

// AddFromWorkEffortAssocIDs adds the "from_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (weuo *WorkEffortUpdateOne) AddFromWorkEffortAssocIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddFromWorkEffortAssocIDs(ids...)
	return weuo
}

// AddFromWorkEffortAssocs adds the "from_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weuo *WorkEffortUpdateOne) AddFromWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddFromWorkEffortAssocIDs(ids...)
}

// AddToWorkEffortAssocIDs adds the "to_work_effort_assocs" edge to the WorkEffortAssoc entity by IDs.
func (weuo *WorkEffortUpdateOne) AddToWorkEffortAssocIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddToWorkEffortAssocIDs(ids...)
	return weuo
}

// AddToWorkEffortAssocs adds the "to_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weuo *WorkEffortUpdateOne) AddToWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddToWorkEffortAssocIDs(ids...)
}

// AddWorkEffortFixedAssetAssignIDs adds the "work_effort_fixed_asset_assigns" edge to the WorkEffortFixedAssetAssign entity by IDs.
func (weuo *WorkEffortUpdateOne) AddWorkEffortFixedAssetAssignIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddWorkEffortFixedAssetAssignIDs(ids...)
	return weuo
}

// AddWorkEffortFixedAssetAssigns adds the "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (weuo *WorkEffortUpdateOne) AddWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddWorkEffortFixedAssetAssignIDs(ids...)
}

// AddWorkEffortPartyAssignmentIDs adds the "work_effort_party_assignments" edge to the WorkEffortPartyAssignment entity by IDs.
func (weuo *WorkEffortUpdateOne) AddWorkEffortPartyAssignmentIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.AddWorkEffortPartyAssignmentIDs(ids...)
	return weuo
}

// AddWorkEffortPartyAssignments adds the "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (weuo *WorkEffortUpdateOne) AddWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddWorkEffortPartyAssignmentIDs(ids...)
}

// Mutation returns the WorkEffortMutation object of the builder.
func (weuo *WorkEffortUpdateOne) Mutation() *WorkEffortMutation {
	return weuo.mutation
}

// ClearParent clears the "parent" edge to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) ClearParent() *WorkEffortUpdateOne {
	weuo.mutation.ClearParent()
	return weuo
}

// ClearChildren clears all "children" edges to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) ClearChildren() *WorkEffortUpdateOne {
	weuo.mutation.ClearChildren()
	return weuo
}

// RemoveChildIDs removes the "children" edge to WorkEffort entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveChildIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveChildIDs(ids...)
	return weuo
}

// RemoveChildren removes "children" edges to WorkEffort entities.
func (weuo *WorkEffortUpdateOne) RemoveChildren(w ...*WorkEffort) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveChildIDs(ids...)
}

// ClearFixedAsset clears the "fixed_asset" edge to the FixedAsset entity.
func (weuo *WorkEffortUpdateOne) ClearFixedAsset() *WorkEffortUpdateOne {
	weuo.mutation.ClearFixedAsset()
	return weuo
}

// ClearTemporalExpression clears the "temporal_expression" edge to the TemporalExpression entity.
func (weuo *WorkEffortUpdateOne) ClearTemporalExpression() *WorkEffortUpdateOne {
	weuo.mutation.ClearTemporalExpression()
	return weuo
}

// ClearChildWorkEfforts clears all "child_work_efforts" edges to the WorkEffort entity.
func (weuo *WorkEffortUpdateOne) ClearChildWorkEfforts() *WorkEffortUpdateOne {
	weuo.mutation.ClearChildWorkEfforts()
	return weuo
}

// RemoveChildWorkEffortIDs removes the "child_work_efforts" edge to WorkEffort entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveChildWorkEffortIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveChildWorkEffortIDs(ids...)
	return weuo
}

// RemoveChildWorkEfforts removes "child_work_efforts" edges to WorkEffort entities.
func (weuo *WorkEffortUpdateOne) RemoveChildWorkEfforts(w ...*WorkEffort) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveChildWorkEffortIDs(ids...)
}

// ClearFromWorkEffortAssocs clears all "from_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weuo *WorkEffortUpdateOne) ClearFromWorkEffortAssocs() *WorkEffortUpdateOne {
	weuo.mutation.ClearFromWorkEffortAssocs()
	return weuo
}

// RemoveFromWorkEffortAssocIDs removes the "from_work_effort_assocs" edge to WorkEffortAssoc entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveFromWorkEffortAssocIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveFromWorkEffortAssocIDs(ids...)
	return weuo
}

// RemoveFromWorkEffortAssocs removes "from_work_effort_assocs" edges to WorkEffortAssoc entities.
func (weuo *WorkEffortUpdateOne) RemoveFromWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveFromWorkEffortAssocIDs(ids...)
}

// ClearToWorkEffortAssocs clears all "to_work_effort_assocs" edges to the WorkEffortAssoc entity.
func (weuo *WorkEffortUpdateOne) ClearToWorkEffortAssocs() *WorkEffortUpdateOne {
	weuo.mutation.ClearToWorkEffortAssocs()
	return weuo
}

// RemoveToWorkEffortAssocIDs removes the "to_work_effort_assocs" edge to WorkEffortAssoc entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveToWorkEffortAssocIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveToWorkEffortAssocIDs(ids...)
	return weuo
}

// RemoveToWorkEffortAssocs removes "to_work_effort_assocs" edges to WorkEffortAssoc entities.
func (weuo *WorkEffortUpdateOne) RemoveToWorkEffortAssocs(w ...*WorkEffortAssoc) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveToWorkEffortAssocIDs(ids...)
}

// ClearWorkEffortFixedAssetAssigns clears all "work_effort_fixed_asset_assigns" edges to the WorkEffortFixedAssetAssign entity.
func (weuo *WorkEffortUpdateOne) ClearWorkEffortFixedAssetAssigns() *WorkEffortUpdateOne {
	weuo.mutation.ClearWorkEffortFixedAssetAssigns()
	return weuo
}

// RemoveWorkEffortFixedAssetAssignIDs removes the "work_effort_fixed_asset_assigns" edge to WorkEffortFixedAssetAssign entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveWorkEffortFixedAssetAssignIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveWorkEffortFixedAssetAssignIDs(ids...)
	return weuo
}

// RemoveWorkEffortFixedAssetAssigns removes "work_effort_fixed_asset_assigns" edges to WorkEffortFixedAssetAssign entities.
func (weuo *WorkEffortUpdateOne) RemoveWorkEffortFixedAssetAssigns(w ...*WorkEffortFixedAssetAssign) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveWorkEffortFixedAssetAssignIDs(ids...)
}

// ClearWorkEffortPartyAssignments clears all "work_effort_party_assignments" edges to the WorkEffortPartyAssignment entity.
func (weuo *WorkEffortUpdateOne) ClearWorkEffortPartyAssignments() *WorkEffortUpdateOne {
	weuo.mutation.ClearWorkEffortPartyAssignments()
	return weuo
}

// RemoveWorkEffortPartyAssignmentIDs removes the "work_effort_party_assignments" edge to WorkEffortPartyAssignment entities by IDs.
func (weuo *WorkEffortUpdateOne) RemoveWorkEffortPartyAssignmentIDs(ids ...int) *WorkEffortUpdateOne {
	weuo.mutation.RemoveWorkEffortPartyAssignmentIDs(ids...)
	return weuo
}

// RemoveWorkEffortPartyAssignments removes "work_effort_party_assignments" edges to WorkEffortPartyAssignment entities.
func (weuo *WorkEffortUpdateOne) RemoveWorkEffortPartyAssignments(w ...*WorkEffortPartyAssignment) *WorkEffortUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveWorkEffortPartyAssignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkEffortUpdateOne) Select(field string, fields ...string) *WorkEffortUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkEffort entity.
func (weuo *WorkEffortUpdateOne) Save(ctx context.Context) (*WorkEffort, error) {
	var (
		err  error
		node *WorkEffort
	)
	if len(weuo.hooks) == 0 {
		if err = weuo.check(); err != nil {
			return nil, err
		}
		node, err = weuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = weuo.check(); err != nil {
				return nil, err
			}
			weuo.mutation = mutation
			node, err = weuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(weuo.hooks) - 1; i >= 0; i-- {
			mut = weuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, weuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkEffortUpdateOne) SaveX(ctx context.Context) *WorkEffort {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkEffortUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkEffortUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkEffortUpdateOne) check() error {
	if v, ok := weuo.mutation.SendNotificationEmail(); ok {
		if err := workeffort.SendNotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "send_notification_email", err: fmt.Errorf("ent: validator failed for field \"send_notification_email\": %w", err)}
		}
	}
	if v, ok := weuo.mutation.SourceReferenceID(); ok {
		if err := workeffort.SourceReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "source_reference_id", err: fmt.Errorf("ent: validator failed for field \"source_reference_id\": %w", err)}
		}
	}
	return nil
}

func (weuo *WorkEffortUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffort, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffort.Table,
			Columns: workeffort.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffort.FieldID,
			},
		},
	}
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffort.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffort.FieldID)
		for _, f := range fields {
			if !workeffort.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workeffort.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.WorkEffortTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if value, ok := weuo.mutation.AddedWorkEffortTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if weuo.mutation.WorkEffortTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldWorkEffortTypeID,
		})
	}
	if value, ok := weuo.mutation.CurrentStatusID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if value, ok := weuo.mutation.AddedCurrentStatusID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if weuo.mutation.CurrentStatusIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldCurrentStatusID,
		})
	}
	if value, ok := weuo.mutation.LastStatusUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastStatusUpdate,
		})
	}
	if weuo.mutation.LastStatusUpdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldLastStatusUpdate,
		})
	}
	if value, ok := weuo.mutation.WorkEffortPurposeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if value, ok := weuo.mutation.AddedWorkEffortPurposeTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if weuo.mutation.WorkEffortPurposeTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldWorkEffortPurposeTypeID,
		})
	}
	if value, ok := weuo.mutation.ScopeEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if value, ok := weuo.mutation.AddedScopeEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if weuo.mutation.ScopeEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldScopeEnumID,
		})
	}
	if value, ok := weuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPriority,
		})
	}
	if value, ok := weuo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPriority,
		})
	}
	if weuo.mutation.PriorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldPriority,
		})
	}
	if value, ok := weuo.mutation.PercentComplete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if value, ok := weuo.mutation.AddedPercentComplete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if weuo.mutation.PercentCompleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldPercentComplete,
		})
	}
	if value, ok := weuo.mutation.WorkEffortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldWorkEffortName,
		})
	}
	if weuo.mutation.WorkEffortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldWorkEffortName,
		})
	}
	if value, ok := weuo.mutation.ShowAsEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if value, ok := weuo.mutation.AddedShowAsEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if weuo.mutation.ShowAsEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldShowAsEnumID,
		})
	}
	if value, ok := weuo.mutation.SendNotificationEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffort.FieldSendNotificationEmail,
		})
	}
	if weuo.mutation.SendNotificationEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workeffort.FieldSendNotificationEmail,
		})
	}
	if value, ok := weuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldDescription,
		})
	}
	if weuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldDescription,
		})
	}
	if value, ok := weuo.mutation.LocationDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLocationDesc,
		})
	}
	if weuo.mutation.LocationDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldLocationDesc,
		})
	}
	if value, ok := weuo.mutation.EstimatedStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedStartDate,
		})
	}
	if weuo.mutation.EstimatedStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldEstimatedStartDate,
		})
	}
	if value, ok := weuo.mutation.EstimatedCompletionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldEstimatedCompletionDate,
		})
	}
	if weuo.mutation.EstimatedCompletionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldEstimatedCompletionDate,
		})
	}
	if value, ok := weuo.mutation.ActualStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualStartDate,
		})
	}
	if weuo.mutation.ActualStartDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldActualStartDate,
		})
	}
	if value, ok := weuo.mutation.ActualCompletionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldActualCompletionDate,
		})
	}
	if weuo.mutation.ActualCompletionDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldActualCompletionDate,
		})
	}
	if value, ok := weuo.mutation.EstimatedMilliSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if value, ok := weuo.mutation.AddedEstimatedMilliSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if weuo.mutation.EstimatedMilliSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldEstimatedMilliSeconds,
		})
	}
	if value, ok := weuo.mutation.EstimatedSetupMillis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if value, ok := weuo.mutation.AddedEstimatedSetupMillis(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if weuo.mutation.EstimatedSetupMillisCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldEstimatedSetupMillis,
		})
	}
	if value, ok := weuo.mutation.EstimateCalcMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if value, ok := weuo.mutation.AddedEstimateCalcMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if weuo.mutation.EstimateCalcMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldEstimateCalcMethod,
		})
	}
	if value, ok := weuo.mutation.ActualMilliSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if value, ok := weuo.mutation.AddedActualMilliSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if weuo.mutation.ActualMilliSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldActualMilliSeconds,
		})
	}
	if value, ok := weuo.mutation.ActualSetupMillis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if value, ok := weuo.mutation.AddedActualSetupMillis(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if weuo.mutation.ActualSetupMillisCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldActualSetupMillis,
		})
	}
	if value, ok := weuo.mutation.TotalMilliSecondsAllowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if value, ok := weuo.mutation.AddedTotalMilliSecondsAllowed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if weuo.mutation.TotalMilliSecondsAllowedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldTotalMilliSecondsAllowed,
		})
	}
	if value, ok := weuo.mutation.TotalMoneyAllowed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if value, ok := weuo.mutation.AddedTotalMoneyAllowed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if weuo.mutation.TotalMoneyAllowedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldTotalMoneyAllowed,
		})
	}
	if value, ok := weuo.mutation.MoneyUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if value, ok := weuo.mutation.AddedMoneyUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if weuo.mutation.MoneyUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldMoneyUomID,
		})
	}
	if value, ok := weuo.mutation.SpecialTerms(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSpecialTerms,
		})
	}
	if weuo.mutation.SpecialTermsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldSpecialTerms,
		})
	}
	if value, ok := weuo.mutation.TimeTransparency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if value, ok := weuo.mutation.AddedTimeTransparency(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if weuo.mutation.TimeTransparencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldTimeTransparency,
		})
	}
	if value, ok := weuo.mutation.UniversalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldUniversalID,
		})
	}
	if weuo.mutation.UniversalIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldUniversalID,
		})
	}
	if value, ok := weuo.mutation.SourceReferenceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldSourceReferenceID,
		})
	}
	if weuo.mutation.SourceReferenceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldSourceReferenceID,
		})
	}
	if value, ok := weuo.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldFacilityID,
		})
	}
	if value, ok := weuo.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldFacilityID,
		})
	}
	if weuo.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldFacilityID,
		})
	}
	if value, ok := weuo.mutation.InfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldInfoURL,
		})
	}
	if weuo.mutation.InfoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldInfoURL,
		})
	}
	if value, ok := weuo.mutation.RecurrenceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if value, ok := weuo.mutation.AddedRecurrenceInfoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if weuo.mutation.RecurrenceInfoIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRecurrenceInfoID,
		})
	}
	if value, ok := weuo.mutation.RuntimeDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if value, ok := weuo.mutation.AddedRuntimeDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if weuo.mutation.RuntimeDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRuntimeDataID,
		})
	}
	if value, ok := weuo.mutation.NoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldNoteID,
		})
	}
	if value, ok := weuo.mutation.AddedNoteID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldNoteID,
		})
	}
	if weuo.mutation.NoteIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldNoteID,
		})
	}
	if value, ok := weuo.mutation.ServiceLoaderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldServiceLoaderName,
		})
	}
	if weuo.mutation.ServiceLoaderNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldServiceLoaderName,
		})
	}
	if value, ok := weuo.mutation.QuantityToProduce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if value, ok := weuo.mutation.AddedQuantityToProduce(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if weuo.mutation.QuantityToProduceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityToProduce,
		})
	}
	if value, ok := weuo.mutation.QuantityProduced(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if value, ok := weuo.mutation.AddedQuantityProduced(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if weuo.mutation.QuantityProducedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityProduced,
		})
	}
	if value, ok := weuo.mutation.QuantityRejected(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if value, ok := weuo.mutation.AddedQuantityRejected(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if weuo.mutation.QuantityRejectedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldQuantityRejected,
		})
	}
	if value, ok := weuo.mutation.ReservPersons(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservPersons,
		})
	}
	if value, ok := weuo.mutation.AddedReservPersons(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservPersons,
		})
	}
	if weuo.mutation.ReservPersonsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReservPersons,
		})
	}
	if value, ok := weuo.mutation.Reserv2NdPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := weuo.mutation.AddedReserv2NdPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if weuo.mutation.Reserv2NdPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReserv2NdPpPerc,
		})
	}
	if value, ok := weuo.mutation.ReservNthPpPerc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if value, ok := weuo.mutation.AddedReservNthPpPerc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if weuo.mutation.ReservNthPpPercCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffort.FieldReservNthPpPerc,
		})
	}
	if value, ok := weuo.mutation.AccommodationMapID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if value, ok := weuo.mutation.AddedAccommodationMapID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if weuo.mutation.AccommodationMapIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldAccommodationMapID,
		})
	}
	if value, ok := weuo.mutation.AccommodationSpotID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if value, ok := weuo.mutation.AddedAccommodationSpotID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if weuo.mutation.AccommodationSpotIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldAccommodationSpotID,
		})
	}
	if value, ok := weuo.mutation.RevisionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if value, ok := weuo.mutation.AddedRevisionNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if weuo.mutation.RevisionNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldRevisionNumber,
		})
	}
	if value, ok := weuo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldCreatedDate,
		})
	}
	if weuo.mutation.CreatedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldCreatedDate,
		})
	}
	if value, ok := weuo.mutation.CreatedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldCreatedByUserLogin,
		})
	}
	if weuo.mutation.CreatedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldCreatedByUserLogin,
		})
	}
	if value, ok := weuo.mutation.LastModifiedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffort.FieldLastModifiedDate,
		})
	}
	if weuo.mutation.LastModifiedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffort.FieldLastModifiedDate,
		})
	}
	if value, ok := weuo.mutation.LastModifiedByUserLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffort.FieldLastModifiedByUserLogin,
		})
	}
	if weuo.mutation.LastModifiedByUserLoginCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffort.FieldLastModifiedByUserLogin,
		})
	}
	if value, ok := weuo.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if value, ok := weuo.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if weuo.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffort.FieldSequenceNum,
		})
	}
	if weuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.ParentTable,
			Columns: []string{workeffort.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.ParentTable,
			Columns: []string{workeffort.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !weuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ChildrenTable,
			Columns: []string{workeffort.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.FixedAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.FixedAssetTable,
			Columns: []string{workeffort.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.FixedAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.FixedAssetTable,
			Columns: []string{workeffort.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.TemporalExpressionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.TemporalExpressionTable,
			Columns: []string{workeffort.TemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.TemporalExpressionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffort.TemporalExpressionTable,
			Columns: []string{workeffort.TemporalExpressionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: temporalexpression.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ChildWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedChildWorkEffortsIDs(); len(nodes) > 0 && !weuo.mutation.ChildWorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ChildWorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workeffort.ChildWorkEffortsTable,
			Columns: workeffort.ChildWorkEffortsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.FromWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedFromWorkEffortAssocsIDs(); len(nodes) > 0 && !weuo.mutation.FromWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.FromWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.FromWorkEffortAssocsTable,
			Columns: []string{workeffort.FromWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ToWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedToWorkEffortAssocsIDs(); len(nodes) > 0 && !weuo.mutation.ToWorkEffortAssocsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ToWorkEffortAssocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.ToWorkEffortAssocsTable,
			Columns: []string{workeffort.ToWorkEffortAssocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortassoc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedWorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 && !weuo.mutation.WorkEffortFixedAssetAssignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WorkEffortFixedAssetAssignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortFixedAssetAssignsTable,
			Columns: []string{workeffort.WorkEffortFixedAssetAssignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortfixedassetassign.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedWorkEffortPartyAssignmentsIDs(); len(nodes) > 0 && !weuo.mutation.WorkEffortPartyAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WorkEffortPartyAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workeffort.WorkEffortPartyAssignmentsTable,
			Columns: []string{workeffort.WorkEffortPartyAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffortpartyassignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffort{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffort.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
