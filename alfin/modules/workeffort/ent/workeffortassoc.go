// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
)

// WorkEffortAssoc is the model entity for the WorkEffortAssoc schema.
type WorkEffortAssoc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WorkEffortAssocTypeID holds the value of the "work_effort_assoc_type_id" field.
	WorkEffortAssocTypeID int `json:"work_effort_assoc_type_id,omitempty"`
	// SequenceNum holds the value of the "sequence_num" field.
	SequenceNum int `json:"sequence_num,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkEffortAssocQuery when eager-loading is set.
	Edges                               WorkEffortAssocEdges `json:"edges"`
	work_effort_from_work_effort_assocs *int
	work_effort_to_work_effort_assocs   *int
}

// WorkEffortAssocEdges holds the relations/edges for other nodes in the graph.
type WorkEffortAssocEdges struct {
	// FromWorkEffort holds the value of the from_work_effort edge.
	FromWorkEffort *WorkEffort `json:"from_work_effort,omitempty"`
	// ToWorkEffort holds the value of the to_work_effort edge.
	ToWorkEffort *WorkEffort `json:"to_work_effort,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromWorkEffortOrErr returns the FromWorkEffort value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortAssocEdges) FromWorkEffortOrErr() (*WorkEffort, error) {
	if e.loadedTypes[0] {
		if e.FromWorkEffort == nil {
			// The edge from_work_effort was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workeffort.Label}
		}
		return e.FromWorkEffort, nil
	}
	return nil, &NotLoadedError{edge: "from_work_effort"}
}

// ToWorkEffortOrErr returns the ToWorkEffort value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortAssocEdges) ToWorkEffortOrErr() (*WorkEffort, error) {
	if e.loadedTypes[1] {
		if e.ToWorkEffort == nil {
			// The edge to_work_effort was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workeffort.Label}
		}
		return e.ToWorkEffort, nil
	}
	return nil, &NotLoadedError{edge: "to_work_effort"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkEffortAssoc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workeffortassoc.FieldID, workeffortassoc.FieldWorkEffortAssocTypeID, workeffortassoc.FieldSequenceNum:
			values[i] = new(sql.NullInt64)
		case workeffortassoc.FieldFromDate, workeffortassoc.FieldThruDate:
			values[i] = new(sql.NullTime)
		case workeffortassoc.ForeignKeys[0]: // work_effort_from_work_effort_assocs
			values[i] = new(sql.NullInt64)
		case workeffortassoc.ForeignKeys[1]: // work_effort_to_work_effort_assocs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkEffortAssoc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkEffortAssoc fields.
func (wea *WorkEffortAssoc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workeffortassoc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wea.ID = int(value.Int64)
		case workeffortassoc.FieldWorkEffortAssocTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field work_effort_assoc_type_id", values[i])
			} else if value.Valid {
				wea.WorkEffortAssocTypeID = int(value.Int64)
			}
		case workeffortassoc.FieldSequenceNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_num", values[i])
			} else if value.Valid {
				wea.SequenceNum = int(value.Int64)
			}
		case workeffortassoc.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				wea.FromDate = value.Time
			}
		case workeffortassoc.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				wea.ThruDate = value.Time
			}
		case workeffortassoc.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_effort_from_work_effort_assocs", value)
			} else if value.Valid {
				wea.work_effort_from_work_effort_assocs = new(int)
				*wea.work_effort_from_work_effort_assocs = int(value.Int64)
			}
		case workeffortassoc.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_effort_to_work_effort_assocs", value)
			} else if value.Valid {
				wea.work_effort_to_work_effort_assocs = new(int)
				*wea.work_effort_to_work_effort_assocs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFromWorkEffort queries the "from_work_effort" edge of the WorkEffortAssoc entity.
func (wea *WorkEffortAssoc) QueryFromWorkEffort() *WorkEffortQuery {
	return (&WorkEffortAssocClient{config: wea.config}).QueryFromWorkEffort(wea)
}

// QueryToWorkEffort queries the "to_work_effort" edge of the WorkEffortAssoc entity.
func (wea *WorkEffortAssoc) QueryToWorkEffort() *WorkEffortQuery {
	return (&WorkEffortAssocClient{config: wea.config}).QueryToWorkEffort(wea)
}

// Update returns a builder for updating this WorkEffortAssoc.
// Note that you need to call WorkEffortAssoc.Unwrap() before calling this method if this WorkEffortAssoc
// was returned from a transaction, and the transaction was committed or rolled back.
func (wea *WorkEffortAssoc) Update() *WorkEffortAssocUpdateOne {
	return (&WorkEffortAssocClient{config: wea.config}).UpdateOne(wea)
}

// Unwrap unwraps the WorkEffortAssoc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wea *WorkEffortAssoc) Unwrap() *WorkEffortAssoc {
	tx, ok := wea.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkEffortAssoc is not a transactional entity")
	}
	wea.config.driver = tx.drv
	return wea
}

// String implements the fmt.Stringer.
func (wea *WorkEffortAssoc) String() string {
	var builder strings.Builder
	builder.WriteString("WorkEffortAssoc(")
	builder.WriteString(fmt.Sprintf("id=%v", wea.ID))
	builder.WriteString(", work_effort_assoc_type_id=")
	builder.WriteString(fmt.Sprintf("%v", wea.WorkEffortAssocTypeID))
	builder.WriteString(", sequence_num=")
	builder.WriteString(fmt.Sprintf("%v", wea.SequenceNum))
	builder.WriteString(", from_date=")
	builder.WriteString(wea.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(wea.ThruDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkEffortAssocs is a parsable slice of WorkEffortAssoc.
type WorkEffortAssocs []*WorkEffortAssoc

func (wea WorkEffortAssocs) config(cfg config) {
	for _i := range wea {
		wea[_i].config = cfg
	}
}
