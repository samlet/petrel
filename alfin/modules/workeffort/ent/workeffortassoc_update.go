// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortassoc"
)

// WorkEffortAssocUpdate is the builder for updating WorkEffortAssoc entities.
type WorkEffortAssocUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortAssocMutation
}

// Where adds a new predicate for the WorkEffortAssocUpdate builder.
func (weau *WorkEffortAssocUpdate) Where(ps ...predicate.WorkEffortAssoc) *WorkEffortAssocUpdate {
	weau.mutation.predicates = append(weau.mutation.predicates, ps...)
	return weau
}

// SetWorkEffortAssocTypeID sets the "work_effort_assoc_type_id" field.
func (weau *WorkEffortAssocUpdate) SetWorkEffortAssocTypeID(i int) *WorkEffortAssocUpdate {
	weau.mutation.ResetWorkEffortAssocTypeID()
	weau.mutation.SetWorkEffortAssocTypeID(i)
	return weau
}

// AddWorkEffortAssocTypeID adds i to the "work_effort_assoc_type_id" field.
func (weau *WorkEffortAssocUpdate) AddWorkEffortAssocTypeID(i int) *WorkEffortAssocUpdate {
	weau.mutation.AddWorkEffortAssocTypeID(i)
	return weau
}

// SetSequenceNum sets the "sequence_num" field.
func (weau *WorkEffortAssocUpdate) SetSequenceNum(i int) *WorkEffortAssocUpdate {
	weau.mutation.ResetSequenceNum()
	weau.mutation.SetSequenceNum(i)
	return weau
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (weau *WorkEffortAssocUpdate) SetNillableSequenceNum(i *int) *WorkEffortAssocUpdate {
	if i != nil {
		weau.SetSequenceNum(*i)
	}
	return weau
}

// AddSequenceNum adds i to the "sequence_num" field.
func (weau *WorkEffortAssocUpdate) AddSequenceNum(i int) *WorkEffortAssocUpdate {
	weau.mutation.AddSequenceNum(i)
	return weau
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (weau *WorkEffortAssocUpdate) ClearSequenceNum() *WorkEffortAssocUpdate {
	weau.mutation.ClearSequenceNum()
	return weau
}

// SetFromDate sets the "from_date" field.
func (weau *WorkEffortAssocUpdate) SetFromDate(t time.Time) *WorkEffortAssocUpdate {
	weau.mutation.SetFromDate(t)
	return weau
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (weau *WorkEffortAssocUpdate) SetNillableFromDate(t *time.Time) *WorkEffortAssocUpdate {
	if t != nil {
		weau.SetFromDate(*t)
	}
	return weau
}

// SetThruDate sets the "thru_date" field.
func (weau *WorkEffortAssocUpdate) SetThruDate(t time.Time) *WorkEffortAssocUpdate {
	weau.mutation.SetThruDate(t)
	return weau
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (weau *WorkEffortAssocUpdate) SetNillableThruDate(t *time.Time) *WorkEffortAssocUpdate {
	if t != nil {
		weau.SetThruDate(*t)
	}
	return weau
}

// ClearThruDate clears the value of the "thru_date" field.
func (weau *WorkEffortAssocUpdate) ClearThruDate() *WorkEffortAssocUpdate {
	weau.mutation.ClearThruDate()
	return weau
}

// SetFromWorkEffortID sets the "from_work_effort" edge to the WorkEffort entity by ID.
func (weau *WorkEffortAssocUpdate) SetFromWorkEffortID(id int) *WorkEffortAssocUpdate {
	weau.mutation.SetFromWorkEffortID(id)
	return weau
}

// SetNillableFromWorkEffortID sets the "from_work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (weau *WorkEffortAssocUpdate) SetNillableFromWorkEffortID(id *int) *WorkEffortAssocUpdate {
	if id != nil {
		weau = weau.SetFromWorkEffortID(*id)
	}
	return weau
}

// SetFromWorkEffort sets the "from_work_effort" edge to the WorkEffort entity.
func (weau *WorkEffortAssocUpdate) SetFromWorkEffort(w *WorkEffort) *WorkEffortAssocUpdate {
	return weau.SetFromWorkEffortID(w.ID)
}

// SetToWorkEffortID sets the "to_work_effort" edge to the WorkEffort entity by ID.
func (weau *WorkEffortAssocUpdate) SetToWorkEffortID(id int) *WorkEffortAssocUpdate {
	weau.mutation.SetToWorkEffortID(id)
	return weau
}

// SetNillableToWorkEffortID sets the "to_work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (weau *WorkEffortAssocUpdate) SetNillableToWorkEffortID(id *int) *WorkEffortAssocUpdate {
	if id != nil {
		weau = weau.SetToWorkEffortID(*id)
	}
	return weau
}

// SetToWorkEffort sets the "to_work_effort" edge to the WorkEffort entity.
func (weau *WorkEffortAssocUpdate) SetToWorkEffort(w *WorkEffort) *WorkEffortAssocUpdate {
	return weau.SetToWorkEffortID(w.ID)
}

// Mutation returns the WorkEffortAssocMutation object of the builder.
func (weau *WorkEffortAssocUpdate) Mutation() *WorkEffortAssocMutation {
	return weau.mutation
}

// ClearFromWorkEffort clears the "from_work_effort" edge to the WorkEffort entity.
func (weau *WorkEffortAssocUpdate) ClearFromWorkEffort() *WorkEffortAssocUpdate {
	weau.mutation.ClearFromWorkEffort()
	return weau
}

// ClearToWorkEffort clears the "to_work_effort" edge to the WorkEffort entity.
func (weau *WorkEffortAssocUpdate) ClearToWorkEffort() *WorkEffortAssocUpdate {
	weau.mutation.ClearToWorkEffort()
	return weau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weau *WorkEffortAssocUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(weau.hooks) == 0 {
		affected, err = weau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			weau.mutation = mutation
			affected, err = weau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(weau.hooks) - 1; i >= 0; i-- {
			mut = weau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, weau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (weau *WorkEffortAssocUpdate) SaveX(ctx context.Context) int {
	affected, err := weau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weau *WorkEffortAssocUpdate) Exec(ctx context.Context) error {
	_, err := weau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weau *WorkEffortAssocUpdate) ExecX(ctx context.Context) {
	if err := weau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (weau *WorkEffortAssocUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortassoc.Table,
			Columns: workeffortassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortassoc.FieldID,
			},
		},
	}
	if ps := weau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weau.mutation.WorkEffortAssocTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldWorkEffortAssocTypeID,
		})
	}
	if value, ok := weau.mutation.AddedWorkEffortAssocTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldWorkEffortAssocTypeID,
		})
	}
	if value, ok := weau.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if value, ok := weau.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if weau.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if value, ok := weau.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortassoc.FieldFromDate,
		})
	}
	if value, ok := weau.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortassoc.FieldThruDate,
		})
	}
	if weau.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortassoc.FieldThruDate,
		})
	}
	if weau.mutation.FromWorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.FromWorkEffortTable,
			Columns: []string{workeffortassoc.FromWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weau.mutation.FromWorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.FromWorkEffortTable,
			Columns: []string{workeffortassoc.FromWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weau.mutation.ToWorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.ToWorkEffortTable,
			Columns: []string{workeffortassoc.ToWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weau.mutation.ToWorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.ToWorkEffortTable,
			Columns: []string{workeffortassoc.ToWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortAssocUpdateOne is the builder for updating a single WorkEffortAssoc entity.
type WorkEffortAssocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortAssocMutation
}

// SetWorkEffortAssocTypeID sets the "work_effort_assoc_type_id" field.
func (weauo *WorkEffortAssocUpdateOne) SetWorkEffortAssocTypeID(i int) *WorkEffortAssocUpdateOne {
	weauo.mutation.ResetWorkEffortAssocTypeID()
	weauo.mutation.SetWorkEffortAssocTypeID(i)
	return weauo
}

// AddWorkEffortAssocTypeID adds i to the "work_effort_assoc_type_id" field.
func (weauo *WorkEffortAssocUpdateOne) AddWorkEffortAssocTypeID(i int) *WorkEffortAssocUpdateOne {
	weauo.mutation.AddWorkEffortAssocTypeID(i)
	return weauo
}

// SetSequenceNum sets the "sequence_num" field.
func (weauo *WorkEffortAssocUpdateOne) SetSequenceNum(i int) *WorkEffortAssocUpdateOne {
	weauo.mutation.ResetSequenceNum()
	weauo.mutation.SetSequenceNum(i)
	return weauo
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (weauo *WorkEffortAssocUpdateOne) SetNillableSequenceNum(i *int) *WorkEffortAssocUpdateOne {
	if i != nil {
		weauo.SetSequenceNum(*i)
	}
	return weauo
}

// AddSequenceNum adds i to the "sequence_num" field.
func (weauo *WorkEffortAssocUpdateOne) AddSequenceNum(i int) *WorkEffortAssocUpdateOne {
	weauo.mutation.AddSequenceNum(i)
	return weauo
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (weauo *WorkEffortAssocUpdateOne) ClearSequenceNum() *WorkEffortAssocUpdateOne {
	weauo.mutation.ClearSequenceNum()
	return weauo
}

// SetFromDate sets the "from_date" field.
func (weauo *WorkEffortAssocUpdateOne) SetFromDate(t time.Time) *WorkEffortAssocUpdateOne {
	weauo.mutation.SetFromDate(t)
	return weauo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (weauo *WorkEffortAssocUpdateOne) SetNillableFromDate(t *time.Time) *WorkEffortAssocUpdateOne {
	if t != nil {
		weauo.SetFromDate(*t)
	}
	return weauo
}

// SetThruDate sets the "thru_date" field.
func (weauo *WorkEffortAssocUpdateOne) SetThruDate(t time.Time) *WorkEffortAssocUpdateOne {
	weauo.mutation.SetThruDate(t)
	return weauo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (weauo *WorkEffortAssocUpdateOne) SetNillableThruDate(t *time.Time) *WorkEffortAssocUpdateOne {
	if t != nil {
		weauo.SetThruDate(*t)
	}
	return weauo
}

// ClearThruDate clears the value of the "thru_date" field.
func (weauo *WorkEffortAssocUpdateOne) ClearThruDate() *WorkEffortAssocUpdateOne {
	weauo.mutation.ClearThruDate()
	return weauo
}

// SetFromWorkEffortID sets the "from_work_effort" edge to the WorkEffort entity by ID.
func (weauo *WorkEffortAssocUpdateOne) SetFromWorkEffortID(id int) *WorkEffortAssocUpdateOne {
	weauo.mutation.SetFromWorkEffortID(id)
	return weauo
}

// SetNillableFromWorkEffortID sets the "from_work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (weauo *WorkEffortAssocUpdateOne) SetNillableFromWorkEffortID(id *int) *WorkEffortAssocUpdateOne {
	if id != nil {
		weauo = weauo.SetFromWorkEffortID(*id)
	}
	return weauo
}

// SetFromWorkEffort sets the "from_work_effort" edge to the WorkEffort entity.
func (weauo *WorkEffortAssocUpdateOne) SetFromWorkEffort(w *WorkEffort) *WorkEffortAssocUpdateOne {
	return weauo.SetFromWorkEffortID(w.ID)
}

// SetToWorkEffortID sets the "to_work_effort" edge to the WorkEffort entity by ID.
func (weauo *WorkEffortAssocUpdateOne) SetToWorkEffortID(id int) *WorkEffortAssocUpdateOne {
	weauo.mutation.SetToWorkEffortID(id)
	return weauo
}

// SetNillableToWorkEffortID sets the "to_work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (weauo *WorkEffortAssocUpdateOne) SetNillableToWorkEffortID(id *int) *WorkEffortAssocUpdateOne {
	if id != nil {
		weauo = weauo.SetToWorkEffortID(*id)
	}
	return weauo
}

// SetToWorkEffort sets the "to_work_effort" edge to the WorkEffort entity.
func (weauo *WorkEffortAssocUpdateOne) SetToWorkEffort(w *WorkEffort) *WorkEffortAssocUpdateOne {
	return weauo.SetToWorkEffortID(w.ID)
}

// Mutation returns the WorkEffortAssocMutation object of the builder.
func (weauo *WorkEffortAssocUpdateOne) Mutation() *WorkEffortAssocMutation {
	return weauo.mutation
}

// ClearFromWorkEffort clears the "from_work_effort" edge to the WorkEffort entity.
func (weauo *WorkEffortAssocUpdateOne) ClearFromWorkEffort() *WorkEffortAssocUpdateOne {
	weauo.mutation.ClearFromWorkEffort()
	return weauo
}

// ClearToWorkEffort clears the "to_work_effort" edge to the WorkEffort entity.
func (weauo *WorkEffortAssocUpdateOne) ClearToWorkEffort() *WorkEffortAssocUpdateOne {
	weauo.mutation.ClearToWorkEffort()
	return weauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weauo *WorkEffortAssocUpdateOne) Select(field string, fields ...string) *WorkEffortAssocUpdateOne {
	weauo.fields = append([]string{field}, fields...)
	return weauo
}

// Save executes the query and returns the updated WorkEffortAssoc entity.
func (weauo *WorkEffortAssocUpdateOne) Save(ctx context.Context) (*WorkEffortAssoc, error) {
	var (
		err  error
		node *WorkEffortAssoc
	)
	if len(weauo.hooks) == 0 {
		node, err = weauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortAssocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			weauo.mutation = mutation
			node, err = weauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(weauo.hooks) - 1; i >= 0; i-- {
			mut = weauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, weauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (weauo *WorkEffortAssocUpdateOne) SaveX(ctx context.Context) *WorkEffortAssoc {
	node, err := weauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weauo *WorkEffortAssocUpdateOne) Exec(ctx context.Context) error {
	_, err := weauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weauo *WorkEffortAssocUpdateOne) ExecX(ctx context.Context) {
	if err := weauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (weauo *WorkEffortAssocUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffortAssoc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortassoc.Table,
			Columns: workeffortassoc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortassoc.FieldID,
			},
		},
	}
	id, ok := weauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffortAssoc.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := weauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortassoc.FieldID)
		for _, f := range fields {
			if !workeffortassoc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workeffortassoc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weauo.mutation.WorkEffortAssocTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldWorkEffortAssocTypeID,
		})
	}
	if value, ok := weauo.mutation.AddedWorkEffortAssocTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldWorkEffortAssocTypeID,
		})
	}
	if value, ok := weauo.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if value, ok := weauo.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if weauo.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortassoc.FieldSequenceNum,
		})
	}
	if value, ok := weauo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortassoc.FieldFromDate,
		})
	}
	if value, ok := weauo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortassoc.FieldThruDate,
		})
	}
	if weauo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortassoc.FieldThruDate,
		})
	}
	if weauo.mutation.FromWorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.FromWorkEffortTable,
			Columns: []string{workeffortassoc.FromWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weauo.mutation.FromWorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.FromWorkEffortTable,
			Columns: []string{workeffortassoc.FromWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weauo.mutation.ToWorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.ToWorkEffortTable,
			Columns: []string{workeffortassoc.ToWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weauo.mutation.ToWorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortassoc.ToWorkEffortTable,
			Columns: []string{workeffortassoc.ToWorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffortAssoc{config: weauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortassoc.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
