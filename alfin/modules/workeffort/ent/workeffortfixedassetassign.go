// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
)

// WorkEffortFixedAssetAssign is the model entity for the WorkEffortFixedAssetAssign schema.
type WorkEffortFixedAssetAssign struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StringRef holds the value of the "string_ref" field.
	StringRef string `json:"string_ref,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// AllocatedCost holds the value of the "allocated_cost" field.
	AllocatedCost float64 `json:"allocated_cost,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkEffortFixedAssetAssignQuery when eager-loading is set.
	Edges                                                    WorkEffortFixedAssetAssignEdges `json:"edges"`
	fixed_asset_work_effort_fixed_asset_assigns              *int
	status_item_work_effort_fixed_asset_assigns              *int
	status_item_availability_work_effort_fixed_asset_assigns *int
	work_effort_work_effort_fixed_asset_assigns              *int
}

// WorkEffortFixedAssetAssignEdges holds the relations/edges for other nodes in the graph.
type WorkEffortFixedAssetAssignEdges struct {
	// WorkEffort holds the value of the work_effort edge.
	WorkEffort *WorkEffort `json:"work_effort,omitempty"`
	// FixedAsset holds the value of the fixed_asset edge.
	FixedAsset *FixedAsset `json:"fixed_asset,omitempty"`
	// StatusItem holds the value of the status_item edge.
	StatusItem *StatusItem `json:"status_item,omitempty"`
	// AvailabilityStatusItem holds the value of the availability_status_item edge.
	AvailabilityStatusItem *StatusItem `json:"availability_status_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WorkEffortOrErr returns the WorkEffort value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortFixedAssetAssignEdges) WorkEffortOrErr() (*WorkEffort, error) {
	if e.loadedTypes[0] {
		if e.WorkEffort == nil {
			// The edge work_effort was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workeffort.Label}
		}
		return e.WorkEffort, nil
	}
	return nil, &NotLoadedError{edge: "work_effort"}
}

// FixedAssetOrErr returns the FixedAsset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortFixedAssetAssignEdges) FixedAssetOrErr() (*FixedAsset, error) {
	if e.loadedTypes[1] {
		if e.FixedAsset == nil {
			// The edge fixed_asset was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: fixedasset.Label}
		}
		return e.FixedAsset, nil
	}
	return nil, &NotLoadedError{edge: "fixed_asset"}
}

// StatusItemOrErr returns the StatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortFixedAssetAssignEdges) StatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[2] {
		if e.StatusItem == nil {
			// The edge status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.StatusItem, nil
	}
	return nil, &NotLoadedError{edge: "status_item"}
}

// AvailabilityStatusItemOrErr returns the AvailabilityStatusItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortFixedAssetAssignEdges) AvailabilityStatusItemOrErr() (*StatusItem, error) {
	if e.loadedTypes[3] {
		if e.AvailabilityStatusItem == nil {
			// The edge availability_status_item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusitem.Label}
		}
		return e.AvailabilityStatusItem, nil
	}
	return nil, &NotLoadedError{edge: "availability_status_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkEffortFixedAssetAssign) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workeffortfixedassetassign.FieldAllocatedCost:
			values[i] = new(sql.NullFloat64)
		case workeffortfixedassetassign.FieldID:
			values[i] = new(sql.NullInt64)
		case workeffortfixedassetassign.FieldStringRef, workeffortfixedassetassign.FieldComments:
			values[i] = new(sql.NullString)
		case workeffortfixedassetassign.FieldCreateTime, workeffortfixedassetassign.FieldUpdateTime, workeffortfixedassetassign.FieldFromDate, workeffortfixedassetassign.FieldThruDate:
			values[i] = new(sql.NullTime)
		case workeffortfixedassetassign.ForeignKeys[0]: // fixed_asset_work_effort_fixed_asset_assigns
			values[i] = new(sql.NullInt64)
		case workeffortfixedassetassign.ForeignKeys[1]: // status_item_work_effort_fixed_asset_assigns
			values[i] = new(sql.NullInt64)
		case workeffortfixedassetassign.ForeignKeys[2]: // status_item_availability_work_effort_fixed_asset_assigns
			values[i] = new(sql.NullInt64)
		case workeffortfixedassetassign.ForeignKeys[3]: // work_effort_work_effort_fixed_asset_assigns
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkEffortFixedAssetAssign", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkEffortFixedAssetAssign fields.
func (wefaa *WorkEffortFixedAssetAssign) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workeffortfixedassetassign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wefaa.ID = int(value.Int64)
		case workeffortfixedassetassign.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wefaa.CreateTime = value.Time
			}
		case workeffortfixedassetassign.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wefaa.UpdateTime = value.Time
			}
		case workeffortfixedassetassign.FieldStringRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_ref", values[i])
			} else if value.Valid {
				wefaa.StringRef = value.String
			}
		case workeffortfixedassetassign.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				wefaa.FromDate = value.Time
			}
		case workeffortfixedassetassign.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				wefaa.ThruDate = value.Time
			}
		case workeffortfixedassetassign.FieldAllocatedCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field allocated_cost", values[i])
			} else if value.Valid {
				wefaa.AllocatedCost = value.Float64
			}
		case workeffortfixedassetassign.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				wefaa.Comments = value.String
			}
		case workeffortfixedassetassign.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fixed_asset_work_effort_fixed_asset_assigns", value)
			} else if value.Valid {
				wefaa.fixed_asset_work_effort_fixed_asset_assigns = new(int)
				*wefaa.fixed_asset_work_effort_fixed_asset_assigns = int(value.Int64)
			}
		case workeffortfixedassetassign.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_work_effort_fixed_asset_assigns", value)
			} else if value.Valid {
				wefaa.status_item_work_effort_fixed_asset_assigns = new(int)
				*wefaa.status_item_work_effort_fixed_asset_assigns = int(value.Int64)
			}
		case workeffortfixedassetassign.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_item_availability_work_effort_fixed_asset_assigns", value)
			} else if value.Valid {
				wefaa.status_item_availability_work_effort_fixed_asset_assigns = new(int)
				*wefaa.status_item_availability_work_effort_fixed_asset_assigns = int(value.Int64)
			}
		case workeffortfixedassetassign.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_effort_work_effort_fixed_asset_assigns", value)
			} else if value.Valid {
				wefaa.work_effort_work_effort_fixed_asset_assigns = new(int)
				*wefaa.work_effort_work_effort_fixed_asset_assigns = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWorkEffort queries the "work_effort" edge of the WorkEffortFixedAssetAssign entity.
func (wefaa *WorkEffortFixedAssetAssign) QueryWorkEffort() *WorkEffortQuery {
	return (&WorkEffortFixedAssetAssignClient{config: wefaa.config}).QueryWorkEffort(wefaa)
}

// QueryFixedAsset queries the "fixed_asset" edge of the WorkEffortFixedAssetAssign entity.
func (wefaa *WorkEffortFixedAssetAssign) QueryFixedAsset() *FixedAssetQuery {
	return (&WorkEffortFixedAssetAssignClient{config: wefaa.config}).QueryFixedAsset(wefaa)
}

// QueryStatusItem queries the "status_item" edge of the WorkEffortFixedAssetAssign entity.
func (wefaa *WorkEffortFixedAssetAssign) QueryStatusItem() *StatusItemQuery {
	return (&WorkEffortFixedAssetAssignClient{config: wefaa.config}).QueryStatusItem(wefaa)
}

// QueryAvailabilityStatusItem queries the "availability_status_item" edge of the WorkEffortFixedAssetAssign entity.
func (wefaa *WorkEffortFixedAssetAssign) QueryAvailabilityStatusItem() *StatusItemQuery {
	return (&WorkEffortFixedAssetAssignClient{config: wefaa.config}).QueryAvailabilityStatusItem(wefaa)
}

// Update returns a builder for updating this WorkEffortFixedAssetAssign.
// Note that you need to call WorkEffortFixedAssetAssign.Unwrap() before calling this method if this WorkEffortFixedAssetAssign
// was returned from a transaction, and the transaction was committed or rolled back.
func (wefaa *WorkEffortFixedAssetAssign) Update() *WorkEffortFixedAssetAssignUpdateOne {
	return (&WorkEffortFixedAssetAssignClient{config: wefaa.config}).UpdateOne(wefaa)
}

// Unwrap unwraps the WorkEffortFixedAssetAssign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wefaa *WorkEffortFixedAssetAssign) Unwrap() *WorkEffortFixedAssetAssign {
	tx, ok := wefaa.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkEffortFixedAssetAssign is not a transactional entity")
	}
	wefaa.config.driver = tx.drv
	return wefaa
}

// String implements the fmt.Stringer.
func (wefaa *WorkEffortFixedAssetAssign) String() string {
	var builder strings.Builder
	builder.WriteString("WorkEffortFixedAssetAssign(")
	builder.WriteString(fmt.Sprintf("id=%v", wefaa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(wefaa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(wefaa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", string_ref=")
	builder.WriteString(wefaa.StringRef)
	builder.WriteString(", from_date=")
	builder.WriteString(wefaa.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(wefaa.ThruDate.Format(time.ANSIC))
	builder.WriteString(", allocated_cost=")
	builder.WriteString(fmt.Sprintf("%v", wefaa.AllocatedCost))
	builder.WriteString(", comments=")
	builder.WriteString(wefaa.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// WorkEffortFixedAssetAssigns is a parsable slice of WorkEffortFixedAssetAssign.
type WorkEffortFixedAssetAssigns []*WorkEffortFixedAssetAssign

func (wefaa WorkEffortFixedAssetAssigns) config(cfg config) {
	for _i := range wefaa {
		wefaa[_i].config = cfg
	}
}
