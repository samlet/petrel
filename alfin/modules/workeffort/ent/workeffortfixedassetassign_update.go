// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/fixedasset"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortfixedassetassign"
)

// WorkEffortFixedAssetAssignUpdate is the builder for updating WorkEffortFixedAssetAssign entities.
type WorkEffortFixedAssetAssignUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortFixedAssetAssignMutation
}

// Where adds a new predicate for the WorkEffortFixedAssetAssignUpdate builder.
func (wefaau *WorkEffortFixedAssetAssignUpdate) Where(ps ...predicate.WorkEffortFixedAssetAssign) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.predicates = append(wefaau.mutation.predicates, ps...)
	return wefaau
}

// SetStringRef sets the "string_ref" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetStringRef(s string) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetStringRef(s)
	return wefaau
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableStringRef(s *string) *WorkEffortFixedAssetAssignUpdate {
	if s != nil {
		wefaau.SetStringRef(*s)
	}
	return wefaau
}

// ClearStringRef clears the value of the "string_ref" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearStringRef() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearStringRef()
	return wefaau
}

// SetFromDate sets the "from_date" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetFromDate(t time.Time) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetFromDate(t)
	return wefaau
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableFromDate(t *time.Time) *WorkEffortFixedAssetAssignUpdate {
	if t != nil {
		wefaau.SetFromDate(*t)
	}
	return wefaau
}

// SetThruDate sets the "thru_date" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetThruDate(t time.Time) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetThruDate(t)
	return wefaau
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableThruDate(t *time.Time) *WorkEffortFixedAssetAssignUpdate {
	if t != nil {
		wefaau.SetThruDate(*t)
	}
	return wefaau
}

// ClearThruDate clears the value of the "thru_date" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearThruDate() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearThruDate()
	return wefaau
}

// SetAllocatedCost sets the "allocated_cost" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetAllocatedCost(f float64) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ResetAllocatedCost()
	wefaau.mutation.SetAllocatedCost(f)
	return wefaau
}

// SetNillableAllocatedCost sets the "allocated_cost" field if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableAllocatedCost(f *float64) *WorkEffortFixedAssetAssignUpdate {
	if f != nil {
		wefaau.SetAllocatedCost(*f)
	}
	return wefaau
}

// AddAllocatedCost adds f to the "allocated_cost" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) AddAllocatedCost(f float64) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.AddAllocatedCost(f)
	return wefaau
}

// ClearAllocatedCost clears the value of the "allocated_cost" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearAllocatedCost() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearAllocatedCost()
	return wefaau
}

// SetComments sets the "comments" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetComments(s string) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetComments(s)
	return wefaau
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableComments(s *string) *WorkEffortFixedAssetAssignUpdate {
	if s != nil {
		wefaau.SetComments(*s)
	}
	return wefaau
}

// ClearComments clears the value of the "comments" field.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearComments() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearComments()
	return wefaau
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetWorkEffortID(id int) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetWorkEffortID(id)
	return wefaau
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableWorkEffortID(id *int) *WorkEffortFixedAssetAssignUpdate {
	if id != nil {
		wefaau = wefaau.SetWorkEffortID(*id)
	}
	return wefaau
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetWorkEffort(w *WorkEffort) *WorkEffortFixedAssetAssignUpdate {
	return wefaau.SetWorkEffortID(w.ID)
}

// SetFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetFixedAssetID(id int) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetFixedAssetID(id)
	return wefaau
}

// SetNillableFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableFixedAssetID(id *int) *WorkEffortFixedAssetAssignUpdate {
	if id != nil {
		wefaau = wefaau.SetFixedAssetID(*id)
	}
	return wefaau
}

// SetFixedAsset sets the "fixed_asset" edge to the FixedAsset entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetFixedAsset(f *FixedAsset) *WorkEffortFixedAssetAssignUpdate {
	return wefaau.SetFixedAssetID(f.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetStatusItemID(id int) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetStatusItemID(id)
	return wefaau
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableStatusItemID(id *int) *WorkEffortFixedAssetAssignUpdate {
	if id != nil {
		wefaau = wefaau.SetStatusItemID(*id)
	}
	return wefaau
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetStatusItem(s *StatusItem) *WorkEffortFixedAssetAssignUpdate {
	return wefaau.SetStatusItemID(s.ID)
}

// SetAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetAvailabilityStatusItemID(id int) *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.SetAvailabilityStatusItemID(id)
	return wefaau
}

// SetNillableAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetNillableAvailabilityStatusItemID(id *int) *WorkEffortFixedAssetAssignUpdate {
	if id != nil {
		wefaau = wefaau.SetAvailabilityStatusItemID(*id)
	}
	return wefaau
}

// SetAvailabilityStatusItem sets the "availability_status_item" edge to the StatusItem entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SetAvailabilityStatusItem(s *StatusItem) *WorkEffortFixedAssetAssignUpdate {
	return wefaau.SetAvailabilityStatusItemID(s.ID)
}

// Mutation returns the WorkEffortFixedAssetAssignMutation object of the builder.
func (wefaau *WorkEffortFixedAssetAssignUpdate) Mutation() *WorkEffortFixedAssetAssignMutation {
	return wefaau.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearWorkEffort() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearWorkEffort()
	return wefaau
}

// ClearFixedAsset clears the "fixed_asset" edge to the FixedAsset entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearFixedAsset() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearFixedAsset()
	return wefaau
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearStatusItem() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearStatusItem()
	return wefaau
}

// ClearAvailabilityStatusItem clears the "availability_status_item" edge to the StatusItem entity.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ClearAvailabilityStatusItem() *WorkEffortFixedAssetAssignUpdate {
	wefaau.mutation.ClearAvailabilityStatusItem()
	return wefaau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wefaau *WorkEffortFixedAssetAssignUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wefaau.defaults()
	if len(wefaau.hooks) == 0 {
		affected, err = wefaau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortFixedAssetAssignMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wefaau.mutation = mutation
			affected, err = wefaau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wefaau.hooks) - 1; i >= 0; i-- {
			mut = wefaau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wefaau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wefaau *WorkEffortFixedAssetAssignUpdate) SaveX(ctx context.Context) int {
	affected, err := wefaau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wefaau *WorkEffortFixedAssetAssignUpdate) Exec(ctx context.Context) error {
	_, err := wefaau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wefaau *WorkEffortFixedAssetAssignUpdate) ExecX(ctx context.Context) {
	if err := wefaau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wefaau *WorkEffortFixedAssetAssignUpdate) defaults() {
	if _, ok := wefaau.mutation.UpdateTime(); !ok {
		v := workeffortfixedassetassign.UpdateDefaultUpdateTime()
		wefaau.mutation.SetUpdateTime(v)
	}
}

func (wefaau *WorkEffortFixedAssetAssignUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortfixedassetassign.Table,
			Columns: workeffortfixedassetassign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortfixedassetassign.FieldID,
			},
		},
	}
	if ps := wefaau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wefaau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldUpdateTime,
		})
	}
	if value, ok := wefaau.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortfixedassetassign.FieldStringRef,
		})
	}
	if wefaau.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortfixedassetassign.FieldStringRef,
		})
	}
	if value, ok := wefaau.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldFromDate,
		})
	}
	if value, ok := wefaau.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldThruDate,
		})
	}
	if wefaau.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortfixedassetassign.FieldThruDate,
		})
	}
	if value, ok := wefaau.mutation.AllocatedCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if value, ok := wefaau.mutation.AddedAllocatedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if wefaau.mutation.AllocatedCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if value, ok := wefaau.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortfixedassetassign.FieldComments,
		})
	}
	if wefaau.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortfixedassetassign.FieldComments,
		})
	}
	if wefaau.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.WorkEffortTable,
			Columns: []string{workeffortfixedassetassign.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaau.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.WorkEffortTable,
			Columns: []string{workeffortfixedassetassign.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaau.mutation.FixedAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.FixedAssetTable,
			Columns: []string{workeffortfixedassetassign.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaau.mutation.FixedAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.FixedAssetTable,
			Columns: []string{workeffortfixedassetassign.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaau.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.StatusItemTable,
			Columns: []string{workeffortfixedassetassign.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaau.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.StatusItemTable,
			Columns: []string{workeffortfixedassetassign.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaau.mutation.AvailabilityStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.AvailabilityStatusItemTable,
			Columns: []string{workeffortfixedassetassign.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaau.mutation.AvailabilityStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.AvailabilityStatusItemTable,
			Columns: []string{workeffortfixedassetassign.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wefaau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortfixedassetassign.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortFixedAssetAssignUpdateOne is the builder for updating a single WorkEffortFixedAssetAssign entity.
type WorkEffortFixedAssetAssignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortFixedAssetAssignMutation
}

// SetStringRef sets the "string_ref" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetStringRef(s string) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetStringRef(s)
	return wefaauo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableStringRef(s *string) *WorkEffortFixedAssetAssignUpdateOne {
	if s != nil {
		wefaauo.SetStringRef(*s)
	}
	return wefaauo
}

// ClearStringRef clears the value of the "string_ref" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearStringRef() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearStringRef()
	return wefaauo
}

// SetFromDate sets the "from_date" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetFromDate(t time.Time) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetFromDate(t)
	return wefaauo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableFromDate(t *time.Time) *WorkEffortFixedAssetAssignUpdateOne {
	if t != nil {
		wefaauo.SetFromDate(*t)
	}
	return wefaauo
}

// SetThruDate sets the "thru_date" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetThruDate(t time.Time) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetThruDate(t)
	return wefaauo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableThruDate(t *time.Time) *WorkEffortFixedAssetAssignUpdateOne {
	if t != nil {
		wefaauo.SetThruDate(*t)
	}
	return wefaauo
}

// ClearThruDate clears the value of the "thru_date" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearThruDate() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearThruDate()
	return wefaauo
}

// SetAllocatedCost sets the "allocated_cost" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetAllocatedCost(f float64) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ResetAllocatedCost()
	wefaauo.mutation.SetAllocatedCost(f)
	return wefaauo
}

// SetNillableAllocatedCost sets the "allocated_cost" field if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableAllocatedCost(f *float64) *WorkEffortFixedAssetAssignUpdateOne {
	if f != nil {
		wefaauo.SetAllocatedCost(*f)
	}
	return wefaauo
}

// AddAllocatedCost adds f to the "allocated_cost" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) AddAllocatedCost(f float64) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.AddAllocatedCost(f)
	return wefaauo
}

// ClearAllocatedCost clears the value of the "allocated_cost" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearAllocatedCost() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearAllocatedCost()
	return wefaauo
}

// SetComments sets the "comments" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetComments(s string) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetComments(s)
	return wefaauo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableComments(s *string) *WorkEffortFixedAssetAssignUpdateOne {
	if s != nil {
		wefaauo.SetComments(*s)
	}
	return wefaauo
}

// ClearComments clears the value of the "comments" field.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearComments() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearComments()
	return wefaauo
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetWorkEffortID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetWorkEffortID(id)
	return wefaauo
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableWorkEffortID(id *int) *WorkEffortFixedAssetAssignUpdateOne {
	if id != nil {
		wefaauo = wefaauo.SetWorkEffortID(*id)
	}
	return wefaauo
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetWorkEffort(w *WorkEffort) *WorkEffortFixedAssetAssignUpdateOne {
	return wefaauo.SetWorkEffortID(w.ID)
}

// SetFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetFixedAssetID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetFixedAssetID(id)
	return wefaauo
}

// SetNillableFixedAssetID sets the "fixed_asset" edge to the FixedAsset entity by ID if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableFixedAssetID(id *int) *WorkEffortFixedAssetAssignUpdateOne {
	if id != nil {
		wefaauo = wefaauo.SetFixedAssetID(*id)
	}
	return wefaauo
}

// SetFixedAsset sets the "fixed_asset" edge to the FixedAsset entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetFixedAsset(f *FixedAsset) *WorkEffortFixedAssetAssignUpdateOne {
	return wefaauo.SetFixedAssetID(f.ID)
}

// SetStatusItemID sets the "status_item" edge to the StatusItem entity by ID.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetStatusItemID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetStatusItemID(id)
	return wefaauo
}

// SetNillableStatusItemID sets the "status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableStatusItemID(id *int) *WorkEffortFixedAssetAssignUpdateOne {
	if id != nil {
		wefaauo = wefaauo.SetStatusItemID(*id)
	}
	return wefaauo
}

// SetStatusItem sets the "status_item" edge to the StatusItem entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetStatusItem(s *StatusItem) *WorkEffortFixedAssetAssignUpdateOne {
	return wefaauo.SetStatusItemID(s.ID)
}

// SetAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetAvailabilityStatusItemID(id int) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.SetAvailabilityStatusItemID(id)
	return wefaauo
}

// SetNillableAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetNillableAvailabilityStatusItemID(id *int) *WorkEffortFixedAssetAssignUpdateOne {
	if id != nil {
		wefaauo = wefaauo.SetAvailabilityStatusItemID(*id)
	}
	return wefaauo
}

// SetAvailabilityStatusItem sets the "availability_status_item" edge to the StatusItem entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SetAvailabilityStatusItem(s *StatusItem) *WorkEffortFixedAssetAssignUpdateOne {
	return wefaauo.SetAvailabilityStatusItemID(s.ID)
}

// Mutation returns the WorkEffortFixedAssetAssignMutation object of the builder.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) Mutation() *WorkEffortFixedAssetAssignMutation {
	return wefaauo.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearWorkEffort() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearWorkEffort()
	return wefaauo
}

// ClearFixedAsset clears the "fixed_asset" edge to the FixedAsset entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearFixedAsset() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearFixedAsset()
	return wefaauo
}

// ClearStatusItem clears the "status_item" edge to the StatusItem entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearStatusItem() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearStatusItem()
	return wefaauo
}

// ClearAvailabilityStatusItem clears the "availability_status_item" edge to the StatusItem entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ClearAvailabilityStatusItem() *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.mutation.ClearAvailabilityStatusItem()
	return wefaauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) Select(field string, fields ...string) *WorkEffortFixedAssetAssignUpdateOne {
	wefaauo.fields = append([]string{field}, fields...)
	return wefaauo
}

// Save executes the query and returns the updated WorkEffortFixedAssetAssign entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) Save(ctx context.Context) (*WorkEffortFixedAssetAssign, error) {
	var (
		err  error
		node *WorkEffortFixedAssetAssign
	)
	wefaauo.defaults()
	if len(wefaauo.hooks) == 0 {
		node, err = wefaauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortFixedAssetAssignMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wefaauo.mutation = mutation
			node, err = wefaauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wefaauo.hooks) - 1; i >= 0; i-- {
			mut = wefaauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wefaauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) SaveX(ctx context.Context) *WorkEffortFixedAssetAssign {
	node, err := wefaauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) Exec(ctx context.Context) error {
	_, err := wefaauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) ExecX(ctx context.Context) {
	if err := wefaauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) defaults() {
	if _, ok := wefaauo.mutation.UpdateTime(); !ok {
		v := workeffortfixedassetassign.UpdateDefaultUpdateTime()
		wefaauo.mutation.SetUpdateTime(v)
	}
}

func (wefaauo *WorkEffortFixedAssetAssignUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffortFixedAssetAssign, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortfixedassetassign.Table,
			Columns: workeffortfixedassetassign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortfixedassetassign.FieldID,
			},
		},
	}
	id, ok := wefaauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffortFixedAssetAssign.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wefaauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortfixedassetassign.FieldID)
		for _, f := range fields {
			if !workeffortfixedassetassign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workeffortfixedassetassign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wefaauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wefaauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldUpdateTime,
		})
	}
	if value, ok := wefaauo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortfixedassetassign.FieldStringRef,
		})
	}
	if wefaauo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortfixedassetassign.FieldStringRef,
		})
	}
	if value, ok := wefaauo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldFromDate,
		})
	}
	if value, ok := wefaauo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortfixedassetassign.FieldThruDate,
		})
	}
	if wefaauo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortfixedassetassign.FieldThruDate,
		})
	}
	if value, ok := wefaauo.mutation.AllocatedCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if value, ok := wefaauo.mutation.AddedAllocatedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if wefaauo.mutation.AllocatedCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortfixedassetassign.FieldAllocatedCost,
		})
	}
	if value, ok := wefaauo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortfixedassetassign.FieldComments,
		})
	}
	if wefaauo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortfixedassetassign.FieldComments,
		})
	}
	if wefaauo.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.WorkEffortTable,
			Columns: []string{workeffortfixedassetassign.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaauo.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.WorkEffortTable,
			Columns: []string{workeffortfixedassetassign.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaauo.mutation.FixedAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.FixedAssetTable,
			Columns: []string{workeffortfixedassetassign.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaauo.mutation.FixedAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.FixedAssetTable,
			Columns: []string{workeffortfixedassetassign.FixedAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixedasset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaauo.mutation.StatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.StatusItemTable,
			Columns: []string{workeffortfixedassetassign.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaauo.mutation.StatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.StatusItemTable,
			Columns: []string{workeffortfixedassetassign.StatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wefaauo.mutation.AvailabilityStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.AvailabilityStatusItemTable,
			Columns: []string{workeffortfixedassetassign.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wefaauo.mutation.AvailabilityStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortfixedassetassign.AvailabilityStatusItemTable,
			Columns: []string{workeffortfixedassetassign.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffortFixedAssetAssign{config: wefaauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wefaauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortfixedassetassign.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
