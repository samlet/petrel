// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortPartyAssignment is the model entity for the WorkEffortPartyAssignment schema.
type WorkEffortPartyAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleTypeID holds the value of the "role_type_id" field.
	RoleTypeID int `json:"role_type_id,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ThruDate holds the value of the "thru_date" field.
	ThruDate time.Time `json:"thru_date,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int `json:"status_id,omitempty"`
	// StatusDateTime holds the value of the "status_date_time" field.
	StatusDateTime time.Time `json:"status_date_time,omitempty"`
	// ExpectationEnumID holds the value of the "expectation_enum_id" field.
	ExpectationEnumID int `json:"expectation_enum_id,omitempty"`
	// DelegateReasonEnumID holds the value of the "delegate_reason_enum_id" field.
	DelegateReasonEnumID int `json:"delegate_reason_enum_id,omitempty"`
	// FacilityID holds the value of the "facility_id" field.
	FacilityID int `json:"facility_id,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// MustRsvp holds the value of the "must_rsvp" field.
	MustRsvp workeffortpartyassignment.MustRsvp `json:"must_rsvp,omitempty"`
	// AvailabilityStatusID holds the value of the "availability_status_id" field.
	AvailabilityStatusID int `json:"availability_status_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkEffortPartyAssignmentQuery when eager-loading is set.
	Edges                                                WorkEffortPartyAssignmentEdges `json:"edges"`
	party_work_effort_party_assignments                  *int
	party_role_work_effort_party_assignments             *int
	user_login_assigned_by_work_effort_party_assignments *int
	work_effort_work_effort_party_assignments            *int
}

// WorkEffortPartyAssignmentEdges holds the relations/edges for other nodes in the graph.
type WorkEffortPartyAssignmentEdges struct {
	// WorkEffort holds the value of the work_effort edge.
	WorkEffort *WorkEffort `json:"work_effort,omitempty"`
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// PartyRole holds the value of the party_role edge.
	PartyRole *PartyRole `json:"party_role,omitempty"`
	// AssignedByUserLogin holds the value of the assigned_by_user_login edge.
	AssignedByUserLogin *UserLogin `json:"assigned_by_user_login,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WorkEffortOrErr returns the WorkEffort value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortPartyAssignmentEdges) WorkEffortOrErr() (*WorkEffort, error) {
	if e.loadedTypes[0] {
		if e.WorkEffort == nil {
			// The edge work_effort was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workeffort.Label}
		}
		return e.WorkEffort, nil
	}
	return nil, &NotLoadedError{edge: "work_effort"}
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortPartyAssignmentEdges) PartyOrErr() (*Party, error) {
	if e.loadedTypes[1] {
		if e.Party == nil {
			// The edge party was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: party.Label}
		}
		return e.Party, nil
	}
	return nil, &NotLoadedError{edge: "party"}
}

// PartyRoleOrErr returns the PartyRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortPartyAssignmentEdges) PartyRoleOrErr() (*PartyRole, error) {
	if e.loadedTypes[2] {
		if e.PartyRole == nil {
			// The edge party_role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: partyrole.Label}
		}
		return e.PartyRole, nil
	}
	return nil, &NotLoadedError{edge: "party_role"}
}

// AssignedByUserLoginOrErr returns the AssignedByUserLogin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkEffortPartyAssignmentEdges) AssignedByUserLoginOrErr() (*UserLogin, error) {
	if e.loadedTypes[3] {
		if e.AssignedByUserLogin == nil {
			// The edge assigned_by_user_login was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userlogin.Label}
		}
		return e.AssignedByUserLogin, nil
	}
	return nil, &NotLoadedError{edge: "assigned_by_user_login"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkEffortPartyAssignment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workeffortpartyassignment.FieldID, workeffortpartyassignment.FieldRoleTypeID, workeffortpartyassignment.FieldStatusID, workeffortpartyassignment.FieldExpectationEnumID, workeffortpartyassignment.FieldDelegateReasonEnumID, workeffortpartyassignment.FieldFacilityID, workeffortpartyassignment.FieldAvailabilityStatusID:
			values[i] = new(sql.NullInt64)
		case workeffortpartyassignment.FieldComments, workeffortpartyassignment.FieldMustRsvp:
			values[i] = new(sql.NullString)
		case workeffortpartyassignment.FieldFromDate, workeffortpartyassignment.FieldThruDate, workeffortpartyassignment.FieldStatusDateTime:
			values[i] = new(sql.NullTime)
		case workeffortpartyassignment.ForeignKeys[0]: // party_work_effort_party_assignments
			values[i] = new(sql.NullInt64)
		case workeffortpartyassignment.ForeignKeys[1]: // party_role_work_effort_party_assignments
			values[i] = new(sql.NullInt64)
		case workeffortpartyassignment.ForeignKeys[2]: // user_login_assigned_by_work_effort_party_assignments
			values[i] = new(sql.NullInt64)
		case workeffortpartyassignment.ForeignKeys[3]: // work_effort_work_effort_party_assignments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkEffortPartyAssignment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkEffortPartyAssignment fields.
func (wepa *WorkEffortPartyAssignment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workeffortpartyassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wepa.ID = int(value.Int64)
		case workeffortpartyassignment.FieldRoleTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_type_id", values[i])
			} else if value.Valid {
				wepa.RoleTypeID = int(value.Int64)
			}
		case workeffortpartyassignment.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				wepa.FromDate = value.Time
			}
		case workeffortpartyassignment.FieldThruDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field thru_date", values[i])
			} else if value.Valid {
				wepa.ThruDate = value.Time
			}
		case workeffortpartyassignment.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				wepa.StatusID = int(value.Int64)
			}
		case workeffortpartyassignment.FieldStatusDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field status_date_time", values[i])
			} else if value.Valid {
				wepa.StatusDateTime = value.Time
			}
		case workeffortpartyassignment.FieldExpectationEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expectation_enum_id", values[i])
			} else if value.Valid {
				wepa.ExpectationEnumID = int(value.Int64)
			}
		case workeffortpartyassignment.FieldDelegateReasonEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delegate_reason_enum_id", values[i])
			} else if value.Valid {
				wepa.DelegateReasonEnumID = int(value.Int64)
			}
		case workeffortpartyassignment.FieldFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field facility_id", values[i])
			} else if value.Valid {
				wepa.FacilityID = int(value.Int64)
			}
		case workeffortpartyassignment.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				wepa.Comments = value.String
			}
		case workeffortpartyassignment.FieldMustRsvp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field must_rsvp", values[i])
			} else if value.Valid {
				wepa.MustRsvp = workeffortpartyassignment.MustRsvp(value.String)
			}
		case workeffortpartyassignment.FieldAvailabilityStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field availability_status_id", values[i])
			} else if value.Valid {
				wepa.AvailabilityStatusID = int(value.Int64)
			}
		case workeffortpartyassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_work_effort_party_assignments", value)
			} else if value.Valid {
				wepa.party_work_effort_party_assignments = new(int)
				*wepa.party_work_effort_party_assignments = int(value.Int64)
			}
		case workeffortpartyassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field party_role_work_effort_party_assignments", value)
			} else if value.Valid {
				wepa.party_role_work_effort_party_assignments = new(int)
				*wepa.party_role_work_effort_party_assignments = int(value.Int64)
			}
		case workeffortpartyassignment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_assigned_by_work_effort_party_assignments", value)
			} else if value.Valid {
				wepa.user_login_assigned_by_work_effort_party_assignments = new(int)
				*wepa.user_login_assigned_by_work_effort_party_assignments = int(value.Int64)
			}
		case workeffortpartyassignment.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_effort_work_effort_party_assignments", value)
			} else if value.Valid {
				wepa.work_effort_work_effort_party_assignments = new(int)
				*wepa.work_effort_work_effort_party_assignments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWorkEffort queries the "work_effort" edge of the WorkEffortPartyAssignment entity.
func (wepa *WorkEffortPartyAssignment) QueryWorkEffort() *WorkEffortQuery {
	return (&WorkEffortPartyAssignmentClient{config: wepa.config}).QueryWorkEffort(wepa)
}

// QueryParty queries the "party" edge of the WorkEffortPartyAssignment entity.
func (wepa *WorkEffortPartyAssignment) QueryParty() *PartyQuery {
	return (&WorkEffortPartyAssignmentClient{config: wepa.config}).QueryParty(wepa)
}

// QueryPartyRole queries the "party_role" edge of the WorkEffortPartyAssignment entity.
func (wepa *WorkEffortPartyAssignment) QueryPartyRole() *PartyRoleQuery {
	return (&WorkEffortPartyAssignmentClient{config: wepa.config}).QueryPartyRole(wepa)
}

// QueryAssignedByUserLogin queries the "assigned_by_user_login" edge of the WorkEffortPartyAssignment entity.
func (wepa *WorkEffortPartyAssignment) QueryAssignedByUserLogin() *UserLoginQuery {
	return (&WorkEffortPartyAssignmentClient{config: wepa.config}).QueryAssignedByUserLogin(wepa)
}

// Update returns a builder for updating this WorkEffortPartyAssignment.
// Note that you need to call WorkEffortPartyAssignment.Unwrap() before calling this method if this WorkEffortPartyAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (wepa *WorkEffortPartyAssignment) Update() *WorkEffortPartyAssignmentUpdateOne {
	return (&WorkEffortPartyAssignmentClient{config: wepa.config}).UpdateOne(wepa)
}

// Unwrap unwraps the WorkEffortPartyAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wepa *WorkEffortPartyAssignment) Unwrap() *WorkEffortPartyAssignment {
	tx, ok := wepa.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkEffortPartyAssignment is not a transactional entity")
	}
	wepa.config.driver = tx.drv
	return wepa
}

// String implements the fmt.Stringer.
func (wepa *WorkEffortPartyAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("WorkEffortPartyAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v", wepa.ID))
	builder.WriteString(", role_type_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.RoleTypeID))
	builder.WriteString(", from_date=")
	builder.WriteString(wepa.FromDate.Format(time.ANSIC))
	builder.WriteString(", thru_date=")
	builder.WriteString(wepa.ThruDate.Format(time.ANSIC))
	builder.WriteString(", status_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.StatusID))
	builder.WriteString(", status_date_time=")
	builder.WriteString(wepa.StatusDateTime.Format(time.ANSIC))
	builder.WriteString(", expectation_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.ExpectationEnumID))
	builder.WriteString(", delegate_reason_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.DelegateReasonEnumID))
	builder.WriteString(", facility_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.FacilityID))
	builder.WriteString(", comments=")
	builder.WriteString(wepa.Comments)
	builder.WriteString(", must_rsvp=")
	builder.WriteString(fmt.Sprintf("%v", wepa.MustRsvp))
	builder.WriteString(", availability_status_id=")
	builder.WriteString(fmt.Sprintf("%v", wepa.AvailabilityStatusID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkEffortPartyAssignments is a parsable slice of WorkEffortPartyAssignment.
type WorkEffortPartyAssignments []*WorkEffortPartyAssignment

func (wepa WorkEffortPartyAssignments) config(cfg config) {
	for _i := range wepa {
		wepa[_i].config = cfg
	}
}
