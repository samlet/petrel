// Code generated by entc, DO NOT EDIT.

package workeffortpartyassignment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RoleTypeID applies equality check predicate on the "role_type_id" field. It's identical to RoleTypeIDEQ.
func RoleTypeID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleTypeID), v))
	})
}

// FromDate applies equality check predicate on the "from_date" field. It's identical to FromDateEQ.
func FromDate(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// ThruDate applies equality check predicate on the "thru_date" field. It's identical to ThruDateEQ.
func ThruDate(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusDateTime applies equality check predicate on the "status_date_time" field. It's identical to StatusDateTimeEQ.
func StatusDateTime(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDateTime), v))
	})
}

// ExpectationEnumID applies equality check predicate on the "expectation_enum_id" field. It's identical to ExpectationEnumIDEQ.
func ExpectationEnumID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpectationEnumID), v))
	})
}

// DelegateReasonEnumID applies equality check predicate on the "delegate_reason_enum_id" field. It's identical to DelegateReasonEnumIDEQ.
func DelegateReasonEnumID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelegateReasonEnumID), v))
	})
}

// FacilityID applies equality check predicate on the "facility_id" field. It's identical to FacilityIDEQ.
func FacilityID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// AvailabilityStatusID applies equality check predicate on the "availability_status_id" field. It's identical to AvailabilityStatusIDEQ.
func AvailabilityStatusID(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailabilityStatusID), v))
	})
}

// RoleTypeIDEQ applies the EQ predicate on the "role_type_id" field.
func RoleTypeIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDNEQ applies the NEQ predicate on the "role_type_id" field.
func RoleTypeIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDIn applies the In predicate on the "role_type_id" field.
func RoleTypeIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleTypeID), v...))
	})
}

// RoleTypeIDNotIn applies the NotIn predicate on the "role_type_id" field.
func RoleTypeIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleTypeID), v...))
	})
}

// RoleTypeIDGT applies the GT predicate on the "role_type_id" field.
func RoleTypeIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDGTE applies the GTE predicate on the "role_type_id" field.
func RoleTypeIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDLT applies the LT predicate on the "role_type_id" field.
func RoleTypeIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleTypeID), v))
	})
}

// RoleTypeIDLTE applies the LTE predicate on the "role_type_id" field.
func RoleTypeIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleTypeID), v))
	})
}

// FromDateEQ applies the EQ predicate on the "from_date" field.
func FromDateEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFromDate), v))
	})
}

// FromDateNEQ applies the NEQ predicate on the "from_date" field.
func FromDateNEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFromDate), v))
	})
}

// FromDateIn applies the In predicate on the "from_date" field.
func FromDateIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFromDate), v...))
	})
}

// FromDateNotIn applies the NotIn predicate on the "from_date" field.
func FromDateNotIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFromDate), v...))
	})
}

// FromDateGT applies the GT predicate on the "from_date" field.
func FromDateGT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFromDate), v))
	})
}

// FromDateGTE applies the GTE predicate on the "from_date" field.
func FromDateGTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFromDate), v))
	})
}

// FromDateLT applies the LT predicate on the "from_date" field.
func FromDateLT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFromDate), v))
	})
}

// FromDateLTE applies the LTE predicate on the "from_date" field.
func FromDateLTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFromDate), v))
	})
}

// ThruDateEQ applies the EQ predicate on the "thru_date" field.
func ThruDateEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThruDate), v))
	})
}

// ThruDateNEQ applies the NEQ predicate on the "thru_date" field.
func ThruDateNEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThruDate), v))
	})
}

// ThruDateIn applies the In predicate on the "thru_date" field.
func ThruDateIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThruDate), v...))
	})
}

// ThruDateNotIn applies the NotIn predicate on the "thru_date" field.
func ThruDateNotIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThruDate), v...))
	})
}

// ThruDateGT applies the GT predicate on the "thru_date" field.
func ThruDateGT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThruDate), v))
	})
}

// ThruDateGTE applies the GTE predicate on the "thru_date" field.
func ThruDateGTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThruDate), v))
	})
}

// ThruDateLT applies the LT predicate on the "thru_date" field.
func ThruDateLT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThruDate), v))
	})
}

// ThruDateLTE applies the LTE predicate on the "thru_date" field.
func ThruDateLTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThruDate), v))
	})
}

// ThruDateIsNil applies the IsNil predicate on the "thru_date" field.
func ThruDateIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThruDate)))
	})
}

// ThruDateNotNil applies the NotNil predicate on the "thru_date" field.
func ThruDateNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThruDate)))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// StatusDateTimeEQ applies the EQ predicate on the "status_date_time" field.
func StatusDateTimeEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeNEQ applies the NEQ predicate on the "status_date_time" field.
func StatusDateTimeNEQ(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeIn applies the In predicate on the "status_date_time" field.
func StatusDateTimeIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusDateTime), v...))
	})
}

// StatusDateTimeNotIn applies the NotIn predicate on the "status_date_time" field.
func StatusDateTimeNotIn(vs ...time.Time) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusDateTime), v...))
	})
}

// StatusDateTimeGT applies the GT predicate on the "status_date_time" field.
func StatusDateTimeGT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeGTE applies the GTE predicate on the "status_date_time" field.
func StatusDateTimeGTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeLT applies the LT predicate on the "status_date_time" field.
func StatusDateTimeLT(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeLTE applies the LTE predicate on the "status_date_time" field.
func StatusDateTimeLTE(v time.Time) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDateTime), v))
	})
}

// StatusDateTimeIsNil applies the IsNil predicate on the "status_date_time" field.
func StatusDateTimeIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusDateTime)))
	})
}

// StatusDateTimeNotNil applies the NotNil predicate on the "status_date_time" field.
func StatusDateTimeNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusDateTime)))
	})
}

// ExpectationEnumIDEQ applies the EQ predicate on the "expectation_enum_id" field.
func ExpectationEnumIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDNEQ applies the NEQ predicate on the "expectation_enum_id" field.
func ExpectationEnumIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDIn applies the In predicate on the "expectation_enum_id" field.
func ExpectationEnumIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpectationEnumID), v...))
	})
}

// ExpectationEnumIDNotIn applies the NotIn predicate on the "expectation_enum_id" field.
func ExpectationEnumIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpectationEnumID), v...))
	})
}

// ExpectationEnumIDGT applies the GT predicate on the "expectation_enum_id" field.
func ExpectationEnumIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDGTE applies the GTE predicate on the "expectation_enum_id" field.
func ExpectationEnumIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDLT applies the LT predicate on the "expectation_enum_id" field.
func ExpectationEnumIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDLTE applies the LTE predicate on the "expectation_enum_id" field.
func ExpectationEnumIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpectationEnumID), v))
	})
}

// ExpectationEnumIDIsNil applies the IsNil predicate on the "expectation_enum_id" field.
func ExpectationEnumIDIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExpectationEnumID)))
	})
}

// ExpectationEnumIDNotNil applies the NotNil predicate on the "expectation_enum_id" field.
func ExpectationEnumIDNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExpectationEnumID)))
	})
}

// DelegateReasonEnumIDEQ applies the EQ predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDNEQ applies the NEQ predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDIn applies the In predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDelegateReasonEnumID), v...))
	})
}

// DelegateReasonEnumIDNotIn applies the NotIn predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDelegateReasonEnumID), v...))
	})
}

// DelegateReasonEnumIDGT applies the GT predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDGTE applies the GTE predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDLT applies the LT predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDLTE applies the LTE predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDelegateReasonEnumID), v))
	})
}

// DelegateReasonEnumIDIsNil applies the IsNil predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDelegateReasonEnumID)))
	})
}

// DelegateReasonEnumIDNotNil applies the NotNil predicate on the "delegate_reason_enum_id" field.
func DelegateReasonEnumIDNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDelegateReasonEnumID)))
	})
}

// FacilityIDEQ applies the EQ predicate on the "facility_id" field.
func FacilityIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDNEQ applies the NEQ predicate on the "facility_id" field.
func FacilityIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIn applies the In predicate on the "facility_id" field.
func FacilityIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDNotIn applies the NotIn predicate on the "facility_id" field.
func FacilityIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacilityID), v...))
	})
}

// FacilityIDGT applies the GT predicate on the "facility_id" field.
func FacilityIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDGTE applies the GTE predicate on the "facility_id" field.
func FacilityIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLT applies the LT predicate on the "facility_id" field.
func FacilityIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacilityID), v))
	})
}

// FacilityIDLTE applies the LTE predicate on the "facility_id" field.
func FacilityIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacilityID), v))
	})
}

// FacilityIDIsNil applies the IsNil predicate on the "facility_id" field.
func FacilityIDIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacilityID)))
	})
}

// FacilityIDNotNil applies the NotNil predicate on the "facility_id" field.
func FacilityIDNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacilityID)))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// MustRsvpEQ applies the EQ predicate on the "must_rsvp" field.
func MustRsvpEQ(v MustRsvp) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMustRsvp), v))
	})
}

// MustRsvpNEQ applies the NEQ predicate on the "must_rsvp" field.
func MustRsvpNEQ(v MustRsvp) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMustRsvp), v))
	})
}

// MustRsvpIn applies the In predicate on the "must_rsvp" field.
func MustRsvpIn(vs ...MustRsvp) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMustRsvp), v...))
	})
}

// MustRsvpNotIn applies the NotIn predicate on the "must_rsvp" field.
func MustRsvpNotIn(vs ...MustRsvp) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMustRsvp), v...))
	})
}

// MustRsvpIsNil applies the IsNil predicate on the "must_rsvp" field.
func MustRsvpIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMustRsvp)))
	})
}

// MustRsvpNotNil applies the NotNil predicate on the "must_rsvp" field.
func MustRsvpNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMustRsvp)))
	})
}

// AvailabilityStatusIDEQ applies the EQ predicate on the "availability_status_id" field.
func AvailabilityStatusIDEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDNEQ applies the NEQ predicate on the "availability_status_id" field.
func AvailabilityStatusIDNEQ(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDIn applies the In predicate on the "availability_status_id" field.
func AvailabilityStatusIDIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailabilityStatusID), v...))
	})
}

// AvailabilityStatusIDNotIn applies the NotIn predicate on the "availability_status_id" field.
func AvailabilityStatusIDNotIn(vs ...int) predicate.WorkEffortPartyAssignment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailabilityStatusID), v...))
	})
}

// AvailabilityStatusIDGT applies the GT predicate on the "availability_status_id" field.
func AvailabilityStatusIDGT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDGTE applies the GTE predicate on the "availability_status_id" field.
func AvailabilityStatusIDGTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDLT applies the LT predicate on the "availability_status_id" field.
func AvailabilityStatusIDLT(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDLTE applies the LTE predicate on the "availability_status_id" field.
func AvailabilityStatusIDLTE(v int) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailabilityStatusID), v))
	})
}

// AvailabilityStatusIDIsNil applies the IsNil predicate on the "availability_status_id" field.
func AvailabilityStatusIDIsNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvailabilityStatusID)))
	})
}

// AvailabilityStatusIDNotNil applies the NotNil predicate on the "availability_status_id" field.
func AvailabilityStatusIDNotNil() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvailabilityStatusID)))
	})
}

// HasWorkEffort applies the HasEdge predicate on the "work_effort" edge.
func HasWorkEffort() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTable, WorkEffortColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortWith applies the HasEdge predicate on the "work_effort" edge with a given conditions (other predicates).
func HasWorkEffortWith(preds ...predicate.WorkEffort) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTable, WorkEffortColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParty applies the HasEdge predicate on the "party" edge.
func HasParty() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyWith applies the HasEdge predicate on the "party" edge with a given conditions (other predicates).
func HasPartyWith(preds ...predicate.Party) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyTable, PartyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartyRole applies the HasEdge predicate on the "party_role" edge.
func HasPartyRole() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyRoleTable, PartyRoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartyRoleWith applies the HasEdge predicate on the "party_role" edge with a given conditions (other predicates).
func HasPartyRoleWith(preds ...predicate.PartyRole) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PartyRoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartyRoleTable, PartyRoleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignedByUserLogin applies the HasEdge predicate on the "assigned_by_user_login" edge.
func HasAssignedByUserLogin() predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssignedByUserLoginTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssignedByUserLoginTable, AssignedByUserLoginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignedByUserLoginWith applies the HasEdge predicate on the "assigned_by_user_login" edge with a given conditions (other predicates).
func HasAssignedByUserLoginWith(preds ...predicate.UserLogin) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AssignedByUserLoginInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssignedByUserLoginTable, AssignedByUserLoginColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkEffortPartyAssignment) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkEffortPartyAssignment) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkEffortPartyAssignment) predicate.WorkEffortPartyAssignment {
	return predicate.WorkEffortPartyAssignment(func(s *sql.Selector) {
		p(s.Not())
	})
}
