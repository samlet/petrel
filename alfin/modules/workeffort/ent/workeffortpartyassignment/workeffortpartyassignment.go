// Code generated by entc, DO NOT EDIT.

package workeffortpartyassignment

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the workeffortpartyassignment type in the database.
	Label = "work_effort_party_assignment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoleTypeID holds the string denoting the role_type_id field in the database.
	FieldRoleTypeID = "role_type_id"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldThruDate holds the string denoting the thru_date field in the database.
	FieldThruDate = "thru_date"
	// FieldStatusID holds the string denoting the status_id field in the database.
	FieldStatusID = "status_id"
	// FieldStatusDateTime holds the string denoting the status_date_time field in the database.
	FieldStatusDateTime = "status_date_time"
	// FieldExpectationEnumID holds the string denoting the expectation_enum_id field in the database.
	FieldExpectationEnumID = "expectation_enum_id"
	// FieldDelegateReasonEnumID holds the string denoting the delegate_reason_enum_id field in the database.
	FieldDelegateReasonEnumID = "delegate_reason_enum_id"
	// FieldFacilityID holds the string denoting the facility_id field in the database.
	FieldFacilityID = "facility_id"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldMustRsvp holds the string denoting the must_rsvp field in the database.
	FieldMustRsvp = "must_rsvp"
	// FieldAvailabilityStatusID holds the string denoting the availability_status_id field in the database.
	FieldAvailabilityStatusID = "availability_status_id"
	// EdgeWorkEffort holds the string denoting the work_effort edge name in mutations.
	EdgeWorkEffort = "work_effort"
	// EdgeParty holds the string denoting the party edge name in mutations.
	EdgeParty = "party"
	// EdgePartyRole holds the string denoting the party_role edge name in mutations.
	EdgePartyRole = "party_role"
	// EdgeAssignedByUserLogin holds the string denoting the assigned_by_user_login edge name in mutations.
	EdgeAssignedByUserLogin = "assigned_by_user_login"
	// Table holds the table name of the workeffortpartyassignment in the database.
	Table = "work_effort_party_assignments"
	// WorkEffortTable is the table the holds the work_effort relation/edge.
	WorkEffortTable = "work_effort_party_assignments"
	// WorkEffortInverseTable is the table name for the WorkEffort entity.
	// It exists in this package in order to avoid circular dependency with the "workeffort" package.
	WorkEffortInverseTable = "work_efforts"
	// WorkEffortColumn is the table column denoting the work_effort relation/edge.
	WorkEffortColumn = "work_effort_work_effort_party_assignments"
	// PartyTable is the table the holds the party relation/edge.
	PartyTable = "work_effort_party_assignments"
	// PartyInverseTable is the table name for the Party entity.
	// It exists in this package in order to avoid circular dependency with the "party" package.
	PartyInverseTable = "parties"
	// PartyColumn is the table column denoting the party relation/edge.
	PartyColumn = "party_work_effort_party_assignments"
	// PartyRoleTable is the table the holds the party_role relation/edge.
	PartyRoleTable = "work_effort_party_assignments"
	// PartyRoleInverseTable is the table name for the PartyRole entity.
	// It exists in this package in order to avoid circular dependency with the "partyrole" package.
	PartyRoleInverseTable = "party_roles"
	// PartyRoleColumn is the table column denoting the party_role relation/edge.
	PartyRoleColumn = "party_role_work_effort_party_assignments"
	// AssignedByUserLoginTable is the table the holds the assigned_by_user_login relation/edge.
	AssignedByUserLoginTable = "work_effort_party_assignments"
	// AssignedByUserLoginInverseTable is the table name for the UserLogin entity.
	// It exists in this package in order to avoid circular dependency with the "userlogin" package.
	AssignedByUserLoginInverseTable = "user_logins"
	// AssignedByUserLoginColumn is the table column denoting the assigned_by_user_login relation/edge.
	AssignedByUserLoginColumn = "user_login_assigned_by_work_effort_party_assignments"
)

// Columns holds all SQL columns for workeffortpartyassignment fields.
var Columns = []string{
	FieldID,
	FieldRoleTypeID,
	FieldFromDate,
	FieldThruDate,
	FieldStatusID,
	FieldStatusDateTime,
	FieldExpectationEnumID,
	FieldDelegateReasonEnumID,
	FieldFacilityID,
	FieldComments,
	FieldMustRsvp,
	FieldAvailabilityStatusID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "work_effort_party_assignments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"party_work_effort_party_assignments",
	"party_role_work_effort_party_assignments",
	"user_login_assigned_by_work_effort_party_assignments",
	"work_effort_work_effort_party_assignments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFromDate holds the default value on creation for the "from_date" field.
	DefaultFromDate func() time.Time
	// DefaultThruDate holds the default value on creation for the "thru_date" field.
	DefaultThruDate func() time.Time
	// DefaultStatusDateTime holds the default value on creation for the "status_date_time" field.
	DefaultStatusDateTime func() time.Time
)

// MustRsvp defines the type for the "must_rsvp" enum field.
type MustRsvp string

// MustRsvp values.
const (
	MustRsvpYes     MustRsvp = "Yes"
	MustRsvpNo      MustRsvp = "No"
	MustRsvpUnknown MustRsvp = "Unknown"
)

func (mr MustRsvp) String() string {
	return string(mr)
}

// MustRsvpValidator is a validator for the "must_rsvp" field enum values. It is called by the builders before save.
func MustRsvpValidator(mr MustRsvp) error {
	switch mr {
	case MustRsvpYes, MustRsvpNo, MustRsvpUnknown:
		return nil
	default:
		return fmt.Errorf("workeffortpartyassignment: invalid enum value for must_rsvp field: %q", mr)
	}
}
