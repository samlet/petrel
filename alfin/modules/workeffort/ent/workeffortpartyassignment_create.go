// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortPartyAssignmentCreate is the builder for creating a WorkEffortPartyAssignment entity.
type WorkEffortPartyAssignmentCreate struct {
	config
	mutation *WorkEffortPartyAssignmentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetCreateTime(t time.Time) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetCreateTime(t)
	return wepac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableCreateTime(t *time.Time) *WorkEffortPartyAssignmentCreate {
	if t != nil {
		wepac.SetCreateTime(*t)
	}
	return wepac
}

// SetUpdateTime sets the "update_time" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetUpdateTime(t time.Time) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetUpdateTime(t)
	return wepac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableUpdateTime(t *time.Time) *WorkEffortPartyAssignmentCreate {
	if t != nil {
		wepac.SetUpdateTime(*t)
	}
	return wepac
}

// SetStringRef sets the "string_ref" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetStringRef(s string) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetStringRef(s)
	return wepac
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableStringRef(s *string) *WorkEffortPartyAssignmentCreate {
	if s != nil {
		wepac.SetStringRef(*s)
	}
	return wepac
}

// SetFromDate sets the "from_date" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetFromDate(t time.Time) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetFromDate(t)
	return wepac
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableFromDate(t *time.Time) *WorkEffortPartyAssignmentCreate {
	if t != nil {
		wepac.SetFromDate(*t)
	}
	return wepac
}

// SetThruDate sets the "thru_date" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetThruDate(t time.Time) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetThruDate(t)
	return wepac
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableThruDate(t *time.Time) *WorkEffortPartyAssignmentCreate {
	if t != nil {
		wepac.SetThruDate(*t)
	}
	return wepac
}

// SetStatusDateTime sets the "status_date_time" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetStatusDateTime(t time.Time) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetStatusDateTime(t)
	return wepac
}

// SetNillableStatusDateTime sets the "status_date_time" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableStatusDateTime(t *time.Time) *WorkEffortPartyAssignmentCreate {
	if t != nil {
		wepac.SetStatusDateTime(*t)
	}
	return wepac
}

// SetExpectationEnumID sets the "expectation_enum_id" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetExpectationEnumID(i int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetExpectationEnumID(i)
	return wepac
}

// SetNillableExpectationEnumID sets the "expectation_enum_id" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableExpectationEnumID(i *int) *WorkEffortPartyAssignmentCreate {
	if i != nil {
		wepac.SetExpectationEnumID(*i)
	}
	return wepac
}

// SetDelegateReasonEnumID sets the "delegate_reason_enum_id" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetDelegateReasonEnumID(i int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetDelegateReasonEnumID(i)
	return wepac
}

// SetNillableDelegateReasonEnumID sets the "delegate_reason_enum_id" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableDelegateReasonEnumID(i *int) *WorkEffortPartyAssignmentCreate {
	if i != nil {
		wepac.SetDelegateReasonEnumID(*i)
	}
	return wepac
}

// SetFacilityID sets the "facility_id" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetFacilityID(i int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetFacilityID(i)
	return wepac
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableFacilityID(i *int) *WorkEffortPartyAssignmentCreate {
	if i != nil {
		wepac.SetFacilityID(*i)
	}
	return wepac
}

// SetComments sets the "comments" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetComments(s string) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetComments(s)
	return wepac
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableComments(s *string) *WorkEffortPartyAssignmentCreate {
	if s != nil {
		wepac.SetComments(*s)
	}
	return wepac
}

// SetMustRsvp sets the "must_rsvp" field.
func (wepac *WorkEffortPartyAssignmentCreate) SetMustRsvp(wr workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetMustRsvp(wr)
	return wepac
}

// SetNillableMustRsvp sets the "must_rsvp" field if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableMustRsvp(wr *workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentCreate {
	if wr != nil {
		wepac.SetMustRsvp(*wr)
	}
	return wepac
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetWorkEffortID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetWorkEffortID(id)
	return wepac
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableWorkEffortID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetWorkEffortID(*id)
	}
	return wepac
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetWorkEffort(w *WorkEffort) *WorkEffortPartyAssignmentCreate {
	return wepac.SetWorkEffortID(w.ID)
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetPartyID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetPartyID(id)
	return wepac
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillablePartyID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetPartyID(*id)
	}
	return wepac
}

// SetParty sets the "party" edge to the Party entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetParty(p *Party) *WorkEffortPartyAssignmentCreate {
	return wepac.SetPartyID(p.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetPartyRoleID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetPartyRoleID(id)
	return wepac
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillablePartyRoleID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetPartyRoleID(*id)
	}
	return wepac
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetPartyRole(p *PartyRole) *WorkEffortPartyAssignmentCreate {
	return wepac.SetPartyRoleID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetRoleTypeID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetRoleTypeID(id)
	return wepac
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableRoleTypeID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetRoleTypeID(*id)
	}
	return wepac
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetRoleType(r *RoleType) *WorkEffortPartyAssignmentCreate {
	return wepac.SetRoleTypeID(r.ID)
}

// SetAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetAssignedByUserLoginID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetAssignedByUserLoginID(id)
	return wepac
}

// SetNillableAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableAssignedByUserLoginID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetAssignedByUserLoginID(*id)
	}
	return wepac
}

// SetAssignedByUserLogin sets the "assigned_by_user_login" edge to the UserLogin entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetAssignedByUserLogin(u *UserLogin) *WorkEffortPartyAssignmentCreate {
	return wepac.SetAssignedByUserLoginID(u.ID)
}

// SetAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetAssignmentStatusItemID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetAssignmentStatusItemID(id)
	return wepac
}

// SetNillableAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableAssignmentStatusItemID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetAssignmentStatusItemID(*id)
	}
	return wepac
}

// SetAssignmentStatusItem sets the "assignment_status_item" edge to the StatusItem entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetAssignmentStatusItem(s *StatusItem) *WorkEffortPartyAssignmentCreate {
	return wepac.SetAssignmentStatusItemID(s.ID)
}

// SetAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID.
func (wepac *WorkEffortPartyAssignmentCreate) SetAvailabilityStatusItemID(id int) *WorkEffortPartyAssignmentCreate {
	wepac.mutation.SetAvailabilityStatusItemID(id)
	return wepac
}

// SetNillableAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepac *WorkEffortPartyAssignmentCreate) SetNillableAvailabilityStatusItemID(id *int) *WorkEffortPartyAssignmentCreate {
	if id != nil {
		wepac = wepac.SetAvailabilityStatusItemID(*id)
	}
	return wepac
}

// SetAvailabilityStatusItem sets the "availability_status_item" edge to the StatusItem entity.
func (wepac *WorkEffortPartyAssignmentCreate) SetAvailabilityStatusItem(s *StatusItem) *WorkEffortPartyAssignmentCreate {
	return wepac.SetAvailabilityStatusItemID(s.ID)
}

// Mutation returns the WorkEffortPartyAssignmentMutation object of the builder.
func (wepac *WorkEffortPartyAssignmentCreate) Mutation() *WorkEffortPartyAssignmentMutation {
	return wepac.mutation
}

// Save creates the WorkEffortPartyAssignment in the database.
func (wepac *WorkEffortPartyAssignmentCreate) Save(ctx context.Context) (*WorkEffortPartyAssignment, error) {
	var (
		err  error
		node *WorkEffortPartyAssignment
	)
	wepac.defaults()
	if len(wepac.hooks) == 0 {
		if err = wepac.check(); err != nil {
			return nil, err
		}
		node, err = wepac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortPartyAssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wepac.check(); err != nil {
				return nil, err
			}
			wepac.mutation = mutation
			if node, err = wepac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wepac.hooks) - 1; i >= 0; i-- {
			mut = wepac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wepac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wepac *WorkEffortPartyAssignmentCreate) SaveX(ctx context.Context) *WorkEffortPartyAssignment {
	v, err := wepac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wepac *WorkEffortPartyAssignmentCreate) defaults() {
	if _, ok := wepac.mutation.CreateTime(); !ok {
		v := workeffortpartyassignment.DefaultCreateTime()
		wepac.mutation.SetCreateTime(v)
	}
	if _, ok := wepac.mutation.UpdateTime(); !ok {
		v := workeffortpartyassignment.DefaultUpdateTime()
		wepac.mutation.SetUpdateTime(v)
	}
	if _, ok := wepac.mutation.FromDate(); !ok {
		v := workeffortpartyassignment.DefaultFromDate()
		wepac.mutation.SetFromDate(v)
	}
	if _, ok := wepac.mutation.ThruDate(); !ok {
		v := workeffortpartyassignment.DefaultThruDate()
		wepac.mutation.SetThruDate(v)
	}
	if _, ok := wepac.mutation.StatusDateTime(); !ok {
		v := workeffortpartyassignment.DefaultStatusDateTime()
		wepac.mutation.SetStatusDateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wepac *WorkEffortPartyAssignmentCreate) check() error {
	if _, ok := wepac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wepac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := wepac.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New("ent: missing required field \"from_date\"")}
	}
	if v, ok := wepac.mutation.MustRsvp(); ok {
		if err := workeffortpartyassignment.MustRsvpValidator(v); err != nil {
			return &ValidationError{Name: "must_rsvp", err: fmt.Errorf("ent: validator failed for field \"must_rsvp\": %w", err)}
		}
	}
	return nil
}

func (wepac *WorkEffortPartyAssignmentCreate) sqlSave(ctx context.Context) (*WorkEffortPartyAssignment, error) {
	_node, _spec := wepac.createSpec()
	if err := sqlgraph.CreateNode(ctx, wepac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wepac *WorkEffortPartyAssignmentCreate) createSpec() (*WorkEffortPartyAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkEffortPartyAssignment{config: wepac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workeffortpartyassignment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortpartyassignment.FieldID,
			},
		}
	)
	if value, ok := wepac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wepac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wepac.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := wepac.mutation.FromDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldFromDate,
		})
		_node.FromDate = value
	}
	if value, ok := wepac.mutation.ThruDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldThruDate,
		})
		_node.ThruDate = value
	}
	if value, ok := wepac.mutation.StatusDateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldStatusDateTime,
		})
		_node.StatusDateTime = value
	}
	if value, ok := wepac.mutation.ExpectationEnumID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
		_node.ExpectationEnumID = value
	}
	if value, ok := wepac.mutation.DelegateReasonEnumID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
		_node.DelegateReasonEnumID = value
	}
	if value, ok := wepac.mutation.FacilityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
		_node.FacilityID = value
	}
	if value, ok := wepac.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := wepac.mutation.MustRsvp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffortpartyassignment.FieldMustRsvp,
		})
		_node.MustRsvp = value
	}
	if nodes := wepac.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.WorkEffortTable,
			Columns: []string{workeffortpartyassignment.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.work_effort_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyTable,
			Columns: []string{workeffortpartyassignment.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.party_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyRoleTable,
			Columns: []string{workeffortpartyassignment.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.party_role_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.RoleTypeTable,
			Columns: []string{workeffortpartyassignment.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.role_type_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.AssignedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignedByUserLoginTable,
			Columns: []string{workeffortpartyassignment.AssignedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_assigned_by_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.AssignmentStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignmentStatusItemTable,
			Columns: []string{workeffortpartyassignment.AssignmentStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_assignment_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wepac.mutation.AvailabilityStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AvailabilityStatusItemTable,
			Columns: []string{workeffortpartyassignment.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.status_item_availability_work_effort_party_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkEffortPartyAssignmentCreateBulk is the builder for creating many WorkEffortPartyAssignment entities in bulk.
type WorkEffortPartyAssignmentCreateBulk struct {
	config
	builders []*WorkEffortPartyAssignmentCreate
}

// Save creates the WorkEffortPartyAssignment entities in the database.
func (wepacb *WorkEffortPartyAssignmentCreateBulk) Save(ctx context.Context) ([]*WorkEffortPartyAssignment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wepacb.builders))
	nodes := make([]*WorkEffortPartyAssignment, len(wepacb.builders))
	mutators := make([]Mutator, len(wepacb.builders))
	for i := range wepacb.builders {
		func(i int, root context.Context) {
			builder := wepacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkEffortPartyAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wepacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wepacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wepacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wepacb *WorkEffortPartyAssignmentCreateBulk) SaveX(ctx context.Context) []*WorkEffortPartyAssignment {
	v, err := wepacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
