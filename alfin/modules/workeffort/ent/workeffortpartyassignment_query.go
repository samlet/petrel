// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortPartyAssignmentQuery is the builder for querying WorkEffortPartyAssignment entities.
type WorkEffortPartyAssignmentQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.WorkEffortPartyAssignment
	// eager-loading edges.
	withWorkEffort             *WorkEffortQuery
	withParty                  *PartyQuery
	withPartyRole              *PartyRoleQuery
	withRoleType               *RoleTypeQuery
	withAssignedByUserLogin    *UserLoginQuery
	withAssignmentStatusItem   *StatusItemQuery
	withAvailabilityStatusItem *StatusItemQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkEffortPartyAssignmentQuery builder.
func (wepaq *WorkEffortPartyAssignmentQuery) Where(ps ...predicate.WorkEffortPartyAssignment) *WorkEffortPartyAssignmentQuery {
	wepaq.predicates = append(wepaq.predicates, ps...)
	return wepaq
}

// Limit adds a limit step to the query.
func (wepaq *WorkEffortPartyAssignmentQuery) Limit(limit int) *WorkEffortPartyAssignmentQuery {
	wepaq.limit = &limit
	return wepaq
}

// Offset adds an offset step to the query.
func (wepaq *WorkEffortPartyAssignmentQuery) Offset(offset int) *WorkEffortPartyAssignmentQuery {
	wepaq.offset = &offset
	return wepaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wepaq *WorkEffortPartyAssignmentQuery) Unique(unique bool) *WorkEffortPartyAssignmentQuery {
	wepaq.unique = &unique
	return wepaq
}

// Order adds an order step to the query.
func (wepaq *WorkEffortPartyAssignmentQuery) Order(o ...OrderFunc) *WorkEffortPartyAssignmentQuery {
	wepaq.order = append(wepaq.order, o...)
	return wepaq
}

// QueryWorkEffort chains the current query on the "work_effort" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryWorkEffort() *WorkEffortQuery {
	query := &WorkEffortQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(workeffort.Table, workeffort.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.WorkEffortTable, workeffortpartyassignment.WorkEffortColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParty chains the current query on the "party" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryParty() *PartyQuery {
	query := &PartyQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyTable, workeffortpartyassignment.PartyColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartyRole chains the current query on the "party_role" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryPartyRole() *PartyRoleQuery {
	query := &PartyRoleQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(partyrole.Table, partyrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.PartyRoleTable, workeffortpartyassignment.PartyRoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleType chains the current query on the "role_type" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryRoleType() *RoleTypeQuery {
	query := &RoleTypeQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(roletype.Table, roletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.RoleTypeTable, workeffortpartyassignment.RoleTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedByUserLogin chains the current query on the "assigned_by_user_login" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryAssignedByUserLogin() *UserLoginQuery {
	query := &UserLoginQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(userlogin.Table, userlogin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AssignedByUserLoginTable, workeffortpartyassignment.AssignedByUserLoginColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignmentStatusItem chains the current query on the "assignment_status_item" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryAssignmentStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AssignmentStatusItemTable, workeffortpartyassignment.AssignmentStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAvailabilityStatusItem chains the current query on the "availability_status_item" edge.
func (wepaq *WorkEffortPartyAssignmentQuery) QueryAvailabilityStatusItem() *StatusItemQuery {
	query := &StatusItemQuery{config: wepaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wepaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workeffortpartyassignment.Table, workeffortpartyassignment.FieldID, selector),
			sqlgraph.To(statusitem.Table, statusitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workeffortpartyassignment.AvailabilityStatusItemTable, workeffortpartyassignment.AvailabilityStatusItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(wepaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkEffortPartyAssignment entity from the query.
// Returns a *NotFoundError when no WorkEffortPartyAssignment was found.
func (wepaq *WorkEffortPartyAssignmentQuery) First(ctx context.Context) (*WorkEffortPartyAssignment, error) {
	nodes, err := wepaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workeffortpartyassignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) FirstX(ctx context.Context) *WorkEffortPartyAssignment {
	node, err := wepaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkEffortPartyAssignment ID from the query.
// Returns a *NotFoundError when no WorkEffortPartyAssignment ID was found.
func (wepaq *WorkEffortPartyAssignmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wepaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workeffortpartyassignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) FirstIDX(ctx context.Context) int {
	id, err := wepaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkEffortPartyAssignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one WorkEffortPartyAssignment entity is not found.
// Returns a *NotFoundError when no WorkEffortPartyAssignment entities are found.
func (wepaq *WorkEffortPartyAssignmentQuery) Only(ctx context.Context) (*WorkEffortPartyAssignment, error) {
	nodes, err := wepaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workeffortpartyassignment.Label}
	default:
		return nil, &NotSingularError{workeffortpartyassignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) OnlyX(ctx context.Context) *WorkEffortPartyAssignment {
	node, err := wepaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkEffortPartyAssignment ID in the query.
// Returns a *NotSingularError when exactly one WorkEffortPartyAssignment ID is not found.
// Returns a *NotFoundError when no entities are found.
func (wepaq *WorkEffortPartyAssignmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wepaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = &NotSingularError{workeffortpartyassignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := wepaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkEffortPartyAssignments.
func (wepaq *WorkEffortPartyAssignmentQuery) All(ctx context.Context) ([]*WorkEffortPartyAssignment, error) {
	if err := wepaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return wepaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) AllX(ctx context.Context) []*WorkEffortPartyAssignment {
	nodes, err := wepaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkEffortPartyAssignment IDs.
func (wepaq *WorkEffortPartyAssignmentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := wepaq.Select(workeffortpartyassignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) IDsX(ctx context.Context) []int {
	ids, err := wepaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wepaq *WorkEffortPartyAssignmentQuery) Count(ctx context.Context) (int, error) {
	if err := wepaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return wepaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) CountX(ctx context.Context) int {
	count, err := wepaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wepaq *WorkEffortPartyAssignmentQuery) Exist(ctx context.Context) (bool, error) {
	if err := wepaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return wepaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (wepaq *WorkEffortPartyAssignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := wepaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkEffortPartyAssignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wepaq *WorkEffortPartyAssignmentQuery) Clone() *WorkEffortPartyAssignmentQuery {
	if wepaq == nil {
		return nil
	}
	return &WorkEffortPartyAssignmentQuery{
		config:                     wepaq.config,
		limit:                      wepaq.limit,
		offset:                     wepaq.offset,
		order:                      append([]OrderFunc{}, wepaq.order...),
		predicates:                 append([]predicate.WorkEffortPartyAssignment{}, wepaq.predicates...),
		withWorkEffort:             wepaq.withWorkEffort.Clone(),
		withParty:                  wepaq.withParty.Clone(),
		withPartyRole:              wepaq.withPartyRole.Clone(),
		withRoleType:               wepaq.withRoleType.Clone(),
		withAssignedByUserLogin:    wepaq.withAssignedByUserLogin.Clone(),
		withAssignmentStatusItem:   wepaq.withAssignmentStatusItem.Clone(),
		withAvailabilityStatusItem: wepaq.withAvailabilityStatusItem.Clone(),
		// clone intermediate query.
		sql:  wepaq.sql.Clone(),
		path: wepaq.path,
	}
}

// WithWorkEffort tells the query-builder to eager-load the nodes that are connected to
// the "work_effort" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithWorkEffort(opts ...func(*WorkEffortQuery)) *WorkEffortPartyAssignmentQuery {
	query := &WorkEffortQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withWorkEffort = query
	return wepaq
}

// WithParty tells the query-builder to eager-load the nodes that are connected to
// the "party" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithParty(opts ...func(*PartyQuery)) *WorkEffortPartyAssignmentQuery {
	query := &PartyQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withParty = query
	return wepaq
}

// WithPartyRole tells the query-builder to eager-load the nodes that are connected to
// the "party_role" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithPartyRole(opts ...func(*PartyRoleQuery)) *WorkEffortPartyAssignmentQuery {
	query := &PartyRoleQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withPartyRole = query
	return wepaq
}

// WithRoleType tells the query-builder to eager-load the nodes that are connected to
// the "role_type" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithRoleType(opts ...func(*RoleTypeQuery)) *WorkEffortPartyAssignmentQuery {
	query := &RoleTypeQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withRoleType = query
	return wepaq
}

// WithAssignedByUserLogin tells the query-builder to eager-load the nodes that are connected to
// the "assigned_by_user_login" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithAssignedByUserLogin(opts ...func(*UserLoginQuery)) *WorkEffortPartyAssignmentQuery {
	query := &UserLoginQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withAssignedByUserLogin = query
	return wepaq
}

// WithAssignmentStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "assignment_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithAssignmentStatusItem(opts ...func(*StatusItemQuery)) *WorkEffortPartyAssignmentQuery {
	query := &StatusItemQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withAssignmentStatusItem = query
	return wepaq
}

// WithAvailabilityStatusItem tells the query-builder to eager-load the nodes that are connected to
// the "availability_status_item" edge. The optional arguments are used to configure the query builder of the edge.
func (wepaq *WorkEffortPartyAssignmentQuery) WithAvailabilityStatusItem(opts ...func(*StatusItemQuery)) *WorkEffortPartyAssignmentQuery {
	query := &StatusItemQuery{config: wepaq.config}
	for _, opt := range opts {
		opt(query)
	}
	wepaq.withAvailabilityStatusItem = query
	return wepaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkEffortPartyAssignment.Query().
//		GroupBy(workeffortpartyassignment.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (wepaq *WorkEffortPartyAssignmentQuery) GroupBy(field string, fields ...string) *WorkEffortPartyAssignmentGroupBy {
	group := &WorkEffortPartyAssignmentGroupBy{config: wepaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := wepaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return wepaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.WorkEffortPartyAssignment.Query().
//		Select(workeffortpartyassignment.FieldCreateTime).
//		Scan(ctx, &v)
//
func (wepaq *WorkEffortPartyAssignmentQuery) Select(field string, fields ...string) *WorkEffortPartyAssignmentSelect {
	wepaq.fields = append([]string{field}, fields...)
	return &WorkEffortPartyAssignmentSelect{WorkEffortPartyAssignmentQuery: wepaq}
}

func (wepaq *WorkEffortPartyAssignmentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range wepaq.fields {
		if !workeffortpartyassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wepaq.path != nil {
		prev, err := wepaq.path(ctx)
		if err != nil {
			return err
		}
		wepaq.sql = prev
	}
	return nil
}

func (wepaq *WorkEffortPartyAssignmentQuery) sqlAll(ctx context.Context) ([]*WorkEffortPartyAssignment, error) {
	var (
		nodes       = []*WorkEffortPartyAssignment{}
		withFKs     = wepaq.withFKs
		_spec       = wepaq.querySpec()
		loadedTypes = [7]bool{
			wepaq.withWorkEffort != nil,
			wepaq.withParty != nil,
			wepaq.withPartyRole != nil,
			wepaq.withRoleType != nil,
			wepaq.withAssignedByUserLogin != nil,
			wepaq.withAssignmentStatusItem != nil,
			wepaq.withAvailabilityStatusItem != nil,
		}
	)
	if wepaq.withWorkEffort != nil || wepaq.withParty != nil || wepaq.withPartyRole != nil || wepaq.withRoleType != nil || wepaq.withAssignedByUserLogin != nil || wepaq.withAssignmentStatusItem != nil || wepaq.withAvailabilityStatusItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortpartyassignment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &WorkEffortPartyAssignment{config: wepaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, wepaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := wepaq.withWorkEffort; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].work_effort_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].work_effort_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workeffort.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "work_effort_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.WorkEffort = n
			}
		}
	}

	if query := wepaq.withParty; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].party_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].party_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(party.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Party = n
			}
		}
	}

	if query := wepaq.withPartyRole; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].party_role_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].party_role_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(partyrole.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "party_role_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.PartyRole = n
			}
		}
	}

	if query := wepaq.withRoleType; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].role_type_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].role_type_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(roletype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_type_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RoleType = n
			}
		}
	}

	if query := wepaq.withAssignedByUserLogin; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].user_login_assigned_by_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].user_login_assigned_by_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(userlogin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_login_assigned_by_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AssignedByUserLogin = n
			}
		}
	}

	if query := wepaq.withAssignmentStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].status_item_assignment_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].status_item_assignment_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_assignment_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AssignmentStatusItem = n
			}
		}
	}

	if query := wepaq.withAvailabilityStatusItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkEffortPartyAssignment)
		for i := range nodes {
			if nodes[i].status_item_availability_work_effort_party_assignments == nil {
				continue
			}
			fk := *nodes[i].status_item_availability_work_effort_party_assignments
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(statusitem.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "status_item_availability_work_effort_party_assignments" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AvailabilityStatusItem = n
			}
		}
	}

	return nodes, nil
}

func (wepaq *WorkEffortPartyAssignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wepaq.querySpec()
	return sqlgraph.CountNodes(ctx, wepaq.driver, _spec)
}

func (wepaq *WorkEffortPartyAssignmentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := wepaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (wepaq *WorkEffortPartyAssignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortpartyassignment.Table,
			Columns: workeffortpartyassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortpartyassignment.FieldID,
			},
		},
		From:   wepaq.sql,
		Unique: true,
	}
	if unique := wepaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := wepaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortpartyassignment.FieldID)
		for i := range fields {
			if fields[i] != workeffortpartyassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wepaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wepaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wepaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wepaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wepaq *WorkEffortPartyAssignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wepaq.driver.Dialect())
	t1 := builder.Table(workeffortpartyassignment.Table)
	columns := wepaq.fields
	if len(columns) == 0 {
		columns = workeffortpartyassignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wepaq.sql != nil {
		selector = wepaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range wepaq.predicates {
		p(selector)
	}
	for _, p := range wepaq.order {
		p(selector)
	}
	if offset := wepaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wepaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkEffortPartyAssignmentGroupBy is the group-by builder for WorkEffortPartyAssignment entities.
type WorkEffortPartyAssignmentGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Aggregate(fns ...AggregateFunc) *WorkEffortPartyAssignmentGroupBy {
	wepagb.fns = append(wepagb.fns, fns...)
	return wepagb
}

// Scan applies the group-by query and scans the result into the given value.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wepagb.path(ctx)
	if err != nil {
		return err
	}
	wepagb.sql = query
	return wepagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wepagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wepagb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wepagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) StringsX(ctx context.Context) []string {
	v, err := wepagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wepagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) StringX(ctx context.Context) string {
	v, err := wepagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wepagb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wepagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) IntsX(ctx context.Context) []int {
	v, err := wepagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wepagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) IntX(ctx context.Context) int {
	v, err := wepagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wepagb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wepagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wepagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wepagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Float64X(ctx context.Context) float64 {
	v, err := wepagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wepagb.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wepagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wepagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wepagb *WorkEffortPartyAssignmentGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wepagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wepagb *WorkEffortPartyAssignmentGroupBy) BoolX(ctx context.Context) bool {
	v, err := wepagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wepagb *WorkEffortPartyAssignmentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wepagb.fields {
		if !workeffortpartyassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wepagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wepagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wepagb *WorkEffortPartyAssignmentGroupBy) sqlQuery() *sql.Selector {
	selector := wepagb.sql.Select()
	aggregation := make([]string, 0, len(wepagb.fns))
	for _, fn := range wepagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wepagb.fields)+len(wepagb.fns))
		for _, f := range wepagb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wepagb.fields...)...)
}

// WorkEffortPartyAssignmentSelect is the builder for selecting fields of WorkEffortPartyAssignment entities.
type WorkEffortPartyAssignmentSelect struct {
	*WorkEffortPartyAssignmentQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (wepas *WorkEffortPartyAssignmentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := wepas.prepareQuery(ctx); err != nil {
		return err
	}
	wepas.sql = wepas.WorkEffortPartyAssignmentQuery.sqlQuery(ctx)
	return wepas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) ScanX(ctx context.Context, v interface{}) {
	if err := wepas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Strings(ctx context.Context) ([]string, error) {
	if len(wepas.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := wepas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) StringsX(ctx context.Context) []string {
	v, err := wepas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wepas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) StringX(ctx context.Context) string {
	v, err := wepas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Ints(ctx context.Context) ([]int, error) {
	if len(wepas.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := wepas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) IntsX(ctx context.Context) []int {
	v, err := wepas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wepas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) IntX(ctx context.Context) int {
	v, err := wepas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(wepas.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := wepas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) Float64sX(ctx context.Context) []float64 {
	v, err := wepas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wepas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) Float64X(ctx context.Context) float64 {
	v, err := wepas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(wepas.fields) > 1 {
		return nil, errors.New("ent: WorkEffortPartyAssignmentSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := wepas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) BoolsX(ctx context.Context) []bool {
	v, err := wepas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (wepas *WorkEffortPartyAssignmentSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wepas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workeffortpartyassignment.Label}
	default:
		err = fmt.Errorf("ent: WorkEffortPartyAssignmentSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wepas *WorkEffortPartyAssignmentSelect) BoolX(ctx context.Context) bool {
	v, err := wepas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wepas *WorkEffortPartyAssignmentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wepas.sql.Query()
	if err := wepas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
