// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/party"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/partyrole"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/roletype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/statusitem"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/userlogin"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortpartyassignment"
)

// WorkEffortPartyAssignmentUpdate is the builder for updating WorkEffortPartyAssignment entities.
type WorkEffortPartyAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortPartyAssignmentMutation
}

// Where adds a new predicate for the WorkEffortPartyAssignmentUpdate builder.
func (wepau *WorkEffortPartyAssignmentUpdate) Where(ps ...predicate.WorkEffortPartyAssignment) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.predicates = append(wepau.mutation.predicates, ps...)
	return wepau
}

// SetStringRef sets the "string_ref" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetStringRef(s string) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetStringRef(s)
	return wepau
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableStringRef(s *string) *WorkEffortPartyAssignmentUpdate {
	if s != nil {
		wepau.SetStringRef(*s)
	}
	return wepau
}

// ClearStringRef clears the value of the "string_ref" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearStringRef() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearStringRef()
	return wepau
}

// SetFromDate sets the "from_date" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetFromDate(t time.Time) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetFromDate(t)
	return wepau
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableFromDate(t *time.Time) *WorkEffortPartyAssignmentUpdate {
	if t != nil {
		wepau.SetFromDate(*t)
	}
	return wepau
}

// SetThruDate sets the "thru_date" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetThruDate(t time.Time) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetThruDate(t)
	return wepau
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableThruDate(t *time.Time) *WorkEffortPartyAssignmentUpdate {
	if t != nil {
		wepau.SetThruDate(*t)
	}
	return wepau
}

// ClearThruDate clears the value of the "thru_date" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearThruDate() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearThruDate()
	return wepau
}

// SetStatusDateTime sets the "status_date_time" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetStatusDateTime(t time.Time) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetStatusDateTime(t)
	return wepau
}

// SetNillableStatusDateTime sets the "status_date_time" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableStatusDateTime(t *time.Time) *WorkEffortPartyAssignmentUpdate {
	if t != nil {
		wepau.SetStatusDateTime(*t)
	}
	return wepau
}

// ClearStatusDateTime clears the value of the "status_date_time" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearStatusDateTime() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearStatusDateTime()
	return wepau
}

// SetExpectationEnumID sets the "expectation_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetExpectationEnumID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ResetExpectationEnumID()
	wepau.mutation.SetExpectationEnumID(i)
	return wepau
}

// SetNillableExpectationEnumID sets the "expectation_enum_id" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableExpectationEnumID(i *int) *WorkEffortPartyAssignmentUpdate {
	if i != nil {
		wepau.SetExpectationEnumID(*i)
	}
	return wepau
}

// AddExpectationEnumID adds i to the "expectation_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) AddExpectationEnumID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.AddExpectationEnumID(i)
	return wepau
}

// ClearExpectationEnumID clears the value of the "expectation_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearExpectationEnumID() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearExpectationEnumID()
	return wepau
}

// SetDelegateReasonEnumID sets the "delegate_reason_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetDelegateReasonEnumID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ResetDelegateReasonEnumID()
	wepau.mutation.SetDelegateReasonEnumID(i)
	return wepau
}

// SetNillableDelegateReasonEnumID sets the "delegate_reason_enum_id" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableDelegateReasonEnumID(i *int) *WorkEffortPartyAssignmentUpdate {
	if i != nil {
		wepau.SetDelegateReasonEnumID(*i)
	}
	return wepau
}

// AddDelegateReasonEnumID adds i to the "delegate_reason_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) AddDelegateReasonEnumID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.AddDelegateReasonEnumID(i)
	return wepau
}

// ClearDelegateReasonEnumID clears the value of the "delegate_reason_enum_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearDelegateReasonEnumID() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearDelegateReasonEnumID()
	return wepau
}

// SetFacilityID sets the "facility_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetFacilityID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ResetFacilityID()
	wepau.mutation.SetFacilityID(i)
	return wepau
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableFacilityID(i *int) *WorkEffortPartyAssignmentUpdate {
	if i != nil {
		wepau.SetFacilityID(*i)
	}
	return wepau
}

// AddFacilityID adds i to the "facility_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) AddFacilityID(i int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.AddFacilityID(i)
	return wepau
}

// ClearFacilityID clears the value of the "facility_id" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearFacilityID() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearFacilityID()
	return wepau
}

// SetComments sets the "comments" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetComments(s string) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetComments(s)
	return wepau
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableComments(s *string) *WorkEffortPartyAssignmentUpdate {
	if s != nil {
		wepau.SetComments(*s)
	}
	return wepau
}

// ClearComments clears the value of the "comments" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearComments() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearComments()
	return wepau
}

// SetMustRsvp sets the "must_rsvp" field.
func (wepau *WorkEffortPartyAssignmentUpdate) SetMustRsvp(wr workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetMustRsvp(wr)
	return wepau
}

// SetNillableMustRsvp sets the "must_rsvp" field if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableMustRsvp(wr *workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentUpdate {
	if wr != nil {
		wepau.SetMustRsvp(*wr)
	}
	return wepau
}

// ClearMustRsvp clears the value of the "must_rsvp" field.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearMustRsvp() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearMustRsvp()
	return wepau
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetWorkEffortID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetWorkEffortID(id)
	return wepau
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableWorkEffortID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetWorkEffortID(*id)
	}
	return wepau
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetWorkEffort(w *WorkEffort) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetWorkEffortID(w.ID)
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetPartyID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetPartyID(id)
	return wepau
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillablePartyID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetPartyID(*id)
	}
	return wepau
}

// SetParty sets the "party" edge to the Party entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetParty(p *Party) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetPartyID(p.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetPartyRoleID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetPartyRoleID(id)
	return wepau
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillablePartyRoleID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetPartyRoleID(*id)
	}
	return wepau
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetPartyRole(p *PartyRole) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetPartyRoleID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetRoleTypeID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetRoleTypeID(id)
	return wepau
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableRoleTypeID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetRoleTypeID(*id)
	}
	return wepau
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetRoleType(r *RoleType) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetRoleTypeID(r.ID)
}

// SetAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAssignedByUserLoginID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetAssignedByUserLoginID(id)
	return wepau
}

// SetNillableAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableAssignedByUserLoginID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetAssignedByUserLoginID(*id)
	}
	return wepau
}

// SetAssignedByUserLogin sets the "assigned_by_user_login" edge to the UserLogin entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAssignedByUserLogin(u *UserLogin) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetAssignedByUserLoginID(u.ID)
}

// SetAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAssignmentStatusItemID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetAssignmentStatusItemID(id)
	return wepau
}

// SetNillableAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableAssignmentStatusItemID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetAssignmentStatusItemID(*id)
	}
	return wepau
}

// SetAssignmentStatusItem sets the "assignment_status_item" edge to the StatusItem entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAssignmentStatusItem(s *StatusItem) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetAssignmentStatusItemID(s.ID)
}

// SetAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAvailabilityStatusItemID(id int) *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.SetAvailabilityStatusItemID(id)
	return wepau
}

// SetNillableAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepau *WorkEffortPartyAssignmentUpdate) SetNillableAvailabilityStatusItemID(id *int) *WorkEffortPartyAssignmentUpdate {
	if id != nil {
		wepau = wepau.SetAvailabilityStatusItemID(*id)
	}
	return wepau
}

// SetAvailabilityStatusItem sets the "availability_status_item" edge to the StatusItem entity.
func (wepau *WorkEffortPartyAssignmentUpdate) SetAvailabilityStatusItem(s *StatusItem) *WorkEffortPartyAssignmentUpdate {
	return wepau.SetAvailabilityStatusItemID(s.ID)
}

// Mutation returns the WorkEffortPartyAssignmentMutation object of the builder.
func (wepau *WorkEffortPartyAssignmentUpdate) Mutation() *WorkEffortPartyAssignmentMutation {
	return wepau.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearWorkEffort() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearWorkEffort()
	return wepau
}

// ClearParty clears the "party" edge to the Party entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearParty() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearParty()
	return wepau
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearPartyRole() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearPartyRole()
	return wepau
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearRoleType() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearRoleType()
	return wepau
}

// ClearAssignedByUserLogin clears the "assigned_by_user_login" edge to the UserLogin entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearAssignedByUserLogin() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearAssignedByUserLogin()
	return wepau
}

// ClearAssignmentStatusItem clears the "assignment_status_item" edge to the StatusItem entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearAssignmentStatusItem() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearAssignmentStatusItem()
	return wepau
}

// ClearAvailabilityStatusItem clears the "availability_status_item" edge to the StatusItem entity.
func (wepau *WorkEffortPartyAssignmentUpdate) ClearAvailabilityStatusItem() *WorkEffortPartyAssignmentUpdate {
	wepau.mutation.ClearAvailabilityStatusItem()
	return wepau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wepau *WorkEffortPartyAssignmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wepau.defaults()
	if len(wepau.hooks) == 0 {
		if err = wepau.check(); err != nil {
			return 0, err
		}
		affected, err = wepau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortPartyAssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wepau.check(); err != nil {
				return 0, err
			}
			wepau.mutation = mutation
			affected, err = wepau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wepau.hooks) - 1; i >= 0; i-- {
			mut = wepau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wepau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wepau *WorkEffortPartyAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := wepau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wepau *WorkEffortPartyAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := wepau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wepau *WorkEffortPartyAssignmentUpdate) ExecX(ctx context.Context) {
	if err := wepau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wepau *WorkEffortPartyAssignmentUpdate) defaults() {
	if _, ok := wepau.mutation.UpdateTime(); !ok {
		v := workeffortpartyassignment.UpdateDefaultUpdateTime()
		wepau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wepau *WorkEffortPartyAssignmentUpdate) check() error {
	if v, ok := wepau.mutation.MustRsvp(); ok {
		if err := workeffortpartyassignment.MustRsvpValidator(v); err != nil {
			return &ValidationError{Name: "must_rsvp", err: fmt.Errorf("ent: validator failed for field \"must_rsvp\": %w", err)}
		}
	}
	return nil
}

func (wepau *WorkEffortPartyAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortpartyassignment.Table,
			Columns: workeffortpartyassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortpartyassignment.FieldID,
			},
		},
	}
	if ps := wepau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wepau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldUpdateTime,
		})
	}
	if value, ok := wepau.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldStringRef,
		})
	}
	if wepau.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortpartyassignment.FieldStringRef,
		})
	}
	if value, ok := wepau.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldFromDate,
		})
	}
	if value, ok := wepau.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldThruDate,
		})
	}
	if wepau.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortpartyassignment.FieldThruDate,
		})
	}
	if value, ok := wepau.mutation.StatusDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldStatusDateTime,
		})
	}
	if wepau.mutation.StatusDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortpartyassignment.FieldStatusDateTime,
		})
	}
	if value, ok := wepau.mutation.ExpectationEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if value, ok := wepau.mutation.AddedExpectationEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if wepau.mutation.ExpectationEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if value, ok := wepau.mutation.DelegateReasonEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if value, ok := wepau.mutation.AddedDelegateReasonEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if wepau.mutation.DelegateReasonEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if value, ok := wepau.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if value, ok := wepau.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if wepau.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if value, ok := wepau.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldComments,
		})
	}
	if wepau.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortpartyassignment.FieldComments,
		})
	}
	if value, ok := wepau.mutation.MustRsvp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffortpartyassignment.FieldMustRsvp,
		})
	}
	if wepau.mutation.MustRsvpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workeffortpartyassignment.FieldMustRsvp,
		})
	}
	if wepau.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.WorkEffortTable,
			Columns: []string{workeffortpartyassignment.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.WorkEffortTable,
			Columns: []string{workeffortpartyassignment.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyTable,
			Columns: []string{workeffortpartyassignment.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyTable,
			Columns: []string{workeffortpartyassignment.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyRoleTable,
			Columns: []string{workeffortpartyassignment.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyRoleTable,
			Columns: []string{workeffortpartyassignment.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.RoleTypeTable,
			Columns: []string{workeffortpartyassignment.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.RoleTypeTable,
			Columns: []string{workeffortpartyassignment.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.AssignedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignedByUserLoginTable,
			Columns: []string{workeffortpartyassignment.AssignedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.AssignedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignedByUserLoginTable,
			Columns: []string{workeffortpartyassignment.AssignedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.AssignmentStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignmentStatusItemTable,
			Columns: []string{workeffortpartyassignment.AssignmentStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.AssignmentStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignmentStatusItemTable,
			Columns: []string{workeffortpartyassignment.AssignmentStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepau.mutation.AvailabilityStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AvailabilityStatusItemTable,
			Columns: []string{workeffortpartyassignment.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepau.mutation.AvailabilityStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AvailabilityStatusItemTable,
			Columns: []string{workeffortpartyassignment.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wepau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortpartyassignment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortPartyAssignmentUpdateOne is the builder for updating a single WorkEffortPartyAssignment entity.
type WorkEffortPartyAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortPartyAssignmentMutation
}

// SetStringRef sets the "string_ref" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetStringRef(s string) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetStringRef(s)
	return wepauo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableStringRef(s *string) *WorkEffortPartyAssignmentUpdateOne {
	if s != nil {
		wepauo.SetStringRef(*s)
	}
	return wepauo
}

// ClearStringRef clears the value of the "string_ref" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearStringRef() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearStringRef()
	return wepauo
}

// SetFromDate sets the "from_date" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetFromDate(t time.Time) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetFromDate(t)
	return wepauo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableFromDate(t *time.Time) *WorkEffortPartyAssignmentUpdateOne {
	if t != nil {
		wepauo.SetFromDate(*t)
	}
	return wepauo
}

// SetThruDate sets the "thru_date" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetThruDate(t time.Time) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetThruDate(t)
	return wepauo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableThruDate(t *time.Time) *WorkEffortPartyAssignmentUpdateOne {
	if t != nil {
		wepauo.SetThruDate(*t)
	}
	return wepauo
}

// ClearThruDate clears the value of the "thru_date" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearThruDate() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearThruDate()
	return wepauo
}

// SetStatusDateTime sets the "status_date_time" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetStatusDateTime(t time.Time) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetStatusDateTime(t)
	return wepauo
}

// SetNillableStatusDateTime sets the "status_date_time" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableStatusDateTime(t *time.Time) *WorkEffortPartyAssignmentUpdateOne {
	if t != nil {
		wepauo.SetStatusDateTime(*t)
	}
	return wepauo
}

// ClearStatusDateTime clears the value of the "status_date_time" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearStatusDateTime() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearStatusDateTime()
	return wepauo
}

// SetExpectationEnumID sets the "expectation_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetExpectationEnumID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ResetExpectationEnumID()
	wepauo.mutation.SetExpectationEnumID(i)
	return wepauo
}

// SetNillableExpectationEnumID sets the "expectation_enum_id" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableExpectationEnumID(i *int) *WorkEffortPartyAssignmentUpdateOne {
	if i != nil {
		wepauo.SetExpectationEnumID(*i)
	}
	return wepauo
}

// AddExpectationEnumID adds i to the "expectation_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) AddExpectationEnumID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.AddExpectationEnumID(i)
	return wepauo
}

// ClearExpectationEnumID clears the value of the "expectation_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearExpectationEnumID() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearExpectationEnumID()
	return wepauo
}

// SetDelegateReasonEnumID sets the "delegate_reason_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetDelegateReasonEnumID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ResetDelegateReasonEnumID()
	wepauo.mutation.SetDelegateReasonEnumID(i)
	return wepauo
}

// SetNillableDelegateReasonEnumID sets the "delegate_reason_enum_id" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableDelegateReasonEnumID(i *int) *WorkEffortPartyAssignmentUpdateOne {
	if i != nil {
		wepauo.SetDelegateReasonEnumID(*i)
	}
	return wepauo
}

// AddDelegateReasonEnumID adds i to the "delegate_reason_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) AddDelegateReasonEnumID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.AddDelegateReasonEnumID(i)
	return wepauo
}

// ClearDelegateReasonEnumID clears the value of the "delegate_reason_enum_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearDelegateReasonEnumID() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearDelegateReasonEnumID()
	return wepauo
}

// SetFacilityID sets the "facility_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetFacilityID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ResetFacilityID()
	wepauo.mutation.SetFacilityID(i)
	return wepauo
}

// SetNillableFacilityID sets the "facility_id" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableFacilityID(i *int) *WorkEffortPartyAssignmentUpdateOne {
	if i != nil {
		wepauo.SetFacilityID(*i)
	}
	return wepauo
}

// AddFacilityID adds i to the "facility_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) AddFacilityID(i int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.AddFacilityID(i)
	return wepauo
}

// ClearFacilityID clears the value of the "facility_id" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearFacilityID() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearFacilityID()
	return wepauo
}

// SetComments sets the "comments" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetComments(s string) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetComments(s)
	return wepauo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableComments(s *string) *WorkEffortPartyAssignmentUpdateOne {
	if s != nil {
		wepauo.SetComments(*s)
	}
	return wepauo
}

// ClearComments clears the value of the "comments" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearComments() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearComments()
	return wepauo
}

// SetMustRsvp sets the "must_rsvp" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetMustRsvp(wr workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetMustRsvp(wr)
	return wepauo
}

// SetNillableMustRsvp sets the "must_rsvp" field if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableMustRsvp(wr *workeffortpartyassignment.MustRsvp) *WorkEffortPartyAssignmentUpdateOne {
	if wr != nil {
		wepauo.SetMustRsvp(*wr)
	}
	return wepauo
}

// ClearMustRsvp clears the value of the "must_rsvp" field.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearMustRsvp() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearMustRsvp()
	return wepauo
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetWorkEffortID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetWorkEffortID(id)
	return wepauo
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableWorkEffortID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetWorkEffortID(*id)
	}
	return wepauo
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetWorkEffort(w *WorkEffort) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetWorkEffortID(w.ID)
}

// SetPartyID sets the "party" edge to the Party entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetPartyID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetPartyID(id)
	return wepauo
}

// SetNillablePartyID sets the "party" edge to the Party entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillablePartyID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetPartyID(*id)
	}
	return wepauo
}

// SetParty sets the "party" edge to the Party entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetParty(p *Party) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetPartyID(p.ID)
}

// SetPartyRoleID sets the "party_role" edge to the PartyRole entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetPartyRoleID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetPartyRoleID(id)
	return wepauo
}

// SetNillablePartyRoleID sets the "party_role" edge to the PartyRole entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillablePartyRoleID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetPartyRoleID(*id)
	}
	return wepauo
}

// SetPartyRole sets the "party_role" edge to the PartyRole entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetPartyRole(p *PartyRole) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetPartyRoleID(p.ID)
}

// SetRoleTypeID sets the "role_type" edge to the RoleType entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetRoleTypeID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetRoleTypeID(id)
	return wepauo
}

// SetNillableRoleTypeID sets the "role_type" edge to the RoleType entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableRoleTypeID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetRoleTypeID(*id)
	}
	return wepauo
}

// SetRoleType sets the "role_type" edge to the RoleType entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetRoleType(r *RoleType) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetRoleTypeID(r.ID)
}

// SetAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAssignedByUserLoginID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetAssignedByUserLoginID(id)
	return wepauo
}

// SetNillableAssignedByUserLoginID sets the "assigned_by_user_login" edge to the UserLogin entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableAssignedByUserLoginID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetAssignedByUserLoginID(*id)
	}
	return wepauo
}

// SetAssignedByUserLogin sets the "assigned_by_user_login" edge to the UserLogin entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAssignedByUserLogin(u *UserLogin) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetAssignedByUserLoginID(u.ID)
}

// SetAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAssignmentStatusItemID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetAssignmentStatusItemID(id)
	return wepauo
}

// SetNillableAssignmentStatusItemID sets the "assignment_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableAssignmentStatusItemID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetAssignmentStatusItemID(*id)
	}
	return wepauo
}

// SetAssignmentStatusItem sets the "assignment_status_item" edge to the StatusItem entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAssignmentStatusItem(s *StatusItem) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetAssignmentStatusItemID(s.ID)
}

// SetAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAvailabilityStatusItemID(id int) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.SetAvailabilityStatusItemID(id)
	return wepauo
}

// SetNillableAvailabilityStatusItemID sets the "availability_status_item" edge to the StatusItem entity by ID if the given value is not nil.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetNillableAvailabilityStatusItemID(id *int) *WorkEffortPartyAssignmentUpdateOne {
	if id != nil {
		wepauo = wepauo.SetAvailabilityStatusItemID(*id)
	}
	return wepauo
}

// SetAvailabilityStatusItem sets the "availability_status_item" edge to the StatusItem entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SetAvailabilityStatusItem(s *StatusItem) *WorkEffortPartyAssignmentUpdateOne {
	return wepauo.SetAvailabilityStatusItemID(s.ID)
}

// Mutation returns the WorkEffortPartyAssignmentMutation object of the builder.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) Mutation() *WorkEffortPartyAssignmentMutation {
	return wepauo.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearWorkEffort() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearWorkEffort()
	return wepauo
}

// ClearParty clears the "party" edge to the Party entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearParty() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearParty()
	return wepauo
}

// ClearPartyRole clears the "party_role" edge to the PartyRole entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearPartyRole() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearPartyRole()
	return wepauo
}

// ClearRoleType clears the "role_type" edge to the RoleType entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearRoleType() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearRoleType()
	return wepauo
}

// ClearAssignedByUserLogin clears the "assigned_by_user_login" edge to the UserLogin entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearAssignedByUserLogin() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearAssignedByUserLogin()
	return wepauo
}

// ClearAssignmentStatusItem clears the "assignment_status_item" edge to the StatusItem entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearAssignmentStatusItem() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearAssignmentStatusItem()
	return wepauo
}

// ClearAvailabilityStatusItem clears the "availability_status_item" edge to the StatusItem entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ClearAvailabilityStatusItem() *WorkEffortPartyAssignmentUpdateOne {
	wepauo.mutation.ClearAvailabilityStatusItem()
	return wepauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) Select(field string, fields ...string) *WorkEffortPartyAssignmentUpdateOne {
	wepauo.fields = append([]string{field}, fields...)
	return wepauo
}

// Save executes the query and returns the updated WorkEffortPartyAssignment entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) Save(ctx context.Context) (*WorkEffortPartyAssignment, error) {
	var (
		err  error
		node *WorkEffortPartyAssignment
	)
	wepauo.defaults()
	if len(wepauo.hooks) == 0 {
		if err = wepauo.check(); err != nil {
			return nil, err
		}
		node, err = wepauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortPartyAssignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wepauo.check(); err != nil {
				return nil, err
			}
			wepauo.mutation = mutation
			node, err = wepauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wepauo.hooks) - 1; i >= 0; i-- {
			mut = wepauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wepauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) SaveX(ctx context.Context) *WorkEffortPartyAssignment {
	node, err := wepauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := wepauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := wepauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) defaults() {
	if _, ok := wepauo.mutation.UpdateTime(); !ok {
		v := workeffortpartyassignment.UpdateDefaultUpdateTime()
		wepauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wepauo *WorkEffortPartyAssignmentUpdateOne) check() error {
	if v, ok := wepauo.mutation.MustRsvp(); ok {
		if err := workeffortpartyassignment.MustRsvpValidator(v); err != nil {
			return &ValidationError{Name: "must_rsvp", err: fmt.Errorf("ent: validator failed for field \"must_rsvp\": %w", err)}
		}
	}
	return nil
}

func (wepauo *WorkEffortPartyAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffortPartyAssignment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortpartyassignment.Table,
			Columns: workeffortpartyassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortpartyassignment.FieldID,
			},
		},
	}
	id, ok := wepauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffortPartyAssignment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wepauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortpartyassignment.FieldID)
		for _, f := range fields {
			if !workeffortpartyassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workeffortpartyassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wepauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wepauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldUpdateTime,
		})
	}
	if value, ok := wepauo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldStringRef,
		})
	}
	if wepauo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortpartyassignment.FieldStringRef,
		})
	}
	if value, ok := wepauo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldFromDate,
		})
	}
	if value, ok := wepauo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldThruDate,
		})
	}
	if wepauo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortpartyassignment.FieldThruDate,
		})
	}
	if value, ok := wepauo.mutation.StatusDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortpartyassignment.FieldStatusDateTime,
		})
	}
	if wepauo.mutation.StatusDateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workeffortpartyassignment.FieldStatusDateTime,
		})
	}
	if value, ok := wepauo.mutation.ExpectationEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if value, ok := wepauo.mutation.AddedExpectationEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if wepauo.mutation.ExpectationEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldExpectationEnumID,
		})
	}
	if value, ok := wepauo.mutation.DelegateReasonEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if value, ok := wepauo.mutation.AddedDelegateReasonEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if wepauo.mutation.DelegateReasonEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldDelegateReasonEnumID,
		})
	}
	if value, ok := wepauo.mutation.FacilityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if value, ok := wepauo.mutation.AddedFacilityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if wepauo.mutation.FacilityIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workeffortpartyassignment.FieldFacilityID,
		})
	}
	if value, ok := wepauo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortpartyassignment.FieldComments,
		})
	}
	if wepauo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortpartyassignment.FieldComments,
		})
	}
	if value, ok := wepauo.mutation.MustRsvp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workeffortpartyassignment.FieldMustRsvp,
		})
	}
	if wepauo.mutation.MustRsvpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workeffortpartyassignment.FieldMustRsvp,
		})
	}
	if wepauo.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.WorkEffortTable,
			Columns: []string{workeffortpartyassignment.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.WorkEffortTable,
			Columns: []string{workeffortpartyassignment.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyTable,
			Columns: []string{workeffortpartyassignment.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyTable,
			Columns: []string{workeffortpartyassignment.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: party.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.PartyRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyRoleTable,
			Columns: []string{workeffortpartyassignment.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.PartyRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.PartyRoleTable,
			Columns: []string{workeffortpartyassignment.PartyRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: partyrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.RoleTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.RoleTypeTable,
			Columns: []string{workeffortpartyassignment.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.RoleTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.RoleTypeTable,
			Columns: []string{workeffortpartyassignment.RoleTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.AssignedByUserLoginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignedByUserLoginTable,
			Columns: []string{workeffortpartyassignment.AssignedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.AssignedByUserLoginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignedByUserLoginTable,
			Columns: []string{workeffortpartyassignment.AssignedByUserLoginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlogin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.AssignmentStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignmentStatusItemTable,
			Columns: []string{workeffortpartyassignment.AssignmentStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.AssignmentStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AssignmentStatusItemTable,
			Columns: []string{workeffortpartyassignment.AssignmentStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wepauo.mutation.AvailabilityStatusItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AvailabilityStatusItemTable,
			Columns: []string{workeffortpartyassignment.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wepauo.mutation.AvailabilityStatusItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortpartyassignment.AvailabilityStatusItemTable,
			Columns: []string{workeffortpartyassignment.AvailabilityStatusItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffortPartyAssignment{config: wepauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wepauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortpartyassignment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
