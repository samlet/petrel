// Code generated by entc, DO NOT EDIT.

package workeffortskillstandard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StringRef applies equality check predicate on the "string_ref" field. It's identical to StringRefEQ.
func StringRef(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// EstimatedNumPeople applies equality check predicate on the "estimated_num_people" field. It's identical to EstimatedNumPeopleEQ.
func EstimatedNumPeople(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedDuration applies equality check predicate on the "estimated_duration" field. It's identical to EstimatedDurationEQ.
func EstimatedDuration(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedCost applies equality check predicate on the "estimated_cost" field. It's identical to EstimatedCostEQ.
func EstimatedCost(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCost), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StringRefEQ applies the EQ predicate on the "string_ref" field.
func StringRefEQ(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringRef), v))
	})
}

// StringRefNEQ applies the NEQ predicate on the "string_ref" field.
func StringRefNEQ(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringRef), v))
	})
}

// StringRefIn applies the In predicate on the "string_ref" field.
func StringRefIn(vs ...string) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringRef), v...))
	})
}

// StringRefNotIn applies the NotIn predicate on the "string_ref" field.
func StringRefNotIn(vs ...string) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringRef), v...))
	})
}

// StringRefGT applies the GT predicate on the "string_ref" field.
func StringRefGT(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringRef), v))
	})
}

// StringRefGTE applies the GTE predicate on the "string_ref" field.
func StringRefGTE(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringRef), v))
	})
}

// StringRefLT applies the LT predicate on the "string_ref" field.
func StringRefLT(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringRef), v))
	})
}

// StringRefLTE applies the LTE predicate on the "string_ref" field.
func StringRefLTE(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringRef), v))
	})
}

// StringRefContains applies the Contains predicate on the "string_ref" field.
func StringRefContains(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringRef), v))
	})
}

// StringRefHasPrefix applies the HasPrefix predicate on the "string_ref" field.
func StringRefHasPrefix(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringRef), v))
	})
}

// StringRefHasSuffix applies the HasSuffix predicate on the "string_ref" field.
func StringRefHasSuffix(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringRef), v))
	})
}

// StringRefIsNil applies the IsNil predicate on the "string_ref" field.
func StringRefIsNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStringRef)))
	})
}

// StringRefNotNil applies the NotNil predicate on the "string_ref" field.
func StringRefNotNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStringRef)))
	})
}

// StringRefEqualFold applies the EqualFold predicate on the "string_ref" field.
func StringRefEqualFold(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringRef), v))
	})
}

// StringRefContainsFold applies the ContainsFold predicate on the "string_ref" field.
func StringRefContainsFold(v string) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringRef), v))
	})
}

// EstimatedNumPeopleEQ applies the EQ predicate on the "estimated_num_people" field.
func EstimatedNumPeopleEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleNEQ applies the NEQ predicate on the "estimated_num_people" field.
func EstimatedNumPeopleNEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleIn applies the In predicate on the "estimated_num_people" field.
func EstimatedNumPeopleIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedNumPeople), v...))
	})
}

// EstimatedNumPeopleNotIn applies the NotIn predicate on the "estimated_num_people" field.
func EstimatedNumPeopleNotIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedNumPeople), v...))
	})
}

// EstimatedNumPeopleGT applies the GT predicate on the "estimated_num_people" field.
func EstimatedNumPeopleGT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleGTE applies the GTE predicate on the "estimated_num_people" field.
func EstimatedNumPeopleGTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleLT applies the LT predicate on the "estimated_num_people" field.
func EstimatedNumPeopleLT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleLTE applies the LTE predicate on the "estimated_num_people" field.
func EstimatedNumPeopleLTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedNumPeople), v))
	})
}

// EstimatedNumPeopleIsNil applies the IsNil predicate on the "estimated_num_people" field.
func EstimatedNumPeopleIsNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedNumPeople)))
	})
}

// EstimatedNumPeopleNotNil applies the NotNil predicate on the "estimated_num_people" field.
func EstimatedNumPeopleNotNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedNumPeople)))
	})
}

// EstimatedDurationEQ applies the EQ predicate on the "estimated_duration" field.
func EstimatedDurationEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationNEQ applies the NEQ predicate on the "estimated_duration" field.
func EstimatedDurationNEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationIn applies the In predicate on the "estimated_duration" field.
func EstimatedDurationIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedDuration), v...))
	})
}

// EstimatedDurationNotIn applies the NotIn predicate on the "estimated_duration" field.
func EstimatedDurationNotIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedDuration), v...))
	})
}

// EstimatedDurationGT applies the GT predicate on the "estimated_duration" field.
func EstimatedDurationGT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationGTE applies the GTE predicate on the "estimated_duration" field.
func EstimatedDurationGTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationLT applies the LT predicate on the "estimated_duration" field.
func EstimatedDurationLT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationLTE applies the LTE predicate on the "estimated_duration" field.
func EstimatedDurationLTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedDuration), v))
	})
}

// EstimatedDurationIsNil applies the IsNil predicate on the "estimated_duration" field.
func EstimatedDurationIsNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedDuration)))
	})
}

// EstimatedDurationNotNil applies the NotNil predicate on the "estimated_duration" field.
func EstimatedDurationNotNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedDuration)))
	})
}

// EstimatedCostEQ applies the EQ predicate on the "estimated_cost" field.
func EstimatedCostEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostNEQ applies the NEQ predicate on the "estimated_cost" field.
func EstimatedCostNEQ(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostIn applies the In predicate on the "estimated_cost" field.
func EstimatedCostIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEstimatedCost), v...))
	})
}

// EstimatedCostNotIn applies the NotIn predicate on the "estimated_cost" field.
func EstimatedCostNotIn(vs ...float64) predicate.WorkEffortSkillStandard {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEstimatedCost), v...))
	})
}

// EstimatedCostGT applies the GT predicate on the "estimated_cost" field.
func EstimatedCostGT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostGTE applies the GTE predicate on the "estimated_cost" field.
func EstimatedCostGTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostLT applies the LT predicate on the "estimated_cost" field.
func EstimatedCostLT(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostLTE applies the LTE predicate on the "estimated_cost" field.
func EstimatedCostLTE(v float64) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEstimatedCost), v))
	})
}

// EstimatedCostIsNil applies the IsNil predicate on the "estimated_cost" field.
func EstimatedCostIsNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEstimatedCost)))
	})
}

// EstimatedCostNotNil applies the NotNil predicate on the "estimated_cost" field.
func EstimatedCostNotNil() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEstimatedCost)))
	})
}

// HasWorkEffort applies the HasEdge predicate on the "work_effort" edge.
func HasWorkEffort() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTable, WorkEffortColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkEffortWith applies the HasEdge predicate on the "work_effort" edge with a given conditions (other predicates).
func HasWorkEffortWith(preds ...predicate.WorkEffort) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkEffortInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkEffortTable, WorkEffortColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkillType applies the HasEdge predicate on the "skill_type" edge.
func HasSkillType() predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkillTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SkillTypeTable, SkillTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillTypeWith applies the HasEdge predicate on the "skill_type" edge with a given conditions (other predicates).
func HasSkillTypeWith(preds ...predicate.SkillType) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SkillTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SkillTypeTable, SkillTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkEffortSkillStandard) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkEffortSkillStandard) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkEffortSkillStandard) predicate.WorkEffortSkillStandard {
	return predicate.WorkEffortSkillStandard(func(s *sql.Selector) {
		p(s.Not())
	})
}
