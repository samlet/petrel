// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/skilltype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortskillstandard"
)

// WorkEffortSkillStandardCreate is the builder for creating a WorkEffortSkillStandard entity.
type WorkEffortSkillStandardCreate struct {
	config
	mutation *WorkEffortSkillStandardMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wessc *WorkEffortSkillStandardCreate) SetCreateTime(t time.Time) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetCreateTime(t)
	return wessc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableCreateTime(t *time.Time) *WorkEffortSkillStandardCreate {
	if t != nil {
		wessc.SetCreateTime(*t)
	}
	return wessc
}

// SetUpdateTime sets the "update_time" field.
func (wessc *WorkEffortSkillStandardCreate) SetUpdateTime(t time.Time) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetUpdateTime(t)
	return wessc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableUpdateTime(t *time.Time) *WorkEffortSkillStandardCreate {
	if t != nil {
		wessc.SetUpdateTime(*t)
	}
	return wessc
}

// SetStringRef sets the "string_ref" field.
func (wessc *WorkEffortSkillStandardCreate) SetStringRef(s string) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetStringRef(s)
	return wessc
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableStringRef(s *string) *WorkEffortSkillStandardCreate {
	if s != nil {
		wessc.SetStringRef(*s)
	}
	return wessc
}

// SetEstimatedNumPeople sets the "estimated_num_people" field.
func (wessc *WorkEffortSkillStandardCreate) SetEstimatedNumPeople(f float64) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetEstimatedNumPeople(f)
	return wessc
}

// SetNillableEstimatedNumPeople sets the "estimated_num_people" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableEstimatedNumPeople(f *float64) *WorkEffortSkillStandardCreate {
	if f != nil {
		wessc.SetEstimatedNumPeople(*f)
	}
	return wessc
}

// SetEstimatedDuration sets the "estimated_duration" field.
func (wessc *WorkEffortSkillStandardCreate) SetEstimatedDuration(f float64) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetEstimatedDuration(f)
	return wessc
}

// SetNillableEstimatedDuration sets the "estimated_duration" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableEstimatedDuration(f *float64) *WorkEffortSkillStandardCreate {
	if f != nil {
		wessc.SetEstimatedDuration(*f)
	}
	return wessc
}

// SetEstimatedCost sets the "estimated_cost" field.
func (wessc *WorkEffortSkillStandardCreate) SetEstimatedCost(f float64) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetEstimatedCost(f)
	return wessc
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableEstimatedCost(f *float64) *WorkEffortSkillStandardCreate {
	if f != nil {
		wessc.SetEstimatedCost(*f)
	}
	return wessc
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wessc *WorkEffortSkillStandardCreate) SetWorkEffortID(id int) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetWorkEffortID(id)
	return wessc
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableWorkEffortID(id *int) *WorkEffortSkillStandardCreate {
	if id != nil {
		wessc = wessc.SetWorkEffortID(*id)
	}
	return wessc
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wessc *WorkEffortSkillStandardCreate) SetWorkEffort(w *WorkEffort) *WorkEffortSkillStandardCreate {
	return wessc.SetWorkEffortID(w.ID)
}

// SetSkillTypeID sets the "skill_type" edge to the SkillType entity by ID.
func (wessc *WorkEffortSkillStandardCreate) SetSkillTypeID(id int) *WorkEffortSkillStandardCreate {
	wessc.mutation.SetSkillTypeID(id)
	return wessc
}

// SetNillableSkillTypeID sets the "skill_type" edge to the SkillType entity by ID if the given value is not nil.
func (wessc *WorkEffortSkillStandardCreate) SetNillableSkillTypeID(id *int) *WorkEffortSkillStandardCreate {
	if id != nil {
		wessc = wessc.SetSkillTypeID(*id)
	}
	return wessc
}

// SetSkillType sets the "skill_type" edge to the SkillType entity.
func (wessc *WorkEffortSkillStandardCreate) SetSkillType(s *SkillType) *WorkEffortSkillStandardCreate {
	return wessc.SetSkillTypeID(s.ID)
}

// Mutation returns the WorkEffortSkillStandardMutation object of the builder.
func (wessc *WorkEffortSkillStandardCreate) Mutation() *WorkEffortSkillStandardMutation {
	return wessc.mutation
}

// Save creates the WorkEffortSkillStandard in the database.
func (wessc *WorkEffortSkillStandardCreate) Save(ctx context.Context) (*WorkEffortSkillStandard, error) {
	var (
		err  error
		node *WorkEffortSkillStandard
	)
	wessc.defaults()
	if len(wessc.hooks) == 0 {
		if err = wessc.check(); err != nil {
			return nil, err
		}
		node, err = wessc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortSkillStandardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wessc.check(); err != nil {
				return nil, err
			}
			wessc.mutation = mutation
			if node, err = wessc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wessc.hooks) - 1; i >= 0; i-- {
			mut = wessc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wessc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wessc *WorkEffortSkillStandardCreate) SaveX(ctx context.Context) *WorkEffortSkillStandard {
	v, err := wessc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wessc *WorkEffortSkillStandardCreate) defaults() {
	if _, ok := wessc.mutation.CreateTime(); !ok {
		v := workeffortskillstandard.DefaultCreateTime()
		wessc.mutation.SetCreateTime(v)
	}
	if _, ok := wessc.mutation.UpdateTime(); !ok {
		v := workeffortskillstandard.DefaultUpdateTime()
		wessc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wessc *WorkEffortSkillStandardCreate) check() error {
	if _, ok := wessc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wessc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (wessc *WorkEffortSkillStandardCreate) sqlSave(ctx context.Context) (*WorkEffortSkillStandard, error) {
	_node, _spec := wessc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wessc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wessc *WorkEffortSkillStandardCreate) createSpec() (*WorkEffortSkillStandard, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkEffortSkillStandard{config: wessc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workeffortskillstandard.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortskillstandard.FieldID,
			},
		}
	)
	if value, ok := wessc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortskillstandard.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wessc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortskillstandard.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wessc.mutation.StringRef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortskillstandard.FieldStringRef,
		})
		_node.StringRef = value
	}
	if value, ok := wessc.mutation.EstimatedNumPeople(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
		_node.EstimatedNumPeople = value
	}
	if value, ok := wessc.mutation.EstimatedDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
		_node.EstimatedDuration = value
	}
	if value, ok := wessc.mutation.EstimatedCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
		_node.EstimatedCost = value
	}
	if nodes := wessc.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.WorkEffortTable,
			Columns: []string{workeffortskillstandard.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.work_effort_work_effort_skill_standards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wessc.mutation.SkillTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.SkillTypeTable,
			Columns: []string{workeffortskillstandard.SkillTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skilltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.skill_type_work_effort_skill_standards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkEffortSkillStandardCreateBulk is the builder for creating many WorkEffortSkillStandard entities in bulk.
type WorkEffortSkillStandardCreateBulk struct {
	config
	builders []*WorkEffortSkillStandardCreate
}

// Save creates the WorkEffortSkillStandard entities in the database.
func (wesscb *WorkEffortSkillStandardCreateBulk) Save(ctx context.Context) ([]*WorkEffortSkillStandard, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wesscb.builders))
	nodes := make([]*WorkEffortSkillStandard, len(wesscb.builders))
	mutators := make([]Mutator, len(wesscb.builders))
	for i := range wesscb.builders {
		func(i int, root context.Context) {
			builder := wesscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkEffortSkillStandardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wesscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wesscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wesscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wesscb *WorkEffortSkillStandardCreateBulk) SaveX(ctx context.Context) []*WorkEffortSkillStandard {
	v, err := wesscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
