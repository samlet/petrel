// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/skilltype"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffortskillstandard"
)

// WorkEffortSkillStandardUpdate is the builder for updating WorkEffortSkillStandard entities.
type WorkEffortSkillStandardUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortSkillStandardMutation
}

// Where adds a new predicate for the WorkEffortSkillStandardUpdate builder.
func (wessu *WorkEffortSkillStandardUpdate) Where(ps ...predicate.WorkEffortSkillStandard) *WorkEffortSkillStandardUpdate {
	wessu.mutation.predicates = append(wessu.mutation.predicates, ps...)
	return wessu
}

// SetStringRef sets the "string_ref" field.
func (wessu *WorkEffortSkillStandardUpdate) SetStringRef(s string) *WorkEffortSkillStandardUpdate {
	wessu.mutation.SetStringRef(s)
	return wessu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableStringRef(s *string) *WorkEffortSkillStandardUpdate {
	if s != nil {
		wessu.SetStringRef(*s)
	}
	return wessu
}

// ClearStringRef clears the value of the "string_ref" field.
func (wessu *WorkEffortSkillStandardUpdate) ClearStringRef() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearStringRef()
	return wessu
}

// SetEstimatedNumPeople sets the "estimated_num_people" field.
func (wessu *WorkEffortSkillStandardUpdate) SetEstimatedNumPeople(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.ResetEstimatedNumPeople()
	wessu.mutation.SetEstimatedNumPeople(f)
	return wessu
}

// SetNillableEstimatedNumPeople sets the "estimated_num_people" field if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableEstimatedNumPeople(f *float64) *WorkEffortSkillStandardUpdate {
	if f != nil {
		wessu.SetEstimatedNumPeople(*f)
	}
	return wessu
}

// AddEstimatedNumPeople adds f to the "estimated_num_people" field.
func (wessu *WorkEffortSkillStandardUpdate) AddEstimatedNumPeople(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.AddEstimatedNumPeople(f)
	return wessu
}

// ClearEstimatedNumPeople clears the value of the "estimated_num_people" field.
func (wessu *WorkEffortSkillStandardUpdate) ClearEstimatedNumPeople() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearEstimatedNumPeople()
	return wessu
}

// SetEstimatedDuration sets the "estimated_duration" field.
func (wessu *WorkEffortSkillStandardUpdate) SetEstimatedDuration(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.ResetEstimatedDuration()
	wessu.mutation.SetEstimatedDuration(f)
	return wessu
}

// SetNillableEstimatedDuration sets the "estimated_duration" field if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableEstimatedDuration(f *float64) *WorkEffortSkillStandardUpdate {
	if f != nil {
		wessu.SetEstimatedDuration(*f)
	}
	return wessu
}

// AddEstimatedDuration adds f to the "estimated_duration" field.
func (wessu *WorkEffortSkillStandardUpdate) AddEstimatedDuration(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.AddEstimatedDuration(f)
	return wessu
}

// ClearEstimatedDuration clears the value of the "estimated_duration" field.
func (wessu *WorkEffortSkillStandardUpdate) ClearEstimatedDuration() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearEstimatedDuration()
	return wessu
}

// SetEstimatedCost sets the "estimated_cost" field.
func (wessu *WorkEffortSkillStandardUpdate) SetEstimatedCost(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.ResetEstimatedCost()
	wessu.mutation.SetEstimatedCost(f)
	return wessu
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableEstimatedCost(f *float64) *WorkEffortSkillStandardUpdate {
	if f != nil {
		wessu.SetEstimatedCost(*f)
	}
	return wessu
}

// AddEstimatedCost adds f to the "estimated_cost" field.
func (wessu *WorkEffortSkillStandardUpdate) AddEstimatedCost(f float64) *WorkEffortSkillStandardUpdate {
	wessu.mutation.AddEstimatedCost(f)
	return wessu
}

// ClearEstimatedCost clears the value of the "estimated_cost" field.
func (wessu *WorkEffortSkillStandardUpdate) ClearEstimatedCost() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearEstimatedCost()
	return wessu
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wessu *WorkEffortSkillStandardUpdate) SetWorkEffortID(id int) *WorkEffortSkillStandardUpdate {
	wessu.mutation.SetWorkEffortID(id)
	return wessu
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableWorkEffortID(id *int) *WorkEffortSkillStandardUpdate {
	if id != nil {
		wessu = wessu.SetWorkEffortID(*id)
	}
	return wessu
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wessu *WorkEffortSkillStandardUpdate) SetWorkEffort(w *WorkEffort) *WorkEffortSkillStandardUpdate {
	return wessu.SetWorkEffortID(w.ID)
}

// SetSkillTypeID sets the "skill_type" edge to the SkillType entity by ID.
func (wessu *WorkEffortSkillStandardUpdate) SetSkillTypeID(id int) *WorkEffortSkillStandardUpdate {
	wessu.mutation.SetSkillTypeID(id)
	return wessu
}

// SetNillableSkillTypeID sets the "skill_type" edge to the SkillType entity by ID if the given value is not nil.
func (wessu *WorkEffortSkillStandardUpdate) SetNillableSkillTypeID(id *int) *WorkEffortSkillStandardUpdate {
	if id != nil {
		wessu = wessu.SetSkillTypeID(*id)
	}
	return wessu
}

// SetSkillType sets the "skill_type" edge to the SkillType entity.
func (wessu *WorkEffortSkillStandardUpdate) SetSkillType(s *SkillType) *WorkEffortSkillStandardUpdate {
	return wessu.SetSkillTypeID(s.ID)
}

// Mutation returns the WorkEffortSkillStandardMutation object of the builder.
func (wessu *WorkEffortSkillStandardUpdate) Mutation() *WorkEffortSkillStandardMutation {
	return wessu.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wessu *WorkEffortSkillStandardUpdate) ClearWorkEffort() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearWorkEffort()
	return wessu
}

// ClearSkillType clears the "skill_type" edge to the SkillType entity.
func (wessu *WorkEffortSkillStandardUpdate) ClearSkillType() *WorkEffortSkillStandardUpdate {
	wessu.mutation.ClearSkillType()
	return wessu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wessu *WorkEffortSkillStandardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wessu.defaults()
	if len(wessu.hooks) == 0 {
		affected, err = wessu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortSkillStandardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wessu.mutation = mutation
			affected, err = wessu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wessu.hooks) - 1; i >= 0; i-- {
			mut = wessu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wessu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wessu *WorkEffortSkillStandardUpdate) SaveX(ctx context.Context) int {
	affected, err := wessu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wessu *WorkEffortSkillStandardUpdate) Exec(ctx context.Context) error {
	_, err := wessu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wessu *WorkEffortSkillStandardUpdate) ExecX(ctx context.Context) {
	if err := wessu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wessu *WorkEffortSkillStandardUpdate) defaults() {
	if _, ok := wessu.mutation.UpdateTime(); !ok {
		v := workeffortskillstandard.UpdateDefaultUpdateTime()
		wessu.mutation.SetUpdateTime(v)
	}
}

func (wessu *WorkEffortSkillStandardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortskillstandard.Table,
			Columns: workeffortskillstandard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortskillstandard.FieldID,
			},
		},
	}
	if ps := wessu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wessu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortskillstandard.FieldUpdateTime,
		})
	}
	if value, ok := wessu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortskillstandard.FieldStringRef,
		})
	}
	if wessu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortskillstandard.FieldStringRef,
		})
	}
	if value, ok := wessu.mutation.EstimatedNumPeople(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if value, ok := wessu.mutation.AddedEstimatedNumPeople(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if wessu.mutation.EstimatedNumPeopleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if value, ok := wessu.mutation.EstimatedDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if value, ok := wessu.mutation.AddedEstimatedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if wessu.mutation.EstimatedDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if value, ok := wessu.mutation.EstimatedCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if value, ok := wessu.mutation.AddedEstimatedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if wessu.mutation.EstimatedCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if wessu.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.WorkEffortTable,
			Columns: []string{workeffortskillstandard.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wessu.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.WorkEffortTable,
			Columns: []string{workeffortskillstandard.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wessu.mutation.SkillTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.SkillTypeTable,
			Columns: []string{workeffortskillstandard.SkillTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skilltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wessu.mutation.SkillTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.SkillTypeTable,
			Columns: []string{workeffortskillstandard.SkillTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skilltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wessu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortskillstandard.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortSkillStandardUpdateOne is the builder for updating a single WorkEffortSkillStandard entity.
type WorkEffortSkillStandardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortSkillStandardMutation
}

// SetStringRef sets the "string_ref" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetStringRef(s string) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.SetStringRef(s)
	return wessuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableStringRef(s *string) *WorkEffortSkillStandardUpdateOne {
	if s != nil {
		wessuo.SetStringRef(*s)
	}
	return wessuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearStringRef() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearStringRef()
	return wessuo
}

// SetEstimatedNumPeople sets the "estimated_num_people" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetEstimatedNumPeople(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ResetEstimatedNumPeople()
	wessuo.mutation.SetEstimatedNumPeople(f)
	return wessuo
}

// SetNillableEstimatedNumPeople sets the "estimated_num_people" field if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableEstimatedNumPeople(f *float64) *WorkEffortSkillStandardUpdateOne {
	if f != nil {
		wessuo.SetEstimatedNumPeople(*f)
	}
	return wessuo
}

// AddEstimatedNumPeople adds f to the "estimated_num_people" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) AddEstimatedNumPeople(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.AddEstimatedNumPeople(f)
	return wessuo
}

// ClearEstimatedNumPeople clears the value of the "estimated_num_people" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearEstimatedNumPeople() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearEstimatedNumPeople()
	return wessuo
}

// SetEstimatedDuration sets the "estimated_duration" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetEstimatedDuration(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ResetEstimatedDuration()
	wessuo.mutation.SetEstimatedDuration(f)
	return wessuo
}

// SetNillableEstimatedDuration sets the "estimated_duration" field if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableEstimatedDuration(f *float64) *WorkEffortSkillStandardUpdateOne {
	if f != nil {
		wessuo.SetEstimatedDuration(*f)
	}
	return wessuo
}

// AddEstimatedDuration adds f to the "estimated_duration" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) AddEstimatedDuration(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.AddEstimatedDuration(f)
	return wessuo
}

// ClearEstimatedDuration clears the value of the "estimated_duration" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearEstimatedDuration() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearEstimatedDuration()
	return wessuo
}

// SetEstimatedCost sets the "estimated_cost" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetEstimatedCost(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ResetEstimatedCost()
	wessuo.mutation.SetEstimatedCost(f)
	return wessuo
}

// SetNillableEstimatedCost sets the "estimated_cost" field if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableEstimatedCost(f *float64) *WorkEffortSkillStandardUpdateOne {
	if f != nil {
		wessuo.SetEstimatedCost(*f)
	}
	return wessuo
}

// AddEstimatedCost adds f to the "estimated_cost" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) AddEstimatedCost(f float64) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.AddEstimatedCost(f)
	return wessuo
}

// ClearEstimatedCost clears the value of the "estimated_cost" field.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearEstimatedCost() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearEstimatedCost()
	return wessuo
}

// SetWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetWorkEffortID(id int) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.SetWorkEffortID(id)
	return wessuo
}

// SetNillableWorkEffortID sets the "work_effort" edge to the WorkEffort entity by ID if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableWorkEffortID(id *int) *WorkEffortSkillStandardUpdateOne {
	if id != nil {
		wessuo = wessuo.SetWorkEffortID(*id)
	}
	return wessuo
}

// SetWorkEffort sets the "work_effort" edge to the WorkEffort entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetWorkEffort(w *WorkEffort) *WorkEffortSkillStandardUpdateOne {
	return wessuo.SetWorkEffortID(w.ID)
}

// SetSkillTypeID sets the "skill_type" edge to the SkillType entity by ID.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetSkillTypeID(id int) *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.SetSkillTypeID(id)
	return wessuo
}

// SetNillableSkillTypeID sets the "skill_type" edge to the SkillType entity by ID if the given value is not nil.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetNillableSkillTypeID(id *int) *WorkEffortSkillStandardUpdateOne {
	if id != nil {
		wessuo = wessuo.SetSkillTypeID(*id)
	}
	return wessuo
}

// SetSkillType sets the "skill_type" edge to the SkillType entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) SetSkillType(s *SkillType) *WorkEffortSkillStandardUpdateOne {
	return wessuo.SetSkillTypeID(s.ID)
}

// Mutation returns the WorkEffortSkillStandardMutation object of the builder.
func (wessuo *WorkEffortSkillStandardUpdateOne) Mutation() *WorkEffortSkillStandardMutation {
	return wessuo.mutation
}

// ClearWorkEffort clears the "work_effort" edge to the WorkEffort entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearWorkEffort() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearWorkEffort()
	return wessuo
}

// ClearSkillType clears the "skill_type" edge to the SkillType entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) ClearSkillType() *WorkEffortSkillStandardUpdateOne {
	wessuo.mutation.ClearSkillType()
	return wessuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wessuo *WorkEffortSkillStandardUpdateOne) Select(field string, fields ...string) *WorkEffortSkillStandardUpdateOne {
	wessuo.fields = append([]string{field}, fields...)
	return wessuo
}

// Save executes the query and returns the updated WorkEffortSkillStandard entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) Save(ctx context.Context) (*WorkEffortSkillStandard, error) {
	var (
		err  error
		node *WorkEffortSkillStandard
	)
	wessuo.defaults()
	if len(wessuo.hooks) == 0 {
		node, err = wessuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortSkillStandardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wessuo.mutation = mutation
			node, err = wessuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wessuo.hooks) - 1; i >= 0; i-- {
			mut = wessuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wessuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wessuo *WorkEffortSkillStandardUpdateOne) SaveX(ctx context.Context) *WorkEffortSkillStandard {
	node, err := wessuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wessuo *WorkEffortSkillStandardUpdateOne) Exec(ctx context.Context) error {
	_, err := wessuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wessuo *WorkEffortSkillStandardUpdateOne) ExecX(ctx context.Context) {
	if err := wessuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wessuo *WorkEffortSkillStandardUpdateOne) defaults() {
	if _, ok := wessuo.mutation.UpdateTime(); !ok {
		v := workeffortskillstandard.UpdateDefaultUpdateTime()
		wessuo.mutation.SetUpdateTime(v)
	}
}

func (wessuo *WorkEffortSkillStandardUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffortSkillStandard, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workeffortskillstandard.Table,
			Columns: workeffortskillstandard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workeffortskillstandard.FieldID,
			},
		},
	}
	id, ok := wessuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffortSkillStandard.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wessuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workeffortskillstandard.FieldID)
		for _, f := range fields {
			if !workeffortskillstandard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workeffortskillstandard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wessuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wessuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workeffortskillstandard.FieldUpdateTime,
		})
	}
	if value, ok := wessuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workeffortskillstandard.FieldStringRef,
		})
	}
	if wessuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workeffortskillstandard.FieldStringRef,
		})
	}
	if value, ok := wessuo.mutation.EstimatedNumPeople(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if value, ok := wessuo.mutation.AddedEstimatedNumPeople(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if wessuo.mutation.EstimatedNumPeopleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedNumPeople,
		})
	}
	if value, ok := wessuo.mutation.EstimatedDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if value, ok := wessuo.mutation.AddedEstimatedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if wessuo.mutation.EstimatedDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedDuration,
		})
	}
	if value, ok := wessuo.mutation.EstimatedCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if value, ok := wessuo.mutation.AddedEstimatedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if wessuo.mutation.EstimatedCostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workeffortskillstandard.FieldEstimatedCost,
		})
	}
	if wessuo.mutation.WorkEffortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.WorkEffortTable,
			Columns: []string{workeffortskillstandard.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wessuo.mutation.WorkEffortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.WorkEffortTable,
			Columns: []string{workeffortskillstandard.WorkEffortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wessuo.mutation.SkillTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.SkillTypeTable,
			Columns: []string{workeffortskillstandard.SkillTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skilltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wessuo.mutation.SkillTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workeffortskillstandard.SkillTypeTable,
			Columns: []string{workeffortskillstandard.SkillTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skilltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffortSkillStandard{config: wessuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wessuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workeffortskillstandard.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
