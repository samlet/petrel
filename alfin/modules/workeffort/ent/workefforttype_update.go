// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workeffort"
	"github.com/samlet/petrel/alfin/modules/workeffort/ent/workefforttype"
)

// WorkEffortTypeUpdate is the builder for updating WorkEffortType entities.
type WorkEffortTypeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkEffortTypeMutation
}

// Where adds a new predicate for the WorkEffortTypeUpdate builder.
func (wetu *WorkEffortTypeUpdate) Where(ps ...predicate.WorkEffortType) *WorkEffortTypeUpdate {
	wetu.mutation.predicates = append(wetu.mutation.predicates, ps...)
	return wetu
}

// SetStringRef sets the "string_ref" field.
func (wetu *WorkEffortTypeUpdate) SetStringRef(s string) *WorkEffortTypeUpdate {
	wetu.mutation.SetStringRef(s)
	return wetu
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wetu *WorkEffortTypeUpdate) SetNillableStringRef(s *string) *WorkEffortTypeUpdate {
	if s != nil {
		wetu.SetStringRef(*s)
	}
	return wetu
}

// ClearStringRef clears the value of the "string_ref" field.
func (wetu *WorkEffortTypeUpdate) ClearStringRef() *WorkEffortTypeUpdate {
	wetu.mutation.ClearStringRef()
	return wetu
}

// SetHasTable sets the "has_table" field.
func (wetu *WorkEffortTypeUpdate) SetHasTable(wt workefforttype.HasTable) *WorkEffortTypeUpdate {
	wetu.mutation.SetHasTable(wt)
	return wetu
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (wetu *WorkEffortTypeUpdate) SetNillableHasTable(wt *workefforttype.HasTable) *WorkEffortTypeUpdate {
	if wt != nil {
		wetu.SetHasTable(*wt)
	}
	return wetu
}

// ClearHasTable clears the value of the "has_table" field.
func (wetu *WorkEffortTypeUpdate) ClearHasTable() *WorkEffortTypeUpdate {
	wetu.mutation.ClearHasTable()
	return wetu
}

// SetDescription sets the "description" field.
func (wetu *WorkEffortTypeUpdate) SetDescription(s string) *WorkEffortTypeUpdate {
	wetu.mutation.SetDescription(s)
	return wetu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wetu *WorkEffortTypeUpdate) SetNillableDescription(s *string) *WorkEffortTypeUpdate {
	if s != nil {
		wetu.SetDescription(*s)
	}
	return wetu
}

// ClearDescription clears the value of the "description" field.
func (wetu *WorkEffortTypeUpdate) ClearDescription() *WorkEffortTypeUpdate {
	wetu.mutation.ClearDescription()
	return wetu
}

// SetParentID sets the "parent" edge to the WorkEffortType entity by ID.
func (wetu *WorkEffortTypeUpdate) SetParentID(id int) *WorkEffortTypeUpdate {
	wetu.mutation.SetParentID(id)
	return wetu
}

// SetNillableParentID sets the "parent" edge to the WorkEffortType entity by ID if the given value is not nil.
func (wetu *WorkEffortTypeUpdate) SetNillableParentID(id *int) *WorkEffortTypeUpdate {
	if id != nil {
		wetu = wetu.SetParentID(*id)
	}
	return wetu
}

// SetParent sets the "parent" edge to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) SetParent(w *WorkEffortType) *WorkEffortTypeUpdate {
	return wetu.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkEffortType entity by IDs.
func (wetu *WorkEffortTypeUpdate) AddChildIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.AddChildIDs(ids...)
	return wetu
}

// AddChildren adds the "children" edges to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) AddChildren(w ...*WorkEffortType) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.AddChildIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (wetu *WorkEffortTypeUpdate) AddWorkEffortIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.AddWorkEffortIDs(ids...)
	return wetu
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (wetu *WorkEffortTypeUpdate) AddWorkEfforts(w ...*WorkEffort) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.AddWorkEffortIDs(ids...)
}

// AddChildWorkEffortTypeIDs adds the "child_work_effort_types" edge to the WorkEffortType entity by IDs.
func (wetu *WorkEffortTypeUpdate) AddChildWorkEffortTypeIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.AddChildWorkEffortTypeIDs(ids...)
	return wetu
}

// AddChildWorkEffortTypes adds the "child_work_effort_types" edges to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) AddChildWorkEffortTypes(w ...*WorkEffortType) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.AddChildWorkEffortTypeIDs(ids...)
}

// Mutation returns the WorkEffortTypeMutation object of the builder.
func (wetu *WorkEffortTypeUpdate) Mutation() *WorkEffortTypeMutation {
	return wetu.mutation
}

// ClearParent clears the "parent" edge to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) ClearParent() *WorkEffortTypeUpdate {
	wetu.mutation.ClearParent()
	return wetu
}

// ClearChildren clears all "children" edges to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) ClearChildren() *WorkEffortTypeUpdate {
	wetu.mutation.ClearChildren()
	return wetu
}

// RemoveChildIDs removes the "children" edge to WorkEffortType entities by IDs.
func (wetu *WorkEffortTypeUpdate) RemoveChildIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.RemoveChildIDs(ids...)
	return wetu
}

// RemoveChildren removes "children" edges to WorkEffortType entities.
func (wetu *WorkEffortTypeUpdate) RemoveChildren(w ...*WorkEffortType) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.RemoveChildIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (wetu *WorkEffortTypeUpdate) ClearWorkEfforts() *WorkEffortTypeUpdate {
	wetu.mutation.ClearWorkEfforts()
	return wetu
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (wetu *WorkEffortTypeUpdate) RemoveWorkEffortIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.RemoveWorkEffortIDs(ids...)
	return wetu
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (wetu *WorkEffortTypeUpdate) RemoveWorkEfforts(w ...*WorkEffort) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.RemoveWorkEffortIDs(ids...)
}

// ClearChildWorkEffortTypes clears all "child_work_effort_types" edges to the WorkEffortType entity.
func (wetu *WorkEffortTypeUpdate) ClearChildWorkEffortTypes() *WorkEffortTypeUpdate {
	wetu.mutation.ClearChildWorkEffortTypes()
	return wetu
}

// RemoveChildWorkEffortTypeIDs removes the "child_work_effort_types" edge to WorkEffortType entities by IDs.
func (wetu *WorkEffortTypeUpdate) RemoveChildWorkEffortTypeIDs(ids ...int) *WorkEffortTypeUpdate {
	wetu.mutation.RemoveChildWorkEffortTypeIDs(ids...)
	return wetu
}

// RemoveChildWorkEffortTypes removes "child_work_effort_types" edges to WorkEffortType entities.
func (wetu *WorkEffortTypeUpdate) RemoveChildWorkEffortTypes(w ...*WorkEffortType) *WorkEffortTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetu.RemoveChildWorkEffortTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wetu *WorkEffortTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wetu.defaults()
	if len(wetu.hooks) == 0 {
		if err = wetu.check(); err != nil {
			return 0, err
		}
		affected, err = wetu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wetu.check(); err != nil {
				return 0, err
			}
			wetu.mutation = mutation
			affected, err = wetu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wetu.hooks) - 1; i >= 0; i-- {
			mut = wetu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wetu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wetu *WorkEffortTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := wetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wetu *WorkEffortTypeUpdate) Exec(ctx context.Context) error {
	_, err := wetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetu *WorkEffortTypeUpdate) ExecX(ctx context.Context) {
	if err := wetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wetu *WorkEffortTypeUpdate) defaults() {
	if _, ok := wetu.mutation.UpdateTime(); !ok {
		v := workefforttype.UpdateDefaultUpdateTime()
		wetu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wetu *WorkEffortTypeUpdate) check() error {
	if v, ok := wetu.mutation.HasTable(); ok {
		if err := workefforttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (wetu *WorkEffortTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workefforttype.Table,
			Columns: workefforttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workefforttype.FieldID,
			},
		},
	}
	if ps := wetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wetu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workefforttype.FieldUpdateTime,
		})
	}
	if value, ok := wetu.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workefforttype.FieldStringRef,
		})
	}
	if wetu.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workefforttype.FieldStringRef,
		})
	}
	if value, ok := wetu.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workefforttype.FieldHasTable,
		})
	}
	if wetu.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workefforttype.FieldHasTable,
		})
	}
	if value, ok := wetu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workefforttype.FieldDescription,
		})
	}
	if wetu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workefforttype.FieldDescription,
		})
	}
	if wetu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workefforttype.ParentTable,
			Columns: []string{workefforttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workefforttype.ParentTable,
			Columns: []string{workefforttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wetu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetu.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !wetu.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetu.mutation.ChildWorkEffortTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.RemovedChildWorkEffortTypesIDs(); len(nodes) > 0 && !wetu.mutation.ChildWorkEffortTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.ChildWorkEffortTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workefforttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkEffortTypeUpdateOne is the builder for updating a single WorkEffortType entity.
type WorkEffortTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkEffortTypeMutation
}

// SetStringRef sets the "string_ref" field.
func (wetuo *WorkEffortTypeUpdateOne) SetStringRef(s string) *WorkEffortTypeUpdateOne {
	wetuo.mutation.SetStringRef(s)
	return wetuo
}

// SetNillableStringRef sets the "string_ref" field if the given value is not nil.
func (wetuo *WorkEffortTypeUpdateOne) SetNillableStringRef(s *string) *WorkEffortTypeUpdateOne {
	if s != nil {
		wetuo.SetStringRef(*s)
	}
	return wetuo
}

// ClearStringRef clears the value of the "string_ref" field.
func (wetuo *WorkEffortTypeUpdateOne) ClearStringRef() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearStringRef()
	return wetuo
}

// SetHasTable sets the "has_table" field.
func (wetuo *WorkEffortTypeUpdateOne) SetHasTable(wt workefforttype.HasTable) *WorkEffortTypeUpdateOne {
	wetuo.mutation.SetHasTable(wt)
	return wetuo
}

// SetNillableHasTable sets the "has_table" field if the given value is not nil.
func (wetuo *WorkEffortTypeUpdateOne) SetNillableHasTable(wt *workefforttype.HasTable) *WorkEffortTypeUpdateOne {
	if wt != nil {
		wetuo.SetHasTable(*wt)
	}
	return wetuo
}

// ClearHasTable clears the value of the "has_table" field.
func (wetuo *WorkEffortTypeUpdateOne) ClearHasTable() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearHasTable()
	return wetuo
}

// SetDescription sets the "description" field.
func (wetuo *WorkEffortTypeUpdateOne) SetDescription(s string) *WorkEffortTypeUpdateOne {
	wetuo.mutation.SetDescription(s)
	return wetuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wetuo *WorkEffortTypeUpdateOne) SetNillableDescription(s *string) *WorkEffortTypeUpdateOne {
	if s != nil {
		wetuo.SetDescription(*s)
	}
	return wetuo
}

// ClearDescription clears the value of the "description" field.
func (wetuo *WorkEffortTypeUpdateOne) ClearDescription() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearDescription()
	return wetuo
}

// SetParentID sets the "parent" edge to the WorkEffortType entity by ID.
func (wetuo *WorkEffortTypeUpdateOne) SetParentID(id int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.SetParentID(id)
	return wetuo
}

// SetNillableParentID sets the "parent" edge to the WorkEffortType entity by ID if the given value is not nil.
func (wetuo *WorkEffortTypeUpdateOne) SetNillableParentID(id *int) *WorkEffortTypeUpdateOne {
	if id != nil {
		wetuo = wetuo.SetParentID(*id)
	}
	return wetuo
}

// SetParent sets the "parent" edge to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) SetParent(w *WorkEffortType) *WorkEffortTypeUpdateOne {
	return wetuo.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkEffortType entity by IDs.
func (wetuo *WorkEffortTypeUpdateOne) AddChildIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.AddChildIDs(ids...)
	return wetuo
}

// AddChildren adds the "children" edges to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) AddChildren(w ...*WorkEffortType) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.AddChildIDs(ids...)
}

// AddWorkEffortIDs adds the "work_efforts" edge to the WorkEffort entity by IDs.
func (wetuo *WorkEffortTypeUpdateOne) AddWorkEffortIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.AddWorkEffortIDs(ids...)
	return wetuo
}

// AddWorkEfforts adds the "work_efforts" edges to the WorkEffort entity.
func (wetuo *WorkEffortTypeUpdateOne) AddWorkEfforts(w ...*WorkEffort) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.AddWorkEffortIDs(ids...)
}

// AddChildWorkEffortTypeIDs adds the "child_work_effort_types" edge to the WorkEffortType entity by IDs.
func (wetuo *WorkEffortTypeUpdateOne) AddChildWorkEffortTypeIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.AddChildWorkEffortTypeIDs(ids...)
	return wetuo
}

// AddChildWorkEffortTypes adds the "child_work_effort_types" edges to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) AddChildWorkEffortTypes(w ...*WorkEffortType) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.AddChildWorkEffortTypeIDs(ids...)
}

// Mutation returns the WorkEffortTypeMutation object of the builder.
func (wetuo *WorkEffortTypeUpdateOne) Mutation() *WorkEffortTypeMutation {
	return wetuo.mutation
}

// ClearParent clears the "parent" edge to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) ClearParent() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearParent()
	return wetuo
}

// ClearChildren clears all "children" edges to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) ClearChildren() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearChildren()
	return wetuo
}

// RemoveChildIDs removes the "children" edge to WorkEffortType entities by IDs.
func (wetuo *WorkEffortTypeUpdateOne) RemoveChildIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.RemoveChildIDs(ids...)
	return wetuo
}

// RemoveChildren removes "children" edges to WorkEffortType entities.
func (wetuo *WorkEffortTypeUpdateOne) RemoveChildren(w ...*WorkEffortType) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.RemoveChildIDs(ids...)
}

// ClearWorkEfforts clears all "work_efforts" edges to the WorkEffort entity.
func (wetuo *WorkEffortTypeUpdateOne) ClearWorkEfforts() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearWorkEfforts()
	return wetuo
}

// RemoveWorkEffortIDs removes the "work_efforts" edge to WorkEffort entities by IDs.
func (wetuo *WorkEffortTypeUpdateOne) RemoveWorkEffortIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.RemoveWorkEffortIDs(ids...)
	return wetuo
}

// RemoveWorkEfforts removes "work_efforts" edges to WorkEffort entities.
func (wetuo *WorkEffortTypeUpdateOne) RemoveWorkEfforts(w ...*WorkEffort) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.RemoveWorkEffortIDs(ids...)
}

// ClearChildWorkEffortTypes clears all "child_work_effort_types" edges to the WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) ClearChildWorkEffortTypes() *WorkEffortTypeUpdateOne {
	wetuo.mutation.ClearChildWorkEffortTypes()
	return wetuo
}

// RemoveChildWorkEffortTypeIDs removes the "child_work_effort_types" edge to WorkEffortType entities by IDs.
func (wetuo *WorkEffortTypeUpdateOne) RemoveChildWorkEffortTypeIDs(ids ...int) *WorkEffortTypeUpdateOne {
	wetuo.mutation.RemoveChildWorkEffortTypeIDs(ids...)
	return wetuo
}

// RemoveChildWorkEffortTypes removes "child_work_effort_types" edges to WorkEffortType entities.
func (wetuo *WorkEffortTypeUpdateOne) RemoveChildWorkEffortTypes(w ...*WorkEffortType) *WorkEffortTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wetuo.RemoveChildWorkEffortTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wetuo *WorkEffortTypeUpdateOne) Select(field string, fields ...string) *WorkEffortTypeUpdateOne {
	wetuo.fields = append([]string{field}, fields...)
	return wetuo
}

// Save executes the query and returns the updated WorkEffortType entity.
func (wetuo *WorkEffortTypeUpdateOne) Save(ctx context.Context) (*WorkEffortType, error) {
	var (
		err  error
		node *WorkEffortType
	)
	wetuo.defaults()
	if len(wetuo.hooks) == 0 {
		if err = wetuo.check(); err != nil {
			return nil, err
		}
		node, err = wetuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkEffortTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wetuo.check(); err != nil {
				return nil, err
			}
			wetuo.mutation = mutation
			node, err = wetuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wetuo.hooks) - 1; i >= 0; i-- {
			mut = wetuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wetuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wetuo *WorkEffortTypeUpdateOne) SaveX(ctx context.Context) *WorkEffortType {
	node, err := wetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wetuo *WorkEffortTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := wetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetuo *WorkEffortTypeUpdateOne) ExecX(ctx context.Context) {
	if err := wetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wetuo *WorkEffortTypeUpdateOne) defaults() {
	if _, ok := wetuo.mutation.UpdateTime(); !ok {
		v := workefforttype.UpdateDefaultUpdateTime()
		wetuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wetuo *WorkEffortTypeUpdateOne) check() error {
	if v, ok := wetuo.mutation.HasTable(); ok {
		if err := workefforttype.HasTableValidator(v); err != nil {
			return &ValidationError{Name: "has_table", err: fmt.Errorf("ent: validator failed for field \"has_table\": %w", err)}
		}
	}
	return nil
}

func (wetuo *WorkEffortTypeUpdateOne) sqlSave(ctx context.Context) (_node *WorkEffortType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workefforttype.Table,
			Columns: workefforttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workefforttype.FieldID,
			},
		},
	}
	id, ok := wetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkEffortType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workefforttype.FieldID)
		for _, f := range fields {
			if !workefforttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workefforttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wetuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workefforttype.FieldUpdateTime,
		})
	}
	if value, ok := wetuo.mutation.StringRef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workefforttype.FieldStringRef,
		})
	}
	if wetuo.mutation.StringRefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workefforttype.FieldStringRef,
		})
	}
	if value, ok := wetuo.mutation.HasTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: workefforttype.FieldHasTable,
		})
	}
	if wetuo.mutation.HasTableCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: workefforttype.FieldHasTable,
		})
	}
	if value, ok := wetuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workefforttype.FieldDescription,
		})
	}
	if wetuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workefforttype.FieldDescription,
		})
	}
	if wetuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workefforttype.ParentTable,
			Columns: []string{workefforttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workefforttype.ParentTable,
			Columns: []string{workefforttype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wetuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.ChildrenTable,
			Columns: []string{workefforttype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetuo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.RemovedWorkEffortsIDs(); len(nodes) > 0 && !wetuo.mutation.WorkEffortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.WorkEffortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workefforttype.WorkEffortsTable,
			Columns: []string{workefforttype.WorkEffortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workeffort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetuo.mutation.ChildWorkEffortTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.RemovedChildWorkEffortTypesIDs(); len(nodes) > 0 && !wetuo.mutation.ChildWorkEffortTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.ChildWorkEffortTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workefforttype.ChildWorkEffortTypesTable,
			Columns: workefforttype.ChildWorkEffortTypesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workefforttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkEffortType{config: wetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workefforttype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
