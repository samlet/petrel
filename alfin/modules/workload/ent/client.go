// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/workload/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloaditem"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadstatus"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Workload is the client for interacting with the Workload builders.
	Workload *WorkloadClient
	// WorkloadFeature is the client for interacting with the WorkloadFeature builders.
	WorkloadFeature *WorkloadFeatureClient
	// WorkloadFeatureAppl is the client for interacting with the WorkloadFeatureAppl builders.
	WorkloadFeatureAppl *WorkloadFeatureApplClient
	// WorkloadFeatureApplType is the client for interacting with the WorkloadFeatureApplType builders.
	WorkloadFeatureApplType *WorkloadFeatureApplTypeClient
	// WorkloadItem is the client for interacting with the WorkloadItem builders.
	WorkloadItem *WorkloadItemClient
	// WorkloadStatus is the client for interacting with the WorkloadStatus builders.
	WorkloadStatus *WorkloadStatusClient
	// WorkloadType is the client for interacting with the WorkloadType builders.
	WorkloadType *WorkloadTypeClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Workload = NewWorkloadClient(c.config)
	c.WorkloadFeature = NewWorkloadFeatureClient(c.config)
	c.WorkloadFeatureAppl = NewWorkloadFeatureApplClient(c.config)
	c.WorkloadFeatureApplType = NewWorkloadFeatureApplTypeClient(c.config)
	c.WorkloadItem = NewWorkloadItemClient(c.config)
	c.WorkloadStatus = NewWorkloadStatusClient(c.config)
	c.WorkloadType = NewWorkloadTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Workload:                NewWorkloadClient(cfg),
		WorkloadFeature:         NewWorkloadFeatureClient(cfg),
		WorkloadFeatureAppl:     NewWorkloadFeatureApplClient(cfg),
		WorkloadFeatureApplType: NewWorkloadFeatureApplTypeClient(cfg),
		WorkloadItem:            NewWorkloadItemClient(cfg),
		WorkloadStatus:          NewWorkloadStatusClient(cfg),
		WorkloadType:            NewWorkloadTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                  cfg,
		Workload:                NewWorkloadClient(cfg),
		WorkloadFeature:         NewWorkloadFeatureClient(cfg),
		WorkloadFeatureAppl:     NewWorkloadFeatureApplClient(cfg),
		WorkloadFeatureApplType: NewWorkloadFeatureApplTypeClient(cfg),
		WorkloadItem:            NewWorkloadItemClient(cfg),
		WorkloadStatus:          NewWorkloadStatusClient(cfg),
		WorkloadType:            NewWorkloadTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Workload.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Workload.Use(hooks...)
	c.WorkloadFeature.Use(hooks...)
	c.WorkloadFeatureAppl.Use(hooks...)
	c.WorkloadFeatureApplType.Use(hooks...)
	c.WorkloadItem.Use(hooks...)
	c.WorkloadStatus.Use(hooks...)
	c.WorkloadType.Use(hooks...)
}

// WorkloadClient is a client for the Workload schema.
type WorkloadClient struct {
	config
}

// NewWorkloadClient returns a client for the Workload from the given config.
func NewWorkloadClient(c config) *WorkloadClient {
	return &WorkloadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workload.Hooks(f(g(h())))`.
func (c *WorkloadClient) Use(hooks ...Hook) {
	c.hooks.Workload = append(c.hooks.Workload, hooks...)
}

// Create returns a create builder for Workload.
func (c *WorkloadClient) Create() *WorkloadCreate {
	mutation := newWorkloadMutation(c.config, OpCreate)
	return &WorkloadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workload entities.
func (c *WorkloadClient) CreateBulk(builders ...*WorkloadCreate) *WorkloadCreateBulk {
	return &WorkloadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workload.
func (c *WorkloadClient) Update() *WorkloadUpdate {
	mutation := newWorkloadMutation(c.config, OpUpdate)
	return &WorkloadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadClient) UpdateOne(w *Workload) *WorkloadUpdateOne {
	mutation := newWorkloadMutation(c.config, OpUpdateOne, withWorkload(w))
	return &WorkloadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadClient) UpdateOneID(id int) *WorkloadUpdateOne {
	mutation := newWorkloadMutation(c.config, OpUpdateOne, withWorkloadID(id))
	return &WorkloadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workload.
func (c *WorkloadClient) Delete() *WorkloadDelete {
	mutation := newWorkloadMutation(c.config, OpDelete)
	return &WorkloadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadClient) DeleteOne(w *Workload) *WorkloadDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadClient) DeleteOneID(id int) *WorkloadDeleteOne {
	builder := c.Delete().Where(workload.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadDeleteOne{builder}
}

// Query returns a query builder for Workload.
func (c *WorkloadClient) Query() *WorkloadQuery {
	return &WorkloadQuery{
		config: c.config,
	}
}

// Get returns a Workload entity by its id.
func (c *WorkloadClient) Get(ctx context.Context, id int) (*Workload, error) {
	return c.Query().Where(workload.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadClient) GetX(ctx context.Context, id int) *Workload {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkloadType queries the workload_type edge of a Workload.
func (c *WorkloadClient) QueryWorkloadType(w *Workload) *WorkloadTypeQuery {
	query := &WorkloadTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workload.Table, workload.FieldID, id),
			sqlgraph.To(workloadtype.Table, workloadtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workload.WorkloadTypeTable, workload.WorkloadTypeColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadFeatureAppls queries the workload_feature_appls edge of a Workload.
func (c *WorkloadClient) QueryWorkloadFeatureAppls(w *Workload) *WorkloadFeatureApplQuery {
	query := &WorkloadFeatureApplQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workload.Table, workload.FieldID, id),
			sqlgraph.To(workloadfeatureappl.Table, workloadfeatureappl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workload.WorkloadFeatureApplsTable, workload.WorkloadFeatureApplsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadItems queries the workload_items edge of a Workload.
func (c *WorkloadClient) QueryWorkloadItems(w *Workload) *WorkloadItemQuery {
	query := &WorkloadItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workload.Table, workload.FieldID, id),
			sqlgraph.To(workloaditem.Table, workloaditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workload.WorkloadItemsTable, workload.WorkloadItemsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadStatuses queries the workload_statuses edge of a Workload.
func (c *WorkloadClient) QueryWorkloadStatuses(w *Workload) *WorkloadStatusQuery {
	query := &WorkloadStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workload.Table, workload.FieldID, id),
			sqlgraph.To(workloadstatus.Table, workloadstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workload.WorkloadStatusesTable, workload.WorkloadStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadClient) Hooks() []Hook {
	return c.hooks.Workload
}

// WorkloadFeatureClient is a client for the WorkloadFeature schema.
type WorkloadFeatureClient struct {
	config
}

// NewWorkloadFeatureClient returns a client for the WorkloadFeature from the given config.
func NewWorkloadFeatureClient(c config) *WorkloadFeatureClient {
	return &WorkloadFeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadfeature.Hooks(f(g(h())))`.
func (c *WorkloadFeatureClient) Use(hooks ...Hook) {
	c.hooks.WorkloadFeature = append(c.hooks.WorkloadFeature, hooks...)
}

// Create returns a create builder for WorkloadFeature.
func (c *WorkloadFeatureClient) Create() *WorkloadFeatureCreate {
	mutation := newWorkloadFeatureMutation(c.config, OpCreate)
	return &WorkloadFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadFeature entities.
func (c *WorkloadFeatureClient) CreateBulk(builders ...*WorkloadFeatureCreate) *WorkloadFeatureCreateBulk {
	return &WorkloadFeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadFeature.
func (c *WorkloadFeatureClient) Update() *WorkloadFeatureUpdate {
	mutation := newWorkloadFeatureMutation(c.config, OpUpdate)
	return &WorkloadFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadFeatureClient) UpdateOne(wf *WorkloadFeature) *WorkloadFeatureUpdateOne {
	mutation := newWorkloadFeatureMutation(c.config, OpUpdateOne, withWorkloadFeature(wf))
	return &WorkloadFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadFeatureClient) UpdateOneID(id int) *WorkloadFeatureUpdateOne {
	mutation := newWorkloadFeatureMutation(c.config, OpUpdateOne, withWorkloadFeatureID(id))
	return &WorkloadFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadFeature.
func (c *WorkloadFeatureClient) Delete() *WorkloadFeatureDelete {
	mutation := newWorkloadFeatureMutation(c.config, OpDelete)
	return &WorkloadFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadFeatureClient) DeleteOne(wf *WorkloadFeature) *WorkloadFeatureDeleteOne {
	return c.DeleteOneID(wf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadFeatureClient) DeleteOneID(id int) *WorkloadFeatureDeleteOne {
	builder := c.Delete().Where(workloadfeature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadFeatureDeleteOne{builder}
}

// Query returns a query builder for WorkloadFeature.
func (c *WorkloadFeatureClient) Query() *WorkloadFeatureQuery {
	return &WorkloadFeatureQuery{
		config: c.config,
	}
}

// Get returns a WorkloadFeature entity by its id.
func (c *WorkloadFeatureClient) Get(ctx context.Context, id int) (*WorkloadFeature, error) {
	return c.Query().Where(workloadfeature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadFeatureClient) GetX(ctx context.Context, id int) *WorkloadFeature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkloadFeatureAppls queries the workload_feature_appls edge of a WorkloadFeature.
func (c *WorkloadFeatureClient) QueryWorkloadFeatureAppls(wf *WorkloadFeature) *WorkloadFeatureApplQuery {
	query := &WorkloadFeatureApplQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeature.Table, workloadfeature.FieldID, id),
			sqlgraph.To(workloadfeatureappl.Table, workloadfeatureappl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadfeature.WorkloadFeatureApplsTable, workloadfeature.WorkloadFeatureApplsColumn),
		)
		fromV = sqlgraph.Neighbors(wf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadFeatureClient) Hooks() []Hook {
	return c.hooks.WorkloadFeature
}

// WorkloadFeatureApplClient is a client for the WorkloadFeatureAppl schema.
type WorkloadFeatureApplClient struct {
	config
}

// NewWorkloadFeatureApplClient returns a client for the WorkloadFeatureAppl from the given config.
func NewWorkloadFeatureApplClient(c config) *WorkloadFeatureApplClient {
	return &WorkloadFeatureApplClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadfeatureappl.Hooks(f(g(h())))`.
func (c *WorkloadFeatureApplClient) Use(hooks ...Hook) {
	c.hooks.WorkloadFeatureAppl = append(c.hooks.WorkloadFeatureAppl, hooks...)
}

// Create returns a create builder for WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) Create() *WorkloadFeatureApplCreate {
	mutation := newWorkloadFeatureApplMutation(c.config, OpCreate)
	return &WorkloadFeatureApplCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadFeatureAppl entities.
func (c *WorkloadFeatureApplClient) CreateBulk(builders ...*WorkloadFeatureApplCreate) *WorkloadFeatureApplCreateBulk {
	return &WorkloadFeatureApplCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) Update() *WorkloadFeatureApplUpdate {
	mutation := newWorkloadFeatureApplMutation(c.config, OpUpdate)
	return &WorkloadFeatureApplUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadFeatureApplClient) UpdateOne(wfa *WorkloadFeatureAppl) *WorkloadFeatureApplUpdateOne {
	mutation := newWorkloadFeatureApplMutation(c.config, OpUpdateOne, withWorkloadFeatureAppl(wfa))
	return &WorkloadFeatureApplUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadFeatureApplClient) UpdateOneID(id int) *WorkloadFeatureApplUpdateOne {
	mutation := newWorkloadFeatureApplMutation(c.config, OpUpdateOne, withWorkloadFeatureApplID(id))
	return &WorkloadFeatureApplUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) Delete() *WorkloadFeatureApplDelete {
	mutation := newWorkloadFeatureApplMutation(c.config, OpDelete)
	return &WorkloadFeatureApplDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadFeatureApplClient) DeleteOne(wfa *WorkloadFeatureAppl) *WorkloadFeatureApplDeleteOne {
	return c.DeleteOneID(wfa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadFeatureApplClient) DeleteOneID(id int) *WorkloadFeatureApplDeleteOne {
	builder := c.Delete().Where(workloadfeatureappl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadFeatureApplDeleteOne{builder}
}

// Query returns a query builder for WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) Query() *WorkloadFeatureApplQuery {
	return &WorkloadFeatureApplQuery{
		config: c.config,
	}
}

// Get returns a WorkloadFeatureAppl entity by its id.
func (c *WorkloadFeatureApplClient) Get(ctx context.Context, id int) (*WorkloadFeatureAppl, error) {
	return c.Query().Where(workloadfeatureappl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadFeatureApplClient) GetX(ctx context.Context, id int) *WorkloadFeatureAppl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkload queries the workload edge of a WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) QueryWorkload(wfa *WorkloadFeatureAppl) *WorkloadQuery {
	query := &WorkloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappl.Table, workloadfeatureappl.FieldID, id),
			sqlgraph.To(workload.Table, workload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadfeatureappl.WorkloadTable, workloadfeatureappl.WorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(wfa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadFeature queries the workload_feature edge of a WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) QueryWorkloadFeature(wfa *WorkloadFeatureAppl) *WorkloadFeatureQuery {
	query := &WorkloadFeatureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappl.Table, workloadfeatureappl.FieldID, id),
			sqlgraph.To(workloadfeature.Table, workloadfeature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadfeatureappl.WorkloadFeatureTable, workloadfeatureappl.WorkloadFeatureColumn),
		)
		fromV = sqlgraph.Neighbors(wfa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadFeatureApplType queries the workload_feature_appl_type edge of a WorkloadFeatureAppl.
func (c *WorkloadFeatureApplClient) QueryWorkloadFeatureApplType(wfa *WorkloadFeatureAppl) *WorkloadFeatureApplTypeQuery {
	query := &WorkloadFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappl.Table, workloadfeatureappl.FieldID, id),
			sqlgraph.To(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadfeatureappl.WorkloadFeatureApplTypeTable, workloadfeatureappl.WorkloadFeatureApplTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wfa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadFeatureApplClient) Hooks() []Hook {
	return c.hooks.WorkloadFeatureAppl
}

// WorkloadFeatureApplTypeClient is a client for the WorkloadFeatureApplType schema.
type WorkloadFeatureApplTypeClient struct {
	config
}

// NewWorkloadFeatureApplTypeClient returns a client for the WorkloadFeatureApplType from the given config.
func NewWorkloadFeatureApplTypeClient(c config) *WorkloadFeatureApplTypeClient {
	return &WorkloadFeatureApplTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadfeatureappltype.Hooks(f(g(h())))`.
func (c *WorkloadFeatureApplTypeClient) Use(hooks ...Hook) {
	c.hooks.WorkloadFeatureApplType = append(c.hooks.WorkloadFeatureApplType, hooks...)
}

// Create returns a create builder for WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) Create() *WorkloadFeatureApplTypeCreate {
	mutation := newWorkloadFeatureApplTypeMutation(c.config, OpCreate)
	return &WorkloadFeatureApplTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadFeatureApplType entities.
func (c *WorkloadFeatureApplTypeClient) CreateBulk(builders ...*WorkloadFeatureApplTypeCreate) *WorkloadFeatureApplTypeCreateBulk {
	return &WorkloadFeatureApplTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) Update() *WorkloadFeatureApplTypeUpdate {
	mutation := newWorkloadFeatureApplTypeMutation(c.config, OpUpdate)
	return &WorkloadFeatureApplTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadFeatureApplTypeClient) UpdateOne(wfat *WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdateOne {
	mutation := newWorkloadFeatureApplTypeMutation(c.config, OpUpdateOne, withWorkloadFeatureApplType(wfat))
	return &WorkloadFeatureApplTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadFeatureApplTypeClient) UpdateOneID(id int) *WorkloadFeatureApplTypeUpdateOne {
	mutation := newWorkloadFeatureApplTypeMutation(c.config, OpUpdateOne, withWorkloadFeatureApplTypeID(id))
	return &WorkloadFeatureApplTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) Delete() *WorkloadFeatureApplTypeDelete {
	mutation := newWorkloadFeatureApplTypeMutation(c.config, OpDelete)
	return &WorkloadFeatureApplTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadFeatureApplTypeClient) DeleteOne(wfat *WorkloadFeatureApplType) *WorkloadFeatureApplTypeDeleteOne {
	return c.DeleteOneID(wfat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadFeatureApplTypeClient) DeleteOneID(id int) *WorkloadFeatureApplTypeDeleteOne {
	builder := c.Delete().Where(workloadfeatureappltype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadFeatureApplTypeDeleteOne{builder}
}

// Query returns a query builder for WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) Query() *WorkloadFeatureApplTypeQuery {
	return &WorkloadFeatureApplTypeQuery{
		config: c.config,
	}
}

// Get returns a WorkloadFeatureApplType entity by its id.
func (c *WorkloadFeatureApplTypeClient) Get(ctx context.Context, id int) (*WorkloadFeatureApplType, error) {
	return c.Query().Where(workloadfeatureappltype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadFeatureApplTypeClient) GetX(ctx context.Context, id int) *WorkloadFeatureApplType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) QueryParent(wfat *WorkloadFeatureApplType) *WorkloadFeatureApplTypeQuery {
	query := &WorkloadFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID, id),
			sqlgraph.To(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadfeatureappltype.ParentTable, workloadfeatureappltype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(wfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) QueryChildren(wfat *WorkloadFeatureApplType) *WorkloadFeatureApplTypeQuery {
	query := &WorkloadFeatureApplTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID, id),
			sqlgraph.To(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadfeatureappltype.ChildrenTable, workloadfeatureappltype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(wfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadFeatureAppls queries the workload_feature_appls edge of a WorkloadFeatureApplType.
func (c *WorkloadFeatureApplTypeClient) QueryWorkloadFeatureAppls(wfat *WorkloadFeatureApplType) *WorkloadFeatureApplQuery {
	query := &WorkloadFeatureApplQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wfat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadfeatureappltype.Table, workloadfeatureappltype.FieldID, id),
			sqlgraph.To(workloadfeatureappl.Table, workloadfeatureappl.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadfeatureappltype.WorkloadFeatureApplsTable, workloadfeatureappltype.WorkloadFeatureApplsColumn),
		)
		fromV = sqlgraph.Neighbors(wfat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadFeatureApplTypeClient) Hooks() []Hook {
	return c.hooks.WorkloadFeatureApplType
}

// WorkloadItemClient is a client for the WorkloadItem schema.
type WorkloadItemClient struct {
	config
}

// NewWorkloadItemClient returns a client for the WorkloadItem from the given config.
func NewWorkloadItemClient(c config) *WorkloadItemClient {
	return &WorkloadItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloaditem.Hooks(f(g(h())))`.
func (c *WorkloadItemClient) Use(hooks ...Hook) {
	c.hooks.WorkloadItem = append(c.hooks.WorkloadItem, hooks...)
}

// Create returns a create builder for WorkloadItem.
func (c *WorkloadItemClient) Create() *WorkloadItemCreate {
	mutation := newWorkloadItemMutation(c.config, OpCreate)
	return &WorkloadItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadItem entities.
func (c *WorkloadItemClient) CreateBulk(builders ...*WorkloadItemCreate) *WorkloadItemCreateBulk {
	return &WorkloadItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadItem.
func (c *WorkloadItemClient) Update() *WorkloadItemUpdate {
	mutation := newWorkloadItemMutation(c.config, OpUpdate)
	return &WorkloadItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadItemClient) UpdateOne(wi *WorkloadItem) *WorkloadItemUpdateOne {
	mutation := newWorkloadItemMutation(c.config, OpUpdateOne, withWorkloadItem(wi))
	return &WorkloadItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadItemClient) UpdateOneID(id int) *WorkloadItemUpdateOne {
	mutation := newWorkloadItemMutation(c.config, OpUpdateOne, withWorkloadItemID(id))
	return &WorkloadItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadItem.
func (c *WorkloadItemClient) Delete() *WorkloadItemDelete {
	mutation := newWorkloadItemMutation(c.config, OpDelete)
	return &WorkloadItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadItemClient) DeleteOne(wi *WorkloadItem) *WorkloadItemDeleteOne {
	return c.DeleteOneID(wi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadItemClient) DeleteOneID(id int) *WorkloadItemDeleteOne {
	builder := c.Delete().Where(workloaditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadItemDeleteOne{builder}
}

// Query returns a query builder for WorkloadItem.
func (c *WorkloadItemClient) Query() *WorkloadItemQuery {
	return &WorkloadItemQuery{
		config: c.config,
	}
}

// Get returns a WorkloadItem entity by its id.
func (c *WorkloadItemClient) Get(ctx context.Context, id int) (*WorkloadItem, error) {
	return c.Query().Where(workloaditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadItemClient) GetX(ctx context.Context, id int) *WorkloadItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkload queries the workload edge of a WorkloadItem.
func (c *WorkloadItemClient) QueryWorkload(wi *WorkloadItem) *WorkloadQuery {
	query := &WorkloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloaditem.Table, workloaditem.FieldID, id),
			sqlgraph.To(workload.Table, workload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloaditem.WorkloadTable, workloaditem.WorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(wi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadItemClient) Hooks() []Hook {
	return c.hooks.WorkloadItem
}

// WorkloadStatusClient is a client for the WorkloadStatus schema.
type WorkloadStatusClient struct {
	config
}

// NewWorkloadStatusClient returns a client for the WorkloadStatus from the given config.
func NewWorkloadStatusClient(c config) *WorkloadStatusClient {
	return &WorkloadStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadstatus.Hooks(f(g(h())))`.
func (c *WorkloadStatusClient) Use(hooks ...Hook) {
	c.hooks.WorkloadStatus = append(c.hooks.WorkloadStatus, hooks...)
}

// Create returns a create builder for WorkloadStatus.
func (c *WorkloadStatusClient) Create() *WorkloadStatusCreate {
	mutation := newWorkloadStatusMutation(c.config, OpCreate)
	return &WorkloadStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadStatus entities.
func (c *WorkloadStatusClient) CreateBulk(builders ...*WorkloadStatusCreate) *WorkloadStatusCreateBulk {
	return &WorkloadStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadStatus.
func (c *WorkloadStatusClient) Update() *WorkloadStatusUpdate {
	mutation := newWorkloadStatusMutation(c.config, OpUpdate)
	return &WorkloadStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadStatusClient) UpdateOne(ws *WorkloadStatus) *WorkloadStatusUpdateOne {
	mutation := newWorkloadStatusMutation(c.config, OpUpdateOne, withWorkloadStatus(ws))
	return &WorkloadStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadStatusClient) UpdateOneID(id int) *WorkloadStatusUpdateOne {
	mutation := newWorkloadStatusMutation(c.config, OpUpdateOne, withWorkloadStatusID(id))
	return &WorkloadStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadStatus.
func (c *WorkloadStatusClient) Delete() *WorkloadStatusDelete {
	mutation := newWorkloadStatusMutation(c.config, OpDelete)
	return &WorkloadStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadStatusClient) DeleteOne(ws *WorkloadStatus) *WorkloadStatusDeleteOne {
	return c.DeleteOneID(ws.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadStatusClient) DeleteOneID(id int) *WorkloadStatusDeleteOne {
	builder := c.Delete().Where(workloadstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadStatusDeleteOne{builder}
}

// Query returns a query builder for WorkloadStatus.
func (c *WorkloadStatusClient) Query() *WorkloadStatusQuery {
	return &WorkloadStatusQuery{
		config: c.config,
	}
}

// Get returns a WorkloadStatus entity by its id.
func (c *WorkloadStatusClient) Get(ctx context.Context, id int) (*WorkloadStatus, error) {
	return c.Query().Where(workloadstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadStatusClient) GetX(ctx context.Context, id int) *WorkloadStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkload queries the workload edge of a WorkloadStatus.
func (c *WorkloadStatusClient) QueryWorkload(ws *WorkloadStatus) *WorkloadQuery {
	query := &WorkloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ws.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadstatus.Table, workloadstatus.FieldID, id),
			sqlgraph.To(workload.Table, workload.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadstatus.WorkloadTable, workloadstatus.WorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(ws.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadStatusClient) Hooks() []Hook {
	return c.hooks.WorkloadStatus
}

// WorkloadTypeClient is a client for the WorkloadType schema.
type WorkloadTypeClient struct {
	config
}

// NewWorkloadTypeClient returns a client for the WorkloadType from the given config.
func NewWorkloadTypeClient(c config) *WorkloadTypeClient {
	return &WorkloadTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadtype.Hooks(f(g(h())))`.
func (c *WorkloadTypeClient) Use(hooks ...Hook) {
	c.hooks.WorkloadType = append(c.hooks.WorkloadType, hooks...)
}

// Create returns a create builder for WorkloadType.
func (c *WorkloadTypeClient) Create() *WorkloadTypeCreate {
	mutation := newWorkloadTypeMutation(c.config, OpCreate)
	return &WorkloadTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadType entities.
func (c *WorkloadTypeClient) CreateBulk(builders ...*WorkloadTypeCreate) *WorkloadTypeCreateBulk {
	return &WorkloadTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadType.
func (c *WorkloadTypeClient) Update() *WorkloadTypeUpdate {
	mutation := newWorkloadTypeMutation(c.config, OpUpdate)
	return &WorkloadTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadTypeClient) UpdateOne(wt *WorkloadType) *WorkloadTypeUpdateOne {
	mutation := newWorkloadTypeMutation(c.config, OpUpdateOne, withWorkloadType(wt))
	return &WorkloadTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadTypeClient) UpdateOneID(id int) *WorkloadTypeUpdateOne {
	mutation := newWorkloadTypeMutation(c.config, OpUpdateOne, withWorkloadTypeID(id))
	return &WorkloadTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadType.
func (c *WorkloadTypeClient) Delete() *WorkloadTypeDelete {
	mutation := newWorkloadTypeMutation(c.config, OpDelete)
	return &WorkloadTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadTypeClient) DeleteOne(wt *WorkloadType) *WorkloadTypeDeleteOne {
	return c.DeleteOneID(wt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadTypeClient) DeleteOneID(id int) *WorkloadTypeDeleteOne {
	builder := c.Delete().Where(workloadtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadTypeDeleteOne{builder}
}

// Query returns a query builder for WorkloadType.
func (c *WorkloadTypeClient) Query() *WorkloadTypeQuery {
	return &WorkloadTypeQuery{
		config: c.config,
	}
}

// Get returns a WorkloadType entity by its id.
func (c *WorkloadTypeClient) Get(ctx context.Context, id int) (*WorkloadType, error) {
	return c.Query().Where(workloadtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadTypeClient) GetX(ctx context.Context, id int) *WorkloadType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a WorkloadType.
func (c *WorkloadTypeClient) QueryParent(wt *WorkloadType) *WorkloadTypeQuery {
	query := &WorkloadTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadtype.Table, workloadtype.FieldID, id),
			sqlgraph.To(workloadtype.Table, workloadtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workloadtype.ParentTable, workloadtype.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a WorkloadType.
func (c *WorkloadTypeClient) QueryChildren(wt *WorkloadType) *WorkloadTypeQuery {
	query := &WorkloadTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadtype.Table, workloadtype.FieldID, id),
			sqlgraph.To(workloadtype.Table, workloadtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadtype.ChildrenTable, workloadtype.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloads queries the workloads edge of a WorkloadType.
func (c *WorkloadTypeClient) QueryWorkloads(wt *WorkloadType) *WorkloadQuery {
	query := &WorkloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadtype.Table, workloadtype.FieldID, id),
			sqlgraph.To(workload.Table, workload.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadtype.WorkloadsTable, workloadtype.WorkloadsColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadTypeClient) Hooks() []Hook {
	return c.hooks.WorkloadType
}
