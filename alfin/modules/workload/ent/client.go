// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/samlet/petrel/alfin/modules/workload/ent/migrate"

	"github.com/samlet/petrel/alfin/modules/workload/ent/asset"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadpkg"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Asset is the client for interacting with the Asset builders.
	Asset *AssetClient
	// WorkloadPkg is the client for interacting with the WorkloadPkg builders.
	WorkloadPkg *WorkloadPkgClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Asset = NewAssetClient(c.config)
	c.WorkloadPkg = NewWorkloadPkgClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Asset:       NewAssetClient(cfg),
		WorkloadPkg: NewWorkloadPkgClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Asset:       NewAssetClient(cfg),
		WorkloadPkg: NewWorkloadPkgClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Asset.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Asset.Use(hooks...)
	c.WorkloadPkg.Use(hooks...)
}

// AssetClient is a client for the Asset schema.
type AssetClient struct {
	config
}

// NewAssetClient returns a client for the Asset from the given config.
func NewAssetClient(c config) *AssetClient {
	return &AssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asset.Hooks(f(g(h())))`.
func (c *AssetClient) Use(hooks ...Hook) {
	c.hooks.Asset = append(c.hooks.Asset, hooks...)
}

// Create returns a create builder for Asset.
func (c *AssetClient) Create() *AssetCreate {
	mutation := newAssetMutation(c.config, OpCreate)
	return &AssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Asset entities.
func (c *AssetClient) CreateBulk(builders ...*AssetCreate) *AssetCreateBulk {
	return &AssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Asset.
func (c *AssetClient) Update() *AssetUpdate {
	mutation := newAssetMutation(c.config, OpUpdate)
	return &AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetClient) UpdateOne(a *Asset) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(a))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetClient) UpdateOneID(id int) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAssetID(id))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Asset.
func (c *AssetClient) Delete() *AssetDelete {
	mutation := newAssetMutation(c.config, OpDelete)
	return &AssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetClient) DeleteOne(a *Asset) *AssetDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetClient) DeleteOneID(id int) *AssetDeleteOne {
	builder := c.Delete().Where(asset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetDeleteOne{builder}
}

// Query returns a query builder for Asset.
func (c *AssetClient) Query() *AssetQuery {
	return &AssetQuery{
		config: c.config,
	}
}

// Get returns a Asset entity by its id.
func (c *AssetClient) Get(ctx context.Context, id int) (*Asset, error) {
	return c.Query().Where(asset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetClient) GetX(ctx context.Context, id int) *Asset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPkg queries the pkg edge of a Asset.
func (c *AssetClient) QueryPkg(a *Asset) *WorkloadPkgQuery {
	query := &WorkloadPkgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(workloadpkg.Table, workloadpkg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asset.PkgTable, asset.PkgColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetClient) Hooks() []Hook {
	return c.hooks.Asset
}

// WorkloadPkgClient is a client for the WorkloadPkg schema.
type WorkloadPkgClient struct {
	config
}

// NewWorkloadPkgClient returns a client for the WorkloadPkg from the given config.
func NewWorkloadPkgClient(c config) *WorkloadPkgClient {
	return &WorkloadPkgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadpkg.Hooks(f(g(h())))`.
func (c *WorkloadPkgClient) Use(hooks ...Hook) {
	c.hooks.WorkloadPkg = append(c.hooks.WorkloadPkg, hooks...)
}

// Create returns a create builder for WorkloadPkg.
func (c *WorkloadPkgClient) Create() *WorkloadPkgCreate {
	mutation := newWorkloadPkgMutation(c.config, OpCreate)
	return &WorkloadPkgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadPkg entities.
func (c *WorkloadPkgClient) CreateBulk(builders ...*WorkloadPkgCreate) *WorkloadPkgCreateBulk {
	return &WorkloadPkgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadPkg.
func (c *WorkloadPkgClient) Update() *WorkloadPkgUpdate {
	mutation := newWorkloadPkgMutation(c.config, OpUpdate)
	return &WorkloadPkgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadPkgClient) UpdateOne(wp *WorkloadPkg) *WorkloadPkgUpdateOne {
	mutation := newWorkloadPkgMutation(c.config, OpUpdateOne, withWorkloadPkg(wp))
	return &WorkloadPkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadPkgClient) UpdateOneID(id int) *WorkloadPkgUpdateOne {
	mutation := newWorkloadPkgMutation(c.config, OpUpdateOne, withWorkloadPkgID(id))
	return &WorkloadPkgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadPkg.
func (c *WorkloadPkgClient) Delete() *WorkloadPkgDelete {
	mutation := newWorkloadPkgMutation(c.config, OpDelete)
	return &WorkloadPkgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkloadPkgClient) DeleteOne(wp *WorkloadPkg) *WorkloadPkgDeleteOne {
	return c.DeleteOneID(wp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkloadPkgClient) DeleteOneID(id int) *WorkloadPkgDeleteOne {
	builder := c.Delete().Where(workloadpkg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadPkgDeleteOne{builder}
}

// Query returns a query builder for WorkloadPkg.
func (c *WorkloadPkgClient) Query() *WorkloadPkgQuery {
	return &WorkloadPkgQuery{
		config: c.config,
	}
}

// Get returns a WorkloadPkg entity by its id.
func (c *WorkloadPkgClient) Get(ctx context.Context, id int) (*WorkloadPkg, error) {
	return c.Query().Where(workloadpkg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadPkgClient) GetX(ctx context.Context, id int) *WorkloadPkg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssets queries the assets edge of a WorkloadPkg.
func (c *WorkloadPkgClient) QueryAssets(wp *WorkloadPkg) *AssetQuery {
	query := &AssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadpkg.Table, workloadpkg.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workloadpkg.AssetsTable, workloadpkg.AssetsColumn),
		)
		fromV = sqlgraph.Neighbors(wp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadPkgClient) Hooks() []Hook {
	return c.hooks.WorkloadPkg
}
