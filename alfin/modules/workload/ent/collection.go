// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkloadQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return w
}

func (w *WorkloadQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadQuery {
	return w
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wf *WorkloadFeatureQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadFeatureQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wf = wf.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wf
}

func (wf *WorkloadFeatureQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadFeatureQuery {
	return wf
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wfa *WorkloadFeatureApplQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadFeatureApplQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wfa = wfa.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wfa
}

func (wfa *WorkloadFeatureApplQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadFeatureApplQuery {
	return wfa
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wfat *WorkloadFeatureApplTypeQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadFeatureApplTypeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wfat = wfat.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wfat
}

func (wfat *WorkloadFeatureApplTypeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadFeatureApplTypeQuery {
	return wfat
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wi *WorkloadItemQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wi = wi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wi
}

func (wi *WorkloadItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadItemQuery {
	return wi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ws *WorkloadStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ws = ws.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ws
}

func (ws *WorkloadStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadStatusQuery {
	return ws
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wt *WorkloadTypeQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkloadTypeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wt
}

func (wt *WorkloadTypeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkloadTypeQuery {
	return wt
}
