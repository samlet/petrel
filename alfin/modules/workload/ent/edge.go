// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (w *Workload) WorkloadType(ctx context.Context) (*WorkloadType, error) {
	result, err := w.Edges.WorkloadTypeOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWorkloadType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workload) WorkloadFeatureAppls(ctx context.Context) ([]*WorkloadFeatureAppl, error) {
	result, err := w.Edges.WorkloadFeatureApplsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWorkloadFeatureAppls().All(ctx)
	}
	return result, err
}

func (w *Workload) WorkloadItems(ctx context.Context) ([]*WorkloadItem, error) {
	result, err := w.Edges.WorkloadItemsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWorkloadItems().All(ctx)
	}
	return result, err
}

func (w *Workload) WorkloadStatuses(ctx context.Context) ([]*WorkloadStatus, error) {
	result, err := w.Edges.WorkloadStatusesOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWorkloadStatuses().All(ctx)
	}
	return result, err
}

func (wf *WorkloadFeature) WorkloadFeatureAppls(ctx context.Context) ([]*WorkloadFeatureAppl, error) {
	result, err := wf.Edges.WorkloadFeatureApplsOrErr()
	if IsNotLoaded(err) {
		result, err = wf.QueryWorkloadFeatureAppls().All(ctx)
	}
	return result, err
}

func (wfa *WorkloadFeatureAppl) Workload(ctx context.Context) (*Workload, error) {
	result, err := wfa.Edges.WorkloadOrErr()
	if IsNotLoaded(err) {
		result, err = wfa.QueryWorkload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wfa *WorkloadFeatureAppl) WorkloadFeature(ctx context.Context) (*WorkloadFeature, error) {
	result, err := wfa.Edges.WorkloadFeatureOrErr()
	if IsNotLoaded(err) {
		result, err = wfa.QueryWorkloadFeature().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wfa *WorkloadFeatureAppl) WorkloadFeatureApplType(ctx context.Context) (*WorkloadFeatureApplType, error) {
	result, err := wfa.Edges.WorkloadFeatureApplTypeOrErr()
	if IsNotLoaded(err) {
		result, err = wfa.QueryWorkloadFeatureApplType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wfat *WorkloadFeatureApplType) Parent(ctx context.Context) (*WorkloadFeatureApplType, error) {
	result, err := wfat.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = wfat.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wfat *WorkloadFeatureApplType) Children(ctx context.Context) ([]*WorkloadFeatureApplType, error) {
	result, err := wfat.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = wfat.QueryChildren().All(ctx)
	}
	return result, err
}

func (wfat *WorkloadFeatureApplType) WorkloadFeatureAppls(ctx context.Context) ([]*WorkloadFeatureAppl, error) {
	result, err := wfat.Edges.WorkloadFeatureApplsOrErr()
	if IsNotLoaded(err) {
		result, err = wfat.QueryWorkloadFeatureAppls().All(ctx)
	}
	return result, err
}

func (wi *WorkloadItem) Workload(ctx context.Context) (*Workload, error) {
	result, err := wi.Edges.WorkloadOrErr()
	if IsNotLoaded(err) {
		result, err = wi.QueryWorkload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ws *WorkloadStatus) Workload(ctx context.Context) (*Workload, error) {
	result, err := ws.Edges.WorkloadOrErr()
	if IsNotLoaded(err) {
		result, err = ws.QueryWorkload().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wt *WorkloadType) Parent(ctx context.Context) (*WorkloadType, error) {
	result, err := wt.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = wt.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wt *WorkloadType) Children(ctx context.Context) ([]*WorkloadType, error) {
	result, err := wt.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = wt.QueryChildren().All(ctx)
	}
	return result, err
}

func (wt *WorkloadType) Workloads(ctx context.Context) ([]*Workload, error) {
	result, err := wt.Edges.WorkloadsOrErr()
	if IsNotLoaded(err) {
		result, err = wt.QueryWorkloads().All(ctx)
	}
	return result, err
}
