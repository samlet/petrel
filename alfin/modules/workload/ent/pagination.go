// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloaditem"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadstatus"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// WorkloadEdge is the edge representation of Workload.
type WorkloadEdge struct {
	Node   *Workload `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// WorkloadConnection is the connection containing edges to Workload.
type WorkloadConnection struct {
	Edges      []*WorkloadEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// WorkloadPaginateOption enables pagination customization.
type WorkloadPaginateOption func(*workloadPager) error

// WithWorkloadOrder configures pagination ordering.
func WithWorkloadOrder(order *WorkloadOrder) WorkloadPaginateOption {
	if order == nil {
		order = DefaultWorkloadOrder
	}
	o := *order
	return func(pager *workloadPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadFilter configures pagination filter.
func WithWorkloadFilter(filter func(*WorkloadQuery) (*WorkloadQuery, error)) WorkloadPaginateOption {
	return func(pager *workloadPager) error {
		if filter == nil {
			return errors.New("WorkloadQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadPager struct {
	order  *WorkloadOrder
	filter func(*WorkloadQuery) (*WorkloadQuery, error)
}

func newWorkloadPager(opts []WorkloadPaginateOption) (*workloadPager, error) {
	pager := &workloadPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadOrder
	}
	return pager, nil
}

func (p *workloadPager) applyFilter(query *WorkloadQuery) (*WorkloadQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadPager) toCursor(w *Workload) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *workloadPager) applyCursors(query *WorkloadQuery, after, before *Cursor) *WorkloadQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadPager) applyOrder(query *WorkloadQuery, reverse bool) *WorkloadQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Workload.
func (w *WorkloadQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadPaginateOption,
) (*WorkloadConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadPager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WorkloadConnection{Edges: []*WorkloadEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Workload
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Workload {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Workload {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadOrderField defines the ordering field of Workload.
type WorkloadOrderField struct {
	field    string
	toCursor func(*Workload) Cursor
}

// WorkloadOrder defines the ordering of Workload.
type WorkloadOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *WorkloadOrderField `json:"field"`
}

// DefaultWorkloadOrder is the default ordering of Workload.
var DefaultWorkloadOrder = &WorkloadOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadOrderField{
		field: workload.FieldID,
		toCursor: func(w *Workload) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Workload into WorkloadEdge.
func (w *Workload) ToEdge(order *WorkloadOrder) *WorkloadEdge {
	if order == nil {
		order = DefaultWorkloadOrder
	}
	return &WorkloadEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}

// WorkloadFeatureEdge is the edge representation of WorkloadFeature.
type WorkloadFeatureEdge struct {
	Node   *WorkloadFeature `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// WorkloadFeatureConnection is the connection containing edges to WorkloadFeature.
type WorkloadFeatureConnection struct {
	Edges      []*WorkloadFeatureEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// WorkloadFeaturePaginateOption enables pagination customization.
type WorkloadFeaturePaginateOption func(*workloadFeaturePager) error

// WithWorkloadFeatureOrder configures pagination ordering.
func WithWorkloadFeatureOrder(order *WorkloadFeatureOrder) WorkloadFeaturePaginateOption {
	if order == nil {
		order = DefaultWorkloadFeatureOrder
	}
	o := *order
	return func(pager *workloadFeaturePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadFeatureOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadFeatureFilter configures pagination filter.
func WithWorkloadFeatureFilter(filter func(*WorkloadFeatureQuery) (*WorkloadFeatureQuery, error)) WorkloadFeaturePaginateOption {
	return func(pager *workloadFeaturePager) error {
		if filter == nil {
			return errors.New("WorkloadFeatureQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadFeaturePager struct {
	order  *WorkloadFeatureOrder
	filter func(*WorkloadFeatureQuery) (*WorkloadFeatureQuery, error)
}

func newWorkloadFeaturePager(opts []WorkloadFeaturePaginateOption) (*workloadFeaturePager, error) {
	pager := &workloadFeaturePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadFeatureOrder
	}
	return pager, nil
}

func (p *workloadFeaturePager) applyFilter(query *WorkloadFeatureQuery) (*WorkloadFeatureQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadFeaturePager) toCursor(wf *WorkloadFeature) Cursor {
	return p.order.Field.toCursor(wf)
}

func (p *workloadFeaturePager) applyCursors(query *WorkloadFeatureQuery, after, before *Cursor) *WorkloadFeatureQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadFeatureOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadFeaturePager) applyOrder(query *WorkloadFeatureQuery, reverse bool) *WorkloadFeatureQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadFeatureOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadFeatureOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadFeature.
func (wf *WorkloadFeatureQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadFeaturePaginateOption,
) (*WorkloadFeatureConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadFeaturePager(opts)
	if err != nil {
		return nil, err
	}

	if wf, err = pager.applyFilter(wf); err != nil {
		return nil, err
	}

	conn := &WorkloadFeatureConnection{Edges: []*WorkloadFeatureEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wf.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wf.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wf = pager.applyCursors(wf, after, before)
	wf = pager.applyOrder(wf, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wf = wf.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wf = wf.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wf.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadFeature
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadFeature {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadFeature {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadFeatureEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadFeatureEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadFeatureOrderField defines the ordering field of WorkloadFeature.
type WorkloadFeatureOrderField struct {
	field    string
	toCursor func(*WorkloadFeature) Cursor
}

// WorkloadFeatureOrder defines the ordering of WorkloadFeature.
type WorkloadFeatureOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *WorkloadFeatureOrderField `json:"field"`
}

// DefaultWorkloadFeatureOrder is the default ordering of WorkloadFeature.
var DefaultWorkloadFeatureOrder = &WorkloadFeatureOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadFeatureOrderField{
		field: workloadfeature.FieldID,
		toCursor: func(wf *WorkloadFeature) Cursor {
			return Cursor{ID: wf.ID}
		},
	},
}

// ToEdge converts WorkloadFeature into WorkloadFeatureEdge.
func (wf *WorkloadFeature) ToEdge(order *WorkloadFeatureOrder) *WorkloadFeatureEdge {
	if order == nil {
		order = DefaultWorkloadFeatureOrder
	}
	return &WorkloadFeatureEdge{
		Node:   wf,
		Cursor: order.Field.toCursor(wf),
	}
}

// WorkloadFeatureApplEdge is the edge representation of WorkloadFeatureAppl.
type WorkloadFeatureApplEdge struct {
	Node   *WorkloadFeatureAppl `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// WorkloadFeatureApplConnection is the connection containing edges to WorkloadFeatureAppl.
type WorkloadFeatureApplConnection struct {
	Edges      []*WorkloadFeatureApplEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

// WorkloadFeatureApplPaginateOption enables pagination customization.
type WorkloadFeatureApplPaginateOption func(*workloadFeatureApplPager) error

// WithWorkloadFeatureApplOrder configures pagination ordering.
func WithWorkloadFeatureApplOrder(order *WorkloadFeatureApplOrder) WorkloadFeatureApplPaginateOption {
	if order == nil {
		order = DefaultWorkloadFeatureApplOrder
	}
	o := *order
	return func(pager *workloadFeatureApplPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadFeatureApplOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadFeatureApplFilter configures pagination filter.
func WithWorkloadFeatureApplFilter(filter func(*WorkloadFeatureApplQuery) (*WorkloadFeatureApplQuery, error)) WorkloadFeatureApplPaginateOption {
	return func(pager *workloadFeatureApplPager) error {
		if filter == nil {
			return errors.New("WorkloadFeatureApplQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadFeatureApplPager struct {
	order  *WorkloadFeatureApplOrder
	filter func(*WorkloadFeatureApplQuery) (*WorkloadFeatureApplQuery, error)
}

func newWorkloadFeatureApplPager(opts []WorkloadFeatureApplPaginateOption) (*workloadFeatureApplPager, error) {
	pager := &workloadFeatureApplPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadFeatureApplOrder
	}
	return pager, nil
}

func (p *workloadFeatureApplPager) applyFilter(query *WorkloadFeatureApplQuery) (*WorkloadFeatureApplQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadFeatureApplPager) toCursor(wfa *WorkloadFeatureAppl) Cursor {
	return p.order.Field.toCursor(wfa)
}

func (p *workloadFeatureApplPager) applyCursors(query *WorkloadFeatureApplQuery, after, before *Cursor) *WorkloadFeatureApplQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadFeatureApplOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadFeatureApplPager) applyOrder(query *WorkloadFeatureApplQuery, reverse bool) *WorkloadFeatureApplQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadFeatureApplOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadFeatureApplOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadFeatureAppl.
func (wfa *WorkloadFeatureApplQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadFeatureApplPaginateOption,
) (*WorkloadFeatureApplConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadFeatureApplPager(opts)
	if err != nil {
		return nil, err
	}

	if wfa, err = pager.applyFilter(wfa); err != nil {
		return nil, err
	}

	conn := &WorkloadFeatureApplConnection{Edges: []*WorkloadFeatureApplEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wfa.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wfa.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wfa = pager.applyCursors(wfa, after, before)
	wfa = pager.applyOrder(wfa, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wfa = wfa.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wfa = wfa.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wfa.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadFeatureAppl
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadFeatureAppl {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadFeatureAppl {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadFeatureApplEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadFeatureApplEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadFeatureApplOrderField defines the ordering field of WorkloadFeatureAppl.
type WorkloadFeatureApplOrderField struct {
	field    string
	toCursor func(*WorkloadFeatureAppl) Cursor
}

// WorkloadFeatureApplOrder defines the ordering of WorkloadFeatureAppl.
type WorkloadFeatureApplOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *WorkloadFeatureApplOrderField `json:"field"`
}

// DefaultWorkloadFeatureApplOrder is the default ordering of WorkloadFeatureAppl.
var DefaultWorkloadFeatureApplOrder = &WorkloadFeatureApplOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadFeatureApplOrderField{
		field: workloadfeatureappl.FieldID,
		toCursor: func(wfa *WorkloadFeatureAppl) Cursor {
			return Cursor{ID: wfa.ID}
		},
	},
}

// ToEdge converts WorkloadFeatureAppl into WorkloadFeatureApplEdge.
func (wfa *WorkloadFeatureAppl) ToEdge(order *WorkloadFeatureApplOrder) *WorkloadFeatureApplEdge {
	if order == nil {
		order = DefaultWorkloadFeatureApplOrder
	}
	return &WorkloadFeatureApplEdge{
		Node:   wfa,
		Cursor: order.Field.toCursor(wfa),
	}
}

// WorkloadFeatureApplTypeEdge is the edge representation of WorkloadFeatureApplType.
type WorkloadFeatureApplTypeEdge struct {
	Node   *WorkloadFeatureApplType `json:"node"`
	Cursor Cursor                   `json:"cursor"`
}

// WorkloadFeatureApplTypeConnection is the connection containing edges to WorkloadFeatureApplType.
type WorkloadFeatureApplTypeConnection struct {
	Edges      []*WorkloadFeatureApplTypeEdge `json:"edges"`
	PageInfo   PageInfo                       `json:"pageInfo"`
	TotalCount int                            `json:"totalCount"`
}

// WorkloadFeatureApplTypePaginateOption enables pagination customization.
type WorkloadFeatureApplTypePaginateOption func(*workloadFeatureApplTypePager) error

// WithWorkloadFeatureApplTypeOrder configures pagination ordering.
func WithWorkloadFeatureApplTypeOrder(order *WorkloadFeatureApplTypeOrder) WorkloadFeatureApplTypePaginateOption {
	if order == nil {
		order = DefaultWorkloadFeatureApplTypeOrder
	}
	o := *order
	return func(pager *workloadFeatureApplTypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadFeatureApplTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadFeatureApplTypeFilter configures pagination filter.
func WithWorkloadFeatureApplTypeFilter(filter func(*WorkloadFeatureApplTypeQuery) (*WorkloadFeatureApplTypeQuery, error)) WorkloadFeatureApplTypePaginateOption {
	return func(pager *workloadFeatureApplTypePager) error {
		if filter == nil {
			return errors.New("WorkloadFeatureApplTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadFeatureApplTypePager struct {
	order  *WorkloadFeatureApplTypeOrder
	filter func(*WorkloadFeatureApplTypeQuery) (*WorkloadFeatureApplTypeQuery, error)
}

func newWorkloadFeatureApplTypePager(opts []WorkloadFeatureApplTypePaginateOption) (*workloadFeatureApplTypePager, error) {
	pager := &workloadFeatureApplTypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadFeatureApplTypeOrder
	}
	return pager, nil
}

func (p *workloadFeatureApplTypePager) applyFilter(query *WorkloadFeatureApplTypeQuery) (*WorkloadFeatureApplTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadFeatureApplTypePager) toCursor(wfat *WorkloadFeatureApplType) Cursor {
	return p.order.Field.toCursor(wfat)
}

func (p *workloadFeatureApplTypePager) applyCursors(query *WorkloadFeatureApplTypeQuery, after, before *Cursor) *WorkloadFeatureApplTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadFeatureApplTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadFeatureApplTypePager) applyOrder(query *WorkloadFeatureApplTypeQuery, reverse bool) *WorkloadFeatureApplTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadFeatureApplTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadFeatureApplTypeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadFeatureApplType.
func (wfat *WorkloadFeatureApplTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadFeatureApplTypePaginateOption,
) (*WorkloadFeatureApplTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadFeatureApplTypePager(opts)
	if err != nil {
		return nil, err
	}

	if wfat, err = pager.applyFilter(wfat); err != nil {
		return nil, err
	}

	conn := &WorkloadFeatureApplTypeConnection{Edges: []*WorkloadFeatureApplTypeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wfat.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wfat.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wfat = pager.applyCursors(wfat, after, before)
	wfat = pager.applyOrder(wfat, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wfat = wfat.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wfat = wfat.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wfat.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadFeatureApplType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadFeatureApplType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadFeatureApplType {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadFeatureApplTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadFeatureApplTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadFeatureApplTypeOrderField defines the ordering field of WorkloadFeatureApplType.
type WorkloadFeatureApplTypeOrderField struct {
	field    string
	toCursor func(*WorkloadFeatureApplType) Cursor
}

// WorkloadFeatureApplTypeOrder defines the ordering of WorkloadFeatureApplType.
type WorkloadFeatureApplTypeOrder struct {
	Direction OrderDirection                     `json:"direction"`
	Field     *WorkloadFeatureApplTypeOrderField `json:"field"`
}

// DefaultWorkloadFeatureApplTypeOrder is the default ordering of WorkloadFeatureApplType.
var DefaultWorkloadFeatureApplTypeOrder = &WorkloadFeatureApplTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadFeatureApplTypeOrderField{
		field: workloadfeatureappltype.FieldID,
		toCursor: func(wfat *WorkloadFeatureApplType) Cursor {
			return Cursor{ID: wfat.ID}
		},
	},
}

// ToEdge converts WorkloadFeatureApplType into WorkloadFeatureApplTypeEdge.
func (wfat *WorkloadFeatureApplType) ToEdge(order *WorkloadFeatureApplTypeOrder) *WorkloadFeatureApplTypeEdge {
	if order == nil {
		order = DefaultWorkloadFeatureApplTypeOrder
	}
	return &WorkloadFeatureApplTypeEdge{
		Node:   wfat,
		Cursor: order.Field.toCursor(wfat),
	}
}

// WorkloadItemEdge is the edge representation of WorkloadItem.
type WorkloadItemEdge struct {
	Node   *WorkloadItem `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// WorkloadItemConnection is the connection containing edges to WorkloadItem.
type WorkloadItemConnection struct {
	Edges      []*WorkloadItemEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// WorkloadItemPaginateOption enables pagination customization.
type WorkloadItemPaginateOption func(*workloadItemPager) error

// WithWorkloadItemOrder configures pagination ordering.
func WithWorkloadItemOrder(order *WorkloadItemOrder) WorkloadItemPaginateOption {
	if order == nil {
		order = DefaultWorkloadItemOrder
	}
	o := *order
	return func(pager *workloadItemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadItemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadItemFilter configures pagination filter.
func WithWorkloadItemFilter(filter func(*WorkloadItemQuery) (*WorkloadItemQuery, error)) WorkloadItemPaginateOption {
	return func(pager *workloadItemPager) error {
		if filter == nil {
			return errors.New("WorkloadItemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadItemPager struct {
	order  *WorkloadItemOrder
	filter func(*WorkloadItemQuery) (*WorkloadItemQuery, error)
}

func newWorkloadItemPager(opts []WorkloadItemPaginateOption) (*workloadItemPager, error) {
	pager := &workloadItemPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadItemOrder
	}
	return pager, nil
}

func (p *workloadItemPager) applyFilter(query *WorkloadItemQuery) (*WorkloadItemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadItemPager) toCursor(wi *WorkloadItem) Cursor {
	return p.order.Field.toCursor(wi)
}

func (p *workloadItemPager) applyCursors(query *WorkloadItemQuery, after, before *Cursor) *WorkloadItemQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadItemOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadItemPager) applyOrder(query *WorkloadItemQuery, reverse bool) *WorkloadItemQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadItemOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadItemOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadItem.
func (wi *WorkloadItemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadItemPaginateOption,
) (*WorkloadItemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadItemPager(opts)
	if err != nil {
		return nil, err
	}

	if wi, err = pager.applyFilter(wi); err != nil {
		return nil, err
	}

	conn := &WorkloadItemConnection{Edges: []*WorkloadItemEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wi = pager.applyCursors(wi, after, before)
	wi = pager.applyOrder(wi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wi = wi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wi = wi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadItem
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadItem {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadItem {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadItemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadItemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadItemOrderField defines the ordering field of WorkloadItem.
type WorkloadItemOrderField struct {
	field    string
	toCursor func(*WorkloadItem) Cursor
}

// WorkloadItemOrder defines the ordering of WorkloadItem.
type WorkloadItemOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *WorkloadItemOrderField `json:"field"`
}

// DefaultWorkloadItemOrder is the default ordering of WorkloadItem.
var DefaultWorkloadItemOrder = &WorkloadItemOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadItemOrderField{
		field: workloaditem.FieldID,
		toCursor: func(wi *WorkloadItem) Cursor {
			return Cursor{ID: wi.ID}
		},
	},
}

// ToEdge converts WorkloadItem into WorkloadItemEdge.
func (wi *WorkloadItem) ToEdge(order *WorkloadItemOrder) *WorkloadItemEdge {
	if order == nil {
		order = DefaultWorkloadItemOrder
	}
	return &WorkloadItemEdge{
		Node:   wi,
		Cursor: order.Field.toCursor(wi),
	}
}

// WorkloadStatusEdge is the edge representation of WorkloadStatus.
type WorkloadStatusEdge struct {
	Node   *WorkloadStatus `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// WorkloadStatusConnection is the connection containing edges to WorkloadStatus.
type WorkloadStatusConnection struct {
	Edges      []*WorkloadStatusEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

// WorkloadStatusPaginateOption enables pagination customization.
type WorkloadStatusPaginateOption func(*workloadStatusPager) error

// WithWorkloadStatusOrder configures pagination ordering.
func WithWorkloadStatusOrder(order *WorkloadStatusOrder) WorkloadStatusPaginateOption {
	if order == nil {
		order = DefaultWorkloadStatusOrder
	}
	o := *order
	return func(pager *workloadStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadStatusFilter configures pagination filter.
func WithWorkloadStatusFilter(filter func(*WorkloadStatusQuery) (*WorkloadStatusQuery, error)) WorkloadStatusPaginateOption {
	return func(pager *workloadStatusPager) error {
		if filter == nil {
			return errors.New("WorkloadStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadStatusPager struct {
	order  *WorkloadStatusOrder
	filter func(*WorkloadStatusQuery) (*WorkloadStatusQuery, error)
}

func newWorkloadStatusPager(opts []WorkloadStatusPaginateOption) (*workloadStatusPager, error) {
	pager := &workloadStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadStatusOrder
	}
	return pager, nil
}

func (p *workloadStatusPager) applyFilter(query *WorkloadStatusQuery) (*WorkloadStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadStatusPager) toCursor(ws *WorkloadStatus) Cursor {
	return p.order.Field.toCursor(ws)
}

func (p *workloadStatusPager) applyCursors(query *WorkloadStatusQuery, after, before *Cursor) *WorkloadStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadStatusPager) applyOrder(query *WorkloadStatusQuery, reverse bool) *WorkloadStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadStatus.
func (ws *WorkloadStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadStatusPaginateOption,
) (*WorkloadStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if ws, err = pager.applyFilter(ws); err != nil {
		return nil, err
	}

	conn := &WorkloadStatusConnection{Edges: []*WorkloadStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ws.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ws.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ws = pager.applyCursors(ws, after, before)
	ws = pager.applyOrder(ws, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ws = ws.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ws = ws.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ws.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadStatusOrderField defines the ordering field of WorkloadStatus.
type WorkloadStatusOrderField struct {
	field    string
	toCursor func(*WorkloadStatus) Cursor
}

// WorkloadStatusOrder defines the ordering of WorkloadStatus.
type WorkloadStatusOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *WorkloadStatusOrderField `json:"field"`
}

// DefaultWorkloadStatusOrder is the default ordering of WorkloadStatus.
var DefaultWorkloadStatusOrder = &WorkloadStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadStatusOrderField{
		field: workloadstatus.FieldID,
		toCursor: func(ws *WorkloadStatus) Cursor {
			return Cursor{ID: ws.ID}
		},
	},
}

// ToEdge converts WorkloadStatus into WorkloadStatusEdge.
func (ws *WorkloadStatus) ToEdge(order *WorkloadStatusOrder) *WorkloadStatusEdge {
	if order == nil {
		order = DefaultWorkloadStatusOrder
	}
	return &WorkloadStatusEdge{
		Node:   ws,
		Cursor: order.Field.toCursor(ws),
	}
}

// WorkloadTypeEdge is the edge representation of WorkloadType.
type WorkloadTypeEdge struct {
	Node   *WorkloadType `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// WorkloadTypeConnection is the connection containing edges to WorkloadType.
type WorkloadTypeConnection struct {
	Edges      []*WorkloadTypeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// WorkloadTypePaginateOption enables pagination customization.
type WorkloadTypePaginateOption func(*workloadTypePager) error

// WithWorkloadTypeOrder configures pagination ordering.
func WithWorkloadTypeOrder(order *WorkloadTypeOrder) WorkloadTypePaginateOption {
	if order == nil {
		order = DefaultWorkloadTypeOrder
	}
	o := *order
	return func(pager *workloadTypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkloadTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkloadTypeFilter configures pagination filter.
func WithWorkloadTypeFilter(filter func(*WorkloadTypeQuery) (*WorkloadTypeQuery, error)) WorkloadTypePaginateOption {
	return func(pager *workloadTypePager) error {
		if filter == nil {
			return errors.New("WorkloadTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workloadTypePager struct {
	order  *WorkloadTypeOrder
	filter func(*WorkloadTypeQuery) (*WorkloadTypeQuery, error)
}

func newWorkloadTypePager(opts []WorkloadTypePaginateOption) (*workloadTypePager, error) {
	pager := &workloadTypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkloadTypeOrder
	}
	return pager, nil
}

func (p *workloadTypePager) applyFilter(query *WorkloadTypeQuery) (*WorkloadTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workloadTypePager) toCursor(wt *WorkloadType) Cursor {
	return p.order.Field.toCursor(wt)
}

func (p *workloadTypePager) applyCursors(query *WorkloadTypeQuery, after, before *Cursor) *WorkloadTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkloadTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workloadTypePager) applyOrder(query *WorkloadTypeQuery, reverse bool) *WorkloadTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkloadTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkloadTypeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkloadType.
func (wt *WorkloadTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkloadTypePaginateOption,
) (*WorkloadTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkloadTypePager(opts)
	if err != nil {
		return nil, err
	}

	if wt, err = pager.applyFilter(wt); err != nil {
		return nil, err
	}

	conn := &WorkloadTypeConnection{Edges: []*WorkloadTypeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wt = pager.applyCursors(wt, after, before)
	wt = pager.applyOrder(wt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wt = wt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkloadType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkloadType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkloadType {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkloadTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkloadTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkloadTypeOrderField defines the ordering field of WorkloadType.
type WorkloadTypeOrderField struct {
	field    string
	toCursor func(*WorkloadType) Cursor
}

// WorkloadTypeOrder defines the ordering of WorkloadType.
type WorkloadTypeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *WorkloadTypeOrderField `json:"field"`
}

// DefaultWorkloadTypeOrder is the default ordering of WorkloadType.
var DefaultWorkloadTypeOrder = &WorkloadTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkloadTypeOrderField{
		field: workloadtype.FieldID,
		toCursor: func(wt *WorkloadType) Cursor {
			return Cursor{ID: wt.ID}
		},
	},
}

// ToEdge converts WorkloadType into WorkloadTypeEdge.
func (wt *WorkloadType) ToEdge(order *WorkloadTypeOrder) *WorkloadTypeEdge {
	if order == nil {
		order = DefaultWorkloadTypeOrder
	}
	return &WorkloadTypeEdge{
		Node:   wt,
		Cursor: order.Field.toCursor(wt),
	}
}
