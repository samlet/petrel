// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"
)

// Workload is the model entity for the Workload schema.
type Workload struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int `json:"status_id,omitempty"`
	// WorkloadName holds the value of the "workload_name" field.
	WorkloadName string `json:"workload_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LongDescription holds the value of the "long_description" field.
	LongDescription string `json:"long_description,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// WorkloadSize holds the value of the "workload_size" field.
	WorkloadSize int `json:"workload_size,omitempty"`
	// WorkloadDate holds the value of the "workload_date" field.
	WorkloadDate time.Time `json:"workload_date,omitempty"`
	// AnotherDate holds the value of the "another_date" field.
	AnotherDate time.Time `json:"another_date,omitempty"`
	// AnotherText holds the value of the "another_text" field.
	AnotherText string `json:"another_text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadQuery when eager-loading is set.
	Edges                   WorkloadEdges `json:"edges"`
	workload_type_workloads *int
}

// WorkloadEdges holds the relations/edges for other nodes in the graph.
type WorkloadEdges struct {
	// WorkloadType holds the value of the workload_type edge.
	WorkloadType *WorkloadType `json:"workload_type,omitempty"`
	// WorkloadFeatureAppls holds the value of the workload_feature_appls edge.
	WorkloadFeatureAppls []*WorkloadFeatureAppl `json:"workload_feature_appls,omitempty"`
	// WorkloadItems holds the value of the workload_items edge.
	WorkloadItems []*WorkloadItem `json:"workload_items,omitempty"`
	// WorkloadStatuses holds the value of the workload_statuses edge.
	WorkloadStatuses []*WorkloadStatus `json:"workload_statuses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WorkloadTypeOrErr returns the WorkloadType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkloadEdges) WorkloadTypeOrErr() (*WorkloadType, error) {
	if e.loadedTypes[0] {
		if e.WorkloadType == nil {
			// The edge workload_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workloadtype.Label}
		}
		return e.WorkloadType, nil
	}
	return nil, &NotLoadedError{edge: "workload_type"}
}

// WorkloadFeatureApplsOrErr returns the WorkloadFeatureAppls value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadEdges) WorkloadFeatureApplsOrErr() ([]*WorkloadFeatureAppl, error) {
	if e.loadedTypes[1] {
		return e.WorkloadFeatureAppls, nil
	}
	return nil, &NotLoadedError{edge: "workload_feature_appls"}
}

// WorkloadItemsOrErr returns the WorkloadItems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadEdges) WorkloadItemsOrErr() ([]*WorkloadItem, error) {
	if e.loadedTypes[2] {
		return e.WorkloadItems, nil
	}
	return nil, &NotLoadedError{edge: "workload_items"}
}

// WorkloadStatusesOrErr returns the WorkloadStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadEdges) WorkloadStatusesOrErr() ([]*WorkloadStatus, error) {
	if e.loadedTypes[3] {
		return e.WorkloadStatuses, nil
	}
	return nil, &NotLoadedError{edge: "workload_statuses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workload) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workload.FieldID, workload.FieldStatusID, workload.FieldWorkloadSize:
			values[i] = new(sql.NullInt64)
		case workload.FieldWorkloadName, workload.FieldDescription, workload.FieldLongDescription, workload.FieldComments, workload.FieldAnotherText:
			values[i] = new(sql.NullString)
		case workload.FieldCreateTime, workload.FieldUpdateTime, workload.FieldWorkloadDate, workload.FieldAnotherDate:
			values[i] = new(sql.NullTime)
		case workload.ForeignKeys[0]: // workload_type_workloads
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Workload", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workload fields.
func (w *Workload) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workload.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case workload.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				w.CreateTime = value.Time
			}
		case workload.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				w.UpdateTime = value.Time
			}
		case workload.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				w.StatusID = int(value.Int64)
			}
		case workload.FieldWorkloadName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workload_name", values[i])
			} else if value.Valid {
				w.WorkloadName = value.String
			}
		case workload.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case workload.FieldLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field long_description", values[i])
			} else if value.Valid {
				w.LongDescription = value.String
			}
		case workload.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				w.Comments = value.String
			}
		case workload.FieldWorkloadSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workload_size", values[i])
			} else if value.Valid {
				w.WorkloadSize = int(value.Int64)
			}
		case workload.FieldWorkloadDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field workload_date", values[i])
			} else if value.Valid {
				w.WorkloadDate = value.Time
			}
		case workload.FieldAnotherDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field another_date", values[i])
			} else if value.Valid {
				w.AnotherDate = value.Time
			}
		case workload.FieldAnotherText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field another_text", values[i])
			} else if value.Valid {
				w.AnotherText = value.String
			}
		case workload.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workload_type_workloads", value)
			} else if value.Valid {
				w.workload_type_workloads = new(int)
				*w.workload_type_workloads = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWorkloadType queries the "workload_type" edge of the Workload entity.
func (w *Workload) QueryWorkloadType() *WorkloadTypeQuery {
	return (&WorkloadClient{config: w.config}).QueryWorkloadType(w)
}

// QueryWorkloadFeatureAppls queries the "workload_feature_appls" edge of the Workload entity.
func (w *Workload) QueryWorkloadFeatureAppls() *WorkloadFeatureApplQuery {
	return (&WorkloadClient{config: w.config}).QueryWorkloadFeatureAppls(w)
}

// QueryWorkloadItems queries the "workload_items" edge of the Workload entity.
func (w *Workload) QueryWorkloadItems() *WorkloadItemQuery {
	return (&WorkloadClient{config: w.config}).QueryWorkloadItems(w)
}

// QueryWorkloadStatuses queries the "workload_statuses" edge of the Workload entity.
func (w *Workload) QueryWorkloadStatuses() *WorkloadStatusQuery {
	return (&WorkloadClient{config: w.config}).QueryWorkloadStatuses(w)
}

// Update returns a builder for updating this Workload.
// Note that you need to call Workload.Unwrap() before calling this method if this Workload
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workload) Update() *WorkloadUpdateOne {
	return (&WorkloadClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Workload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workload) Unwrap() *Workload {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workload is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workload) String() string {
	var builder strings.Builder
	builder.WriteString("Workload(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(w.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(w.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", status_id=")
	builder.WriteString(fmt.Sprintf("%v", w.StatusID))
	builder.WriteString(", workload_name=")
	builder.WriteString(w.WorkloadName)
	builder.WriteString(", description=")
	builder.WriteString(w.Description)
	builder.WriteString(", long_description=")
	builder.WriteString(w.LongDescription)
	builder.WriteString(", comments=")
	builder.WriteString(w.Comments)
	builder.WriteString(", workload_size=")
	builder.WriteString(fmt.Sprintf("%v", w.WorkloadSize))
	builder.WriteString(", workload_date=")
	builder.WriteString(w.WorkloadDate.Format(time.ANSIC))
	builder.WriteString(", another_date=")
	builder.WriteString(w.AnotherDate.Format(time.ANSIC))
	builder.WriteString(", another_text=")
	builder.WriteString(w.AnotherText)
	builder.WriteByte(')')
	return builder.String()
}

// Workloads is a parsable slice of Workload.
type Workloads []*Workload

func (w Workloads) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
