// Code generated by entc, DO NOT EDIT.

package workload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// WorkloadName applies equality check predicate on the "workload_name" field. It's identical to WorkloadNameEQ.
func WorkloadName(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// LongDescription applies equality check predicate on the "long_description" field. It's identical to LongDescriptionEQ.
func LongDescription(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// WorkloadSize applies equality check predicate on the "workload_size" field. It's identical to WorkloadSizeEQ.
func WorkloadSize(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadDate applies equality check predicate on the "workload_date" field. It's identical to WorkloadDateEQ.
func WorkloadDate(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadDate), v))
	})
}

// AnotherDate applies equality check predicate on the "another_date" field. It's identical to AnotherDateEQ.
func AnotherDate(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnotherDate), v))
	})
}

// AnotherText applies equality check predicate on the "another_text" field. It's identical to AnotherTextEQ.
func AnotherText(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnotherText), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// WorkloadNameEQ applies the EQ predicate on the "workload_name" field.
func WorkloadNameEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameNEQ applies the NEQ predicate on the "workload_name" field.
func WorkloadNameNEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameIn applies the In predicate on the "workload_name" field.
func WorkloadNameIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkloadName), v...))
	})
}

// WorkloadNameNotIn applies the NotIn predicate on the "workload_name" field.
func WorkloadNameNotIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkloadName), v...))
	})
}

// WorkloadNameGT applies the GT predicate on the "workload_name" field.
func WorkloadNameGT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameGTE applies the GTE predicate on the "workload_name" field.
func WorkloadNameGTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameLT applies the LT predicate on the "workload_name" field.
func WorkloadNameLT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameLTE applies the LTE predicate on the "workload_name" field.
func WorkloadNameLTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameContains applies the Contains predicate on the "workload_name" field.
func WorkloadNameContains(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameHasPrefix applies the HasPrefix predicate on the "workload_name" field.
func WorkloadNameHasPrefix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameHasSuffix applies the HasSuffix predicate on the "workload_name" field.
func WorkloadNameHasSuffix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameIsNil applies the IsNil predicate on the "workload_name" field.
func WorkloadNameIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkloadName)))
	})
}

// WorkloadNameNotNil applies the NotNil predicate on the "workload_name" field.
func WorkloadNameNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkloadName)))
	})
}

// WorkloadNameEqualFold applies the EqualFold predicate on the "workload_name" field.
func WorkloadNameEqualFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWorkloadName), v))
	})
}

// WorkloadNameContainsFold applies the ContainsFold predicate on the "workload_name" field.
func WorkloadNameContainsFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWorkloadName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LongDescriptionEQ applies the EQ predicate on the "long_description" field.
func LongDescriptionEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionNEQ applies the NEQ predicate on the "long_description" field.
func LongDescriptionNEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIn applies the In predicate on the "long_description" field.
func LongDescriptionIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionNotIn applies the NotIn predicate on the "long_description" field.
func LongDescriptionNotIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongDescription), v...))
	})
}

// LongDescriptionGT applies the GT predicate on the "long_description" field.
func LongDescriptionGT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionGTE applies the GTE predicate on the "long_description" field.
func LongDescriptionGTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLT applies the LT predicate on the "long_description" field.
func LongDescriptionLT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionLTE applies the LTE predicate on the "long_description" field.
func LongDescriptionLTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContains applies the Contains predicate on the "long_description" field.
func LongDescriptionContains(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasPrefix applies the HasPrefix predicate on the "long_description" field.
func LongDescriptionHasPrefix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionHasSuffix applies the HasSuffix predicate on the "long_description" field.
func LongDescriptionHasSuffix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionIsNil applies the IsNil predicate on the "long_description" field.
func LongDescriptionIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionNotNil applies the NotNil predicate on the "long_description" field.
func LongDescriptionNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLongDescription)))
	})
}

// LongDescriptionEqualFold applies the EqualFold predicate on the "long_description" field.
func LongDescriptionEqualFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongDescription), v))
	})
}

// LongDescriptionContainsFold applies the ContainsFold predicate on the "long_description" field.
func LongDescriptionContainsFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongDescription), v))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// WorkloadSizeEQ applies the EQ predicate on the "workload_size" field.
func WorkloadSizeEQ(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeNEQ applies the NEQ predicate on the "workload_size" field.
func WorkloadSizeNEQ(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeIn applies the In predicate on the "workload_size" field.
func WorkloadSizeIn(vs ...int) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkloadSize), v...))
	})
}

// WorkloadSizeNotIn applies the NotIn predicate on the "workload_size" field.
func WorkloadSizeNotIn(vs ...int) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkloadSize), v...))
	})
}

// WorkloadSizeGT applies the GT predicate on the "workload_size" field.
func WorkloadSizeGT(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeGTE applies the GTE predicate on the "workload_size" field.
func WorkloadSizeGTE(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeLT applies the LT predicate on the "workload_size" field.
func WorkloadSizeLT(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeLTE applies the LTE predicate on the "workload_size" field.
func WorkloadSizeLTE(v int) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkloadSize), v))
	})
}

// WorkloadSizeIsNil applies the IsNil predicate on the "workload_size" field.
func WorkloadSizeIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkloadSize)))
	})
}

// WorkloadSizeNotNil applies the NotNil predicate on the "workload_size" field.
func WorkloadSizeNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkloadSize)))
	})
}

// WorkloadDateEQ applies the EQ predicate on the "workload_date" field.
func WorkloadDateEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateNEQ applies the NEQ predicate on the "workload_date" field.
func WorkloadDateNEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateIn applies the In predicate on the "workload_date" field.
func WorkloadDateIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkloadDate), v...))
	})
}

// WorkloadDateNotIn applies the NotIn predicate on the "workload_date" field.
func WorkloadDateNotIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkloadDate), v...))
	})
}

// WorkloadDateGT applies the GT predicate on the "workload_date" field.
func WorkloadDateGT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateGTE applies the GTE predicate on the "workload_date" field.
func WorkloadDateGTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateLT applies the LT predicate on the "workload_date" field.
func WorkloadDateLT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateLTE applies the LTE predicate on the "workload_date" field.
func WorkloadDateLTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkloadDate), v))
	})
}

// WorkloadDateIsNil applies the IsNil predicate on the "workload_date" field.
func WorkloadDateIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWorkloadDate)))
	})
}

// WorkloadDateNotNil applies the NotNil predicate on the "workload_date" field.
func WorkloadDateNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWorkloadDate)))
	})
}

// AnotherDateEQ applies the EQ predicate on the "another_date" field.
func AnotherDateEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateNEQ applies the NEQ predicate on the "another_date" field.
func AnotherDateNEQ(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateIn applies the In predicate on the "another_date" field.
func AnotherDateIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnotherDate), v...))
	})
}

// AnotherDateNotIn applies the NotIn predicate on the "another_date" field.
func AnotherDateNotIn(vs ...time.Time) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnotherDate), v...))
	})
}

// AnotherDateGT applies the GT predicate on the "another_date" field.
func AnotherDateGT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateGTE applies the GTE predicate on the "another_date" field.
func AnotherDateGTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateLT applies the LT predicate on the "another_date" field.
func AnotherDateLT(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateLTE applies the LTE predicate on the "another_date" field.
func AnotherDateLTE(v time.Time) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnotherDate), v))
	})
}

// AnotherDateIsNil applies the IsNil predicate on the "another_date" field.
func AnotherDateIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnotherDate)))
	})
}

// AnotherDateNotNil applies the NotNil predicate on the "another_date" field.
func AnotherDateNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnotherDate)))
	})
}

// AnotherTextEQ applies the EQ predicate on the "another_text" field.
func AnotherTextEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnotherText), v))
	})
}

// AnotherTextNEQ applies the NEQ predicate on the "another_text" field.
func AnotherTextNEQ(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnotherText), v))
	})
}

// AnotherTextIn applies the In predicate on the "another_text" field.
func AnotherTextIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnotherText), v...))
	})
}

// AnotherTextNotIn applies the NotIn predicate on the "another_text" field.
func AnotherTextNotIn(vs ...string) predicate.Workload {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Workload(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnotherText), v...))
	})
}

// AnotherTextGT applies the GT predicate on the "another_text" field.
func AnotherTextGT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnotherText), v))
	})
}

// AnotherTextGTE applies the GTE predicate on the "another_text" field.
func AnotherTextGTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnotherText), v))
	})
}

// AnotherTextLT applies the LT predicate on the "another_text" field.
func AnotherTextLT(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnotherText), v))
	})
}

// AnotherTextLTE applies the LTE predicate on the "another_text" field.
func AnotherTextLTE(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnotherText), v))
	})
}

// AnotherTextContains applies the Contains predicate on the "another_text" field.
func AnotherTextContains(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnotherText), v))
	})
}

// AnotherTextHasPrefix applies the HasPrefix predicate on the "another_text" field.
func AnotherTextHasPrefix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnotherText), v))
	})
}

// AnotherTextHasSuffix applies the HasSuffix predicate on the "another_text" field.
func AnotherTextHasSuffix(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnotherText), v))
	})
}

// AnotherTextIsNil applies the IsNil predicate on the "another_text" field.
func AnotherTextIsNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnotherText)))
	})
}

// AnotherTextNotNil applies the NotNil predicate on the "another_text" field.
func AnotherTextNotNil() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnotherText)))
	})
}

// AnotherTextEqualFold applies the EqualFold predicate on the "another_text" field.
func AnotherTextEqualFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnotherText), v))
	})
}

// AnotherTextContainsFold applies the ContainsFold predicate on the "another_text" field.
func AnotherTextContainsFold(v string) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnotherText), v))
	})
}

// HasWorkloadType applies the HasEdge predicate on the "workload_type" edge.
func HasWorkloadType() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkloadTypeTable, WorkloadTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadTypeWith applies the HasEdge predicate on the "workload_type" edge with a given conditions (other predicates).
func HasWorkloadTypeWith(preds ...predicate.WorkloadType) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkloadTypeTable, WorkloadTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkloadFeatureAppls applies the HasEdge predicate on the "workload_feature_appls" edge.
func HasWorkloadFeatureAppls() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadFeatureApplsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadFeatureApplsTable, WorkloadFeatureApplsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadFeatureApplsWith applies the HasEdge predicate on the "workload_feature_appls" edge with a given conditions (other predicates).
func HasWorkloadFeatureApplsWith(preds ...predicate.WorkloadFeatureAppl) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadFeatureApplsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadFeatureApplsTable, WorkloadFeatureApplsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkloadItems applies the HasEdge predicate on the "workload_items" edge.
func HasWorkloadItems() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadItemsTable, WorkloadItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadItemsWith applies the HasEdge predicate on the "workload_items" edge with a given conditions (other predicates).
func HasWorkloadItemsWith(preds ...predicate.WorkloadItem) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadItemsTable, WorkloadItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkloadStatuses applies the HasEdge predicate on the "workload_statuses" edge.
func HasWorkloadStatuses() predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadStatusesTable, WorkloadStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadStatusesWith applies the HasEdge predicate on the "workload_statuses" edge with a given conditions (other predicates).
func HasWorkloadStatusesWith(preds ...predicate.WorkloadStatus) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkloadStatusesTable, WorkloadStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workload) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workload) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workload) predicate.Workload {
	return predicate.Workload(func(s *sql.Selector) {
		p(s.Not())
	})
}
