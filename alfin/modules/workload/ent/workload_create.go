// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloaditem"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadstatus"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"
)

// WorkloadCreate is the builder for creating a Workload entity.
type WorkloadCreate struct {
	config
	mutation *WorkloadMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wc *WorkloadCreate) SetCreateTime(t time.Time) *WorkloadCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableCreateTime(t *time.Time) *WorkloadCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetUpdateTime sets the "update_time" field.
func (wc *WorkloadCreate) SetUpdateTime(t time.Time) *WorkloadCreate {
	wc.mutation.SetUpdateTime(t)
	return wc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableUpdateTime(t *time.Time) *WorkloadCreate {
	if t != nil {
		wc.SetUpdateTime(*t)
	}
	return wc
}

// SetStatusID sets the "status_id" field.
func (wc *WorkloadCreate) SetStatusID(i int) *WorkloadCreate {
	wc.mutation.SetStatusID(i)
	return wc
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableStatusID(i *int) *WorkloadCreate {
	if i != nil {
		wc.SetStatusID(*i)
	}
	return wc
}

// SetWorkloadName sets the "workload_name" field.
func (wc *WorkloadCreate) SetWorkloadName(s string) *WorkloadCreate {
	wc.mutation.SetWorkloadName(s)
	return wc
}

// SetNillableWorkloadName sets the "workload_name" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableWorkloadName(s *string) *WorkloadCreate {
	if s != nil {
		wc.SetWorkloadName(*s)
	}
	return wc
}

// SetDescription sets the "description" field.
func (wc *WorkloadCreate) SetDescription(s string) *WorkloadCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableDescription(s *string) *WorkloadCreate {
	if s != nil {
		wc.SetDescription(*s)
	}
	return wc
}

// SetLongDescription sets the "long_description" field.
func (wc *WorkloadCreate) SetLongDescription(s string) *WorkloadCreate {
	wc.mutation.SetLongDescription(s)
	return wc
}

// SetNillableLongDescription sets the "long_description" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableLongDescription(s *string) *WorkloadCreate {
	if s != nil {
		wc.SetLongDescription(*s)
	}
	return wc
}

// SetComments sets the "comments" field.
func (wc *WorkloadCreate) SetComments(s string) *WorkloadCreate {
	wc.mutation.SetComments(s)
	return wc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableComments(s *string) *WorkloadCreate {
	if s != nil {
		wc.SetComments(*s)
	}
	return wc
}

// SetWorkloadSize sets the "workload_size" field.
func (wc *WorkloadCreate) SetWorkloadSize(i int) *WorkloadCreate {
	wc.mutation.SetWorkloadSize(i)
	return wc
}

// SetNillableWorkloadSize sets the "workload_size" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableWorkloadSize(i *int) *WorkloadCreate {
	if i != nil {
		wc.SetWorkloadSize(*i)
	}
	return wc
}

// SetWorkloadDate sets the "workload_date" field.
func (wc *WorkloadCreate) SetWorkloadDate(t time.Time) *WorkloadCreate {
	wc.mutation.SetWorkloadDate(t)
	return wc
}

// SetNillableWorkloadDate sets the "workload_date" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableWorkloadDate(t *time.Time) *WorkloadCreate {
	if t != nil {
		wc.SetWorkloadDate(*t)
	}
	return wc
}

// SetAnotherDate sets the "another_date" field.
func (wc *WorkloadCreate) SetAnotherDate(t time.Time) *WorkloadCreate {
	wc.mutation.SetAnotherDate(t)
	return wc
}

// SetNillableAnotherDate sets the "another_date" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableAnotherDate(t *time.Time) *WorkloadCreate {
	if t != nil {
		wc.SetAnotherDate(*t)
	}
	return wc
}

// SetAnotherText sets the "another_text" field.
func (wc *WorkloadCreate) SetAnotherText(s string) *WorkloadCreate {
	wc.mutation.SetAnotherText(s)
	return wc
}

// SetNillableAnotherText sets the "another_text" field if the given value is not nil.
func (wc *WorkloadCreate) SetNillableAnotherText(s *string) *WorkloadCreate {
	if s != nil {
		wc.SetAnotherText(*s)
	}
	return wc
}

// SetWorkloadTypeID sets the "workload_type" edge to the WorkloadType entity by ID.
func (wc *WorkloadCreate) SetWorkloadTypeID(id int) *WorkloadCreate {
	wc.mutation.SetWorkloadTypeID(id)
	return wc
}

// SetNillableWorkloadTypeID sets the "workload_type" edge to the WorkloadType entity by ID if the given value is not nil.
func (wc *WorkloadCreate) SetNillableWorkloadTypeID(id *int) *WorkloadCreate {
	if id != nil {
		wc = wc.SetWorkloadTypeID(*id)
	}
	return wc
}

// SetWorkloadType sets the "workload_type" edge to the WorkloadType entity.
func (wc *WorkloadCreate) SetWorkloadType(w *WorkloadType) *WorkloadCreate {
	return wc.SetWorkloadTypeID(w.ID)
}

// AddWorkloadFeatureApplIDs adds the "workload_feature_appls" edge to the WorkloadFeatureAppl entity by IDs.
func (wc *WorkloadCreate) AddWorkloadFeatureApplIDs(ids ...int) *WorkloadCreate {
	wc.mutation.AddWorkloadFeatureApplIDs(ids...)
	return wc
}

// AddWorkloadFeatureAppls adds the "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wc *WorkloadCreate) AddWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkloadFeatureApplIDs(ids...)
}

// AddWorkloadItemIDs adds the "workload_items" edge to the WorkloadItem entity by IDs.
func (wc *WorkloadCreate) AddWorkloadItemIDs(ids ...int) *WorkloadCreate {
	wc.mutation.AddWorkloadItemIDs(ids...)
	return wc
}

// AddWorkloadItems adds the "workload_items" edges to the WorkloadItem entity.
func (wc *WorkloadCreate) AddWorkloadItems(w ...*WorkloadItem) *WorkloadCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkloadItemIDs(ids...)
}

// AddWorkloadStatusIDs adds the "workload_statuses" edge to the WorkloadStatus entity by IDs.
func (wc *WorkloadCreate) AddWorkloadStatusIDs(ids ...int) *WorkloadCreate {
	wc.mutation.AddWorkloadStatusIDs(ids...)
	return wc
}

// AddWorkloadStatuses adds the "workload_statuses" edges to the WorkloadStatus entity.
func (wc *WorkloadCreate) AddWorkloadStatuses(w ...*WorkloadStatus) *WorkloadCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkloadStatusIDs(ids...)
}

// Mutation returns the WorkloadMutation object of the builder.
func (wc *WorkloadCreate) Mutation() *WorkloadMutation {
	return wc.mutation
}

// Save creates the Workload in the database.
func (wc *WorkloadCreate) Save(ctx context.Context) (*Workload, error) {
	var (
		err  error
		node *Workload
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkloadCreate) SaveX(ctx context.Context) *Workload {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wc *WorkloadCreate) defaults() {
	if _, ok := wc.mutation.CreateTime(); !ok {
		v := workload.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		v := workload.DefaultUpdateTime()
		wc.mutation.SetUpdateTime(v)
	}
	if _, ok := wc.mutation.WorkloadDate(); !ok {
		v := workload.DefaultWorkloadDate()
		wc.mutation.SetWorkloadDate(v)
	}
	if _, ok := wc.mutation.AnotherDate(); !ok {
		v := workload.DefaultAnotherDate()
		wc.mutation.SetAnotherDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkloadCreate) check() error {
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (wc *WorkloadCreate) sqlSave(ctx context.Context) (*Workload, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WorkloadCreate) createSpec() (*Workload, *sqlgraph.CreateSpec) {
	var (
		_node = &Workload{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workload.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workload.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workload.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workload.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wc.mutation.StatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workload.FieldStatusID,
		})
		_node.StatusID = value
	}
	if value, ok := wc.mutation.WorkloadName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workload.FieldWorkloadName,
		})
		_node.WorkloadName = value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workload.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := wc.mutation.LongDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workload.FieldLongDescription,
		})
		_node.LongDescription = value
	}
	if value, ok := wc.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workload.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := wc.mutation.WorkloadSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workload.FieldWorkloadSize,
		})
		_node.WorkloadSize = value
	}
	if value, ok := wc.mutation.WorkloadDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workload.FieldWorkloadDate,
		})
		_node.WorkloadDate = value
	}
	if value, ok := wc.mutation.AnotherDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workload.FieldAnotherDate,
		})
		_node.AnotherDate = value
	}
	if value, ok := wc.mutation.AnotherText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workload.FieldAnotherText,
		})
		_node.AnotherText = value
	}
	if nodes := wc.mutation.WorkloadTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workload.WorkloadTypeTable,
			Columns: []string{workload.WorkloadTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_type_workloads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkloadFeatureApplsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workload.WorkloadFeatureApplsTable,
			Columns: []string{workload.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkloadItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workload.WorkloadItemsTable,
			Columns: []string{workload.WorkloadItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloaditem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkloadStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workload.WorkloadStatusesTable,
			Columns: []string{workload.WorkloadStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkloadCreateBulk is the builder for creating many Workload entities in bulk.
type WorkloadCreateBulk struct {
	config
	builders []*WorkloadCreate
}

// Save creates the Workload entities in the database.
func (wcb *WorkloadCreateBulk) Save(ctx context.Context) ([]*Workload, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workload, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkloadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkloadCreateBulk) SaveX(ctx context.Context) []*Workload {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
