// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
)

// WorkloadFeature is the model entity for the WorkloadFeature schema.
type WorkloadFeature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// FeatureSourceEnumID holds the value of the "feature_source_enum_id" field.
	FeatureSourceEnumID int `json:"feature_source_enum_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadFeatureQuery when eager-loading is set.
	Edges WorkloadFeatureEdges `json:"edges"`
}

// WorkloadFeatureEdges holds the relations/edges for other nodes in the graph.
type WorkloadFeatureEdges struct {
	// WorkloadFeatureAppls holds the value of the workload_feature_appls edge.
	WorkloadFeatureAppls []*WorkloadFeatureAppl `json:"workload_feature_appls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkloadFeatureApplsOrErr returns the WorkloadFeatureAppls value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadFeatureEdges) WorkloadFeatureApplsOrErr() ([]*WorkloadFeatureAppl, error) {
	if e.loadedTypes[0] {
		return e.WorkloadFeatureAppls, nil
	}
	return nil, &NotLoadedError{edge: "workload_feature_appls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkloadFeature) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workloadfeature.FieldID, workloadfeature.FieldFeatureSourceEnumID:
			values[i] = new(sql.NullInt64)
		case workloadfeature.FieldDescription:
			values[i] = new(sql.NullString)
		case workloadfeature.FieldCreateTime, workloadfeature.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkloadFeature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkloadFeature fields.
func (wf *WorkloadFeature) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workloadfeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wf.ID = int(value.Int64)
		case workloadfeature.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wf.CreateTime = value.Time
			}
		case workloadfeature.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wf.UpdateTime = value.Time
			}
		case workloadfeature.FieldFeatureSourceEnumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_source_enum_id", values[i])
			} else if value.Valid {
				wf.FeatureSourceEnumID = int(value.Int64)
			}
		case workloadfeature.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wf.Description = value.String
			}
		}
	}
	return nil
}

// QueryWorkloadFeatureAppls queries the "workload_feature_appls" edge of the WorkloadFeature entity.
func (wf *WorkloadFeature) QueryWorkloadFeatureAppls() *WorkloadFeatureApplQuery {
	return (&WorkloadFeatureClient{config: wf.config}).QueryWorkloadFeatureAppls(wf)
}

// Update returns a builder for updating this WorkloadFeature.
// Note that you need to call WorkloadFeature.Unwrap() before calling this method if this WorkloadFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (wf *WorkloadFeature) Update() *WorkloadFeatureUpdateOne {
	return (&WorkloadFeatureClient{config: wf.config}).UpdateOne(wf)
}

// Unwrap unwraps the WorkloadFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wf *WorkloadFeature) Unwrap() *WorkloadFeature {
	tx, ok := wf.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkloadFeature is not a transactional entity")
	}
	wf.config.driver = tx.drv
	return wf
}

// String implements the fmt.Stringer.
func (wf *WorkloadFeature) String() string {
	var builder strings.Builder
	builder.WriteString("WorkloadFeature(")
	builder.WriteString(fmt.Sprintf("id=%v", wf.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(wf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(wf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", feature_source_enum_id=")
	builder.WriteString(fmt.Sprintf("%v", wf.FeatureSourceEnumID))
	builder.WriteString(", description=")
	builder.WriteString(wf.Description)
	builder.WriteByte(')')
	return builder.String()
}

// WorkloadFeatures is a parsable slice of WorkloadFeature.
type WorkloadFeatures []*WorkloadFeature

func (wf WorkloadFeatures) config(cfg config) {
	for _i := range wf {
		wf[_i].config = cfg
	}
}
