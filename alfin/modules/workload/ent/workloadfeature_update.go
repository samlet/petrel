// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
)

// WorkloadFeatureUpdate is the builder for updating WorkloadFeature entities.
type WorkloadFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadFeatureMutation
}

// Where adds a new predicate for the WorkloadFeatureUpdate builder.
func (wfu *WorkloadFeatureUpdate) Where(ps ...predicate.WorkloadFeature) *WorkloadFeatureUpdate {
	wfu.mutation.predicates = append(wfu.mutation.predicates, ps...)
	return wfu
}

// SetFeatureSourceEnumID sets the "feature_source_enum_id" field.
func (wfu *WorkloadFeatureUpdate) SetFeatureSourceEnumID(i int) *WorkloadFeatureUpdate {
	wfu.mutation.ResetFeatureSourceEnumID()
	wfu.mutation.SetFeatureSourceEnumID(i)
	return wfu
}

// SetNillableFeatureSourceEnumID sets the "feature_source_enum_id" field if the given value is not nil.
func (wfu *WorkloadFeatureUpdate) SetNillableFeatureSourceEnumID(i *int) *WorkloadFeatureUpdate {
	if i != nil {
		wfu.SetFeatureSourceEnumID(*i)
	}
	return wfu
}

// AddFeatureSourceEnumID adds i to the "feature_source_enum_id" field.
func (wfu *WorkloadFeatureUpdate) AddFeatureSourceEnumID(i int) *WorkloadFeatureUpdate {
	wfu.mutation.AddFeatureSourceEnumID(i)
	return wfu
}

// ClearFeatureSourceEnumID clears the value of the "feature_source_enum_id" field.
func (wfu *WorkloadFeatureUpdate) ClearFeatureSourceEnumID() *WorkloadFeatureUpdate {
	wfu.mutation.ClearFeatureSourceEnumID()
	return wfu
}

// SetDescription sets the "description" field.
func (wfu *WorkloadFeatureUpdate) SetDescription(s string) *WorkloadFeatureUpdate {
	wfu.mutation.SetDescription(s)
	return wfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wfu *WorkloadFeatureUpdate) SetNillableDescription(s *string) *WorkloadFeatureUpdate {
	if s != nil {
		wfu.SetDescription(*s)
	}
	return wfu
}

// ClearDescription clears the value of the "description" field.
func (wfu *WorkloadFeatureUpdate) ClearDescription() *WorkloadFeatureUpdate {
	wfu.mutation.ClearDescription()
	return wfu
}

// AddWorkloadFeatureApplIDs adds the "workload_feature_appls" edge to the WorkloadFeatureAppl entity by IDs.
func (wfu *WorkloadFeatureUpdate) AddWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureUpdate {
	wfu.mutation.AddWorkloadFeatureApplIDs(ids...)
	return wfu
}

// AddWorkloadFeatureAppls adds the "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfu *WorkloadFeatureUpdate) AddWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfu.AddWorkloadFeatureApplIDs(ids...)
}

// Mutation returns the WorkloadFeatureMutation object of the builder.
func (wfu *WorkloadFeatureUpdate) Mutation() *WorkloadFeatureMutation {
	return wfu.mutation
}

// ClearWorkloadFeatureAppls clears all "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfu *WorkloadFeatureUpdate) ClearWorkloadFeatureAppls() *WorkloadFeatureUpdate {
	wfu.mutation.ClearWorkloadFeatureAppls()
	return wfu
}

// RemoveWorkloadFeatureApplIDs removes the "workload_feature_appls" edge to WorkloadFeatureAppl entities by IDs.
func (wfu *WorkloadFeatureUpdate) RemoveWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureUpdate {
	wfu.mutation.RemoveWorkloadFeatureApplIDs(ids...)
	return wfu
}

// RemoveWorkloadFeatureAppls removes "workload_feature_appls" edges to WorkloadFeatureAppl entities.
func (wfu *WorkloadFeatureUpdate) RemoveWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfu.RemoveWorkloadFeatureApplIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wfu *WorkloadFeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wfu.defaults()
	if len(wfu.hooks) == 0 {
		affected, err = wfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfu.mutation = mutation
			affected, err = wfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wfu.hooks) - 1; i >= 0; i-- {
			mut = wfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfu *WorkloadFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := wfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wfu *WorkloadFeatureUpdate) Exec(ctx context.Context) error {
	_, err := wfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfu *WorkloadFeatureUpdate) ExecX(ctx context.Context) {
	if err := wfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfu *WorkloadFeatureUpdate) defaults() {
	if _, ok := wfu.mutation.UpdateTime(); !ok {
		v := workloadfeature.UpdateDefaultUpdateTime()
		wfu.mutation.SetUpdateTime(v)
	}
}

func (wfu *WorkloadFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeature.Table,
			Columns: workloadfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeature.FieldID,
			},
		},
	}
	if ps := wfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeature.FieldUpdateTime,
		})
	}
	if value, ok := wfu.mutation.FeatureSourceEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if value, ok := wfu.mutation.AddedFeatureSourceEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if wfu.mutation.FeatureSourceEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if value, ok := wfu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadfeature.FieldDescription,
		})
	}
	if wfu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadfeature.FieldDescription,
		})
	}
	if wfu.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfu.mutation.RemovedWorkloadFeatureApplsIDs(); len(nodes) > 0 && !wfu.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfu.mutation.WorkloadFeatureApplsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadFeatureUpdateOne is the builder for updating a single WorkloadFeature entity.
type WorkloadFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadFeatureMutation
}

// SetFeatureSourceEnumID sets the "feature_source_enum_id" field.
func (wfuo *WorkloadFeatureUpdateOne) SetFeatureSourceEnumID(i int) *WorkloadFeatureUpdateOne {
	wfuo.mutation.ResetFeatureSourceEnumID()
	wfuo.mutation.SetFeatureSourceEnumID(i)
	return wfuo
}

// SetNillableFeatureSourceEnumID sets the "feature_source_enum_id" field if the given value is not nil.
func (wfuo *WorkloadFeatureUpdateOne) SetNillableFeatureSourceEnumID(i *int) *WorkloadFeatureUpdateOne {
	if i != nil {
		wfuo.SetFeatureSourceEnumID(*i)
	}
	return wfuo
}

// AddFeatureSourceEnumID adds i to the "feature_source_enum_id" field.
func (wfuo *WorkloadFeatureUpdateOne) AddFeatureSourceEnumID(i int) *WorkloadFeatureUpdateOne {
	wfuo.mutation.AddFeatureSourceEnumID(i)
	return wfuo
}

// ClearFeatureSourceEnumID clears the value of the "feature_source_enum_id" field.
func (wfuo *WorkloadFeatureUpdateOne) ClearFeatureSourceEnumID() *WorkloadFeatureUpdateOne {
	wfuo.mutation.ClearFeatureSourceEnumID()
	return wfuo
}

// SetDescription sets the "description" field.
func (wfuo *WorkloadFeatureUpdateOne) SetDescription(s string) *WorkloadFeatureUpdateOne {
	wfuo.mutation.SetDescription(s)
	return wfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wfuo *WorkloadFeatureUpdateOne) SetNillableDescription(s *string) *WorkloadFeatureUpdateOne {
	if s != nil {
		wfuo.SetDescription(*s)
	}
	return wfuo
}

// ClearDescription clears the value of the "description" field.
func (wfuo *WorkloadFeatureUpdateOne) ClearDescription() *WorkloadFeatureUpdateOne {
	wfuo.mutation.ClearDescription()
	return wfuo
}

// AddWorkloadFeatureApplIDs adds the "workload_feature_appls" edge to the WorkloadFeatureAppl entity by IDs.
func (wfuo *WorkloadFeatureUpdateOne) AddWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureUpdateOne {
	wfuo.mutation.AddWorkloadFeatureApplIDs(ids...)
	return wfuo
}

// AddWorkloadFeatureAppls adds the "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfuo *WorkloadFeatureUpdateOne) AddWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfuo.AddWorkloadFeatureApplIDs(ids...)
}

// Mutation returns the WorkloadFeatureMutation object of the builder.
func (wfuo *WorkloadFeatureUpdateOne) Mutation() *WorkloadFeatureMutation {
	return wfuo.mutation
}

// ClearWorkloadFeatureAppls clears all "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfuo *WorkloadFeatureUpdateOne) ClearWorkloadFeatureAppls() *WorkloadFeatureUpdateOne {
	wfuo.mutation.ClearWorkloadFeatureAppls()
	return wfuo
}

// RemoveWorkloadFeatureApplIDs removes the "workload_feature_appls" edge to WorkloadFeatureAppl entities by IDs.
func (wfuo *WorkloadFeatureUpdateOne) RemoveWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureUpdateOne {
	wfuo.mutation.RemoveWorkloadFeatureApplIDs(ids...)
	return wfuo
}

// RemoveWorkloadFeatureAppls removes "workload_feature_appls" edges to WorkloadFeatureAppl entities.
func (wfuo *WorkloadFeatureUpdateOne) RemoveWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfuo.RemoveWorkloadFeatureApplIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wfuo *WorkloadFeatureUpdateOne) Select(field string, fields ...string) *WorkloadFeatureUpdateOne {
	wfuo.fields = append([]string{field}, fields...)
	return wfuo
}

// Save executes the query and returns the updated WorkloadFeature entity.
func (wfuo *WorkloadFeatureUpdateOne) Save(ctx context.Context) (*WorkloadFeature, error) {
	var (
		err  error
		node *WorkloadFeature
	)
	wfuo.defaults()
	if len(wfuo.hooks) == 0 {
		node, err = wfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfuo.mutation = mutation
			node, err = wfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wfuo.hooks) - 1; i >= 0; i-- {
			mut = wfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfuo *WorkloadFeatureUpdateOne) SaveX(ctx context.Context) *WorkloadFeature {
	node, err := wfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wfuo *WorkloadFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := wfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfuo *WorkloadFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := wfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfuo *WorkloadFeatureUpdateOne) defaults() {
	if _, ok := wfuo.mutation.UpdateTime(); !ok {
		v := workloadfeature.UpdateDefaultUpdateTime()
		wfuo.mutation.SetUpdateTime(v)
	}
}

func (wfuo *WorkloadFeatureUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadFeature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeature.Table,
			Columns: workloadfeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeature.FieldID,
			},
		},
	}
	id, ok := wfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadFeature.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadfeature.FieldID)
		for _, f := range fields {
			if !workloadfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeature.FieldUpdateTime,
		})
	}
	if value, ok := wfuo.mutation.FeatureSourceEnumID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if value, ok := wfuo.mutation.AddedFeatureSourceEnumID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if wfuo.mutation.FeatureSourceEnumIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloadfeature.FieldFeatureSourceEnumID,
		})
	}
	if value, ok := wfuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadfeature.FieldDescription,
		})
	}
	if wfuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadfeature.FieldDescription,
		})
	}
	if wfuo.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfuo.mutation.RemovedWorkloadFeatureApplsIDs(); len(nodes) > 0 && !wfuo.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfuo.mutation.WorkloadFeatureApplsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeature.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeature.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadFeature{config: wfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
