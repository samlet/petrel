// Code generated by entc, DO NOT EDIT.

package workloadfeatureappl

import (
	"time"
)

const (
	// Label holds the string label denoting the workloadfeatureappl type in the database.
	Label = "workload_feature_appl"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldThruDate holds the string denoting the thru_date field in the database.
	FieldThruDate = "thru_date"
	// FieldSequenceNum holds the string denoting the sequence_num field in the database.
	FieldSequenceNum = "sequence_num"
	// EdgeWorkload holds the string denoting the workload edge name in mutations.
	EdgeWorkload = "workload"
	// EdgeWorkloadFeature holds the string denoting the workload_feature edge name in mutations.
	EdgeWorkloadFeature = "workload_feature"
	// EdgeWorkloadFeatureApplType holds the string denoting the workload_feature_appl_type edge name in mutations.
	EdgeWorkloadFeatureApplType = "workload_feature_appl_type"
	// Table holds the table name of the workloadfeatureappl in the database.
	Table = "workload_feature_appls"
	// WorkloadTable is the table the holds the workload relation/edge.
	WorkloadTable = "workload_feature_appls"
	// WorkloadInverseTable is the table name for the Workload entity.
	// It exists in this package in order to avoid circular dependency with the "workload" package.
	WorkloadInverseTable = "workloads"
	// WorkloadColumn is the table column denoting the workload relation/edge.
	WorkloadColumn = "workload_workload_feature_appls"
	// WorkloadFeatureTable is the table the holds the workload_feature relation/edge.
	WorkloadFeatureTable = "workload_feature_appls"
	// WorkloadFeatureInverseTable is the table name for the WorkloadFeature entity.
	// It exists in this package in order to avoid circular dependency with the "workloadfeature" package.
	WorkloadFeatureInverseTable = "workload_features"
	// WorkloadFeatureColumn is the table column denoting the workload_feature relation/edge.
	WorkloadFeatureColumn = "workload_feature_workload_feature_appls"
	// WorkloadFeatureApplTypeTable is the table the holds the workload_feature_appl_type relation/edge.
	WorkloadFeatureApplTypeTable = "workload_feature_appls"
	// WorkloadFeatureApplTypeInverseTable is the table name for the WorkloadFeatureApplType entity.
	// It exists in this package in order to avoid circular dependency with the "workloadfeatureappltype" package.
	WorkloadFeatureApplTypeInverseTable = "workload_feature_appl_types"
	// WorkloadFeatureApplTypeColumn is the table column denoting the workload_feature_appl_type relation/edge.
	WorkloadFeatureApplTypeColumn = "workload_feature_appl_type_workload_feature_appls"
)

// Columns holds all SQL columns for workloadfeatureappl fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFromDate,
	FieldThruDate,
	FieldSequenceNum,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workload_feature_appls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workload_workload_feature_appls",
	"workload_feature_workload_feature_appls",
	"workload_feature_appl_type_workload_feature_appls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultFromDate holds the default value on creation for the "from_date" field.
	DefaultFromDate func() time.Time
	// DefaultThruDate holds the default value on creation for the "thru_date" field.
	DefaultThruDate func() time.Time
)
