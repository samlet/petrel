// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
)

// WorkloadFeatureApplCreate is the builder for creating a WorkloadFeatureAppl entity.
type WorkloadFeatureApplCreate struct {
	config
	mutation *WorkloadFeatureApplMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wfac *WorkloadFeatureApplCreate) SetCreateTime(t time.Time) *WorkloadFeatureApplCreate {
	wfac.mutation.SetCreateTime(t)
	return wfac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableCreateTime(t *time.Time) *WorkloadFeatureApplCreate {
	if t != nil {
		wfac.SetCreateTime(*t)
	}
	return wfac
}

// SetUpdateTime sets the "update_time" field.
func (wfac *WorkloadFeatureApplCreate) SetUpdateTime(t time.Time) *WorkloadFeatureApplCreate {
	wfac.mutation.SetUpdateTime(t)
	return wfac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableUpdateTime(t *time.Time) *WorkloadFeatureApplCreate {
	if t != nil {
		wfac.SetUpdateTime(*t)
	}
	return wfac
}

// SetFromDate sets the "from_date" field.
func (wfac *WorkloadFeatureApplCreate) SetFromDate(t time.Time) *WorkloadFeatureApplCreate {
	wfac.mutation.SetFromDate(t)
	return wfac
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableFromDate(t *time.Time) *WorkloadFeatureApplCreate {
	if t != nil {
		wfac.SetFromDate(*t)
	}
	return wfac
}

// SetThruDate sets the "thru_date" field.
func (wfac *WorkloadFeatureApplCreate) SetThruDate(t time.Time) *WorkloadFeatureApplCreate {
	wfac.mutation.SetThruDate(t)
	return wfac
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableThruDate(t *time.Time) *WorkloadFeatureApplCreate {
	if t != nil {
		wfac.SetThruDate(*t)
	}
	return wfac
}

// SetSequenceNum sets the "sequence_num" field.
func (wfac *WorkloadFeatureApplCreate) SetSequenceNum(i int) *WorkloadFeatureApplCreate {
	wfac.mutation.SetSequenceNum(i)
	return wfac
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableSequenceNum(i *int) *WorkloadFeatureApplCreate {
	if i != nil {
		wfac.SetSequenceNum(*i)
	}
	return wfac
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wfac *WorkloadFeatureApplCreate) SetWorkloadID(id int) *WorkloadFeatureApplCreate {
	wfac.mutation.SetWorkloadID(id)
	return wfac
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableWorkloadID(id *int) *WorkloadFeatureApplCreate {
	if id != nil {
		wfac = wfac.SetWorkloadID(*id)
	}
	return wfac
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wfac *WorkloadFeatureApplCreate) SetWorkload(w *Workload) *WorkloadFeatureApplCreate {
	return wfac.SetWorkloadID(w.ID)
}

// SetWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID.
func (wfac *WorkloadFeatureApplCreate) SetWorkloadFeatureID(id int) *WorkloadFeatureApplCreate {
	wfac.mutation.SetWorkloadFeatureID(id)
	return wfac
}

// SetNillableWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableWorkloadFeatureID(id *int) *WorkloadFeatureApplCreate {
	if id != nil {
		wfac = wfac.SetWorkloadFeatureID(*id)
	}
	return wfac
}

// SetWorkloadFeature sets the "workload_feature" edge to the WorkloadFeature entity.
func (wfac *WorkloadFeatureApplCreate) SetWorkloadFeature(w *WorkloadFeature) *WorkloadFeatureApplCreate {
	return wfac.SetWorkloadFeatureID(w.ID)
}

// SetWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID.
func (wfac *WorkloadFeatureApplCreate) SetWorkloadFeatureApplTypeID(id int) *WorkloadFeatureApplCreate {
	wfac.mutation.SetWorkloadFeatureApplTypeID(id)
	return wfac
}

// SetNillableWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID if the given value is not nil.
func (wfac *WorkloadFeatureApplCreate) SetNillableWorkloadFeatureApplTypeID(id *int) *WorkloadFeatureApplCreate {
	if id != nil {
		wfac = wfac.SetWorkloadFeatureApplTypeID(*id)
	}
	return wfac
}

// SetWorkloadFeatureApplType sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity.
func (wfac *WorkloadFeatureApplCreate) SetWorkloadFeatureApplType(w *WorkloadFeatureApplType) *WorkloadFeatureApplCreate {
	return wfac.SetWorkloadFeatureApplTypeID(w.ID)
}

// Mutation returns the WorkloadFeatureApplMutation object of the builder.
func (wfac *WorkloadFeatureApplCreate) Mutation() *WorkloadFeatureApplMutation {
	return wfac.mutation
}

// Save creates the WorkloadFeatureAppl in the database.
func (wfac *WorkloadFeatureApplCreate) Save(ctx context.Context) (*WorkloadFeatureAppl, error) {
	var (
		err  error
		node *WorkloadFeatureAppl
	)
	wfac.defaults()
	if len(wfac.hooks) == 0 {
		if err = wfac.check(); err != nil {
			return nil, err
		}
		node, err = wfac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureApplMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wfac.check(); err != nil {
				return nil, err
			}
			wfac.mutation = mutation
			node, err = wfac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wfac.hooks) - 1; i >= 0; i-- {
			mut = wfac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wfac *WorkloadFeatureApplCreate) SaveX(ctx context.Context) *WorkloadFeatureAppl {
	v, err := wfac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wfac *WorkloadFeatureApplCreate) defaults() {
	if _, ok := wfac.mutation.CreateTime(); !ok {
		v := workloadfeatureappl.DefaultCreateTime()
		wfac.mutation.SetCreateTime(v)
	}
	if _, ok := wfac.mutation.UpdateTime(); !ok {
		v := workloadfeatureappl.DefaultUpdateTime()
		wfac.mutation.SetUpdateTime(v)
	}
	if _, ok := wfac.mutation.FromDate(); !ok {
		v := workloadfeatureappl.DefaultFromDate()
		wfac.mutation.SetFromDate(v)
	}
	if _, ok := wfac.mutation.ThruDate(); !ok {
		v := workloadfeatureappl.DefaultThruDate()
		wfac.mutation.SetThruDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wfac *WorkloadFeatureApplCreate) check() error {
	if _, ok := wfac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wfac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := wfac.mutation.FromDate(); !ok {
		return &ValidationError{Name: "from_date", err: errors.New("ent: missing required field \"from_date\"")}
	}
	return nil
}

func (wfac *WorkloadFeatureApplCreate) sqlSave(ctx context.Context) (*WorkloadFeatureAppl, error) {
	_node, _spec := wfac.createSpec()
	if err := sqlgraph.CreateNode(ctx, wfac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wfac *WorkloadFeatureApplCreate) createSpec() (*WorkloadFeatureAppl, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkloadFeatureAppl{config: wfac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workloadfeatureappl.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeatureappl.FieldID,
			},
		}
	)
	if value, ok := wfac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wfac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wfac.mutation.FromDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldFromDate,
		})
		_node.FromDate = value
	}
	if value, ok := wfac.mutation.ThruDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldThruDate,
		})
		_node.ThruDate = value
	}
	if value, ok := wfac.mutation.SequenceNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
		_node.SequenceNum = value
	}
	if nodes := wfac.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadTable,
			Columns: []string{workloadfeatureappl.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_workload_feature_appls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wfac.mutation.WorkloadFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_feature_workload_feature_appls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wfac.mutation.WorkloadFeatureApplTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureApplTypeTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureApplTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_feature_appl_type_workload_feature_appls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkloadFeatureApplCreateBulk is the builder for creating many WorkloadFeatureAppl entities in bulk.
type WorkloadFeatureApplCreateBulk struct {
	config
	builders []*WorkloadFeatureApplCreate
}

// Save creates the WorkloadFeatureAppl entities in the database.
func (wfacb *WorkloadFeatureApplCreateBulk) Save(ctx context.Context) ([]*WorkloadFeatureAppl, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wfacb.builders))
	nodes := make([]*WorkloadFeatureAppl, len(wfacb.builders))
	mutators := make([]Mutator, len(wfacb.builders))
	for i := range wfacb.builders {
		func(i int, root context.Context) {
			builder := wfacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkloadFeatureApplMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wfacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wfacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wfacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wfacb *WorkloadFeatureApplCreateBulk) SaveX(ctx context.Context) []*WorkloadFeatureAppl {
	v, err := wfacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
