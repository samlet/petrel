// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeature"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
)

// WorkloadFeatureApplUpdate is the builder for updating WorkloadFeatureAppl entities.
type WorkloadFeatureApplUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadFeatureApplMutation
}

// Where adds a new predicate for the WorkloadFeatureApplUpdate builder.
func (wfau *WorkloadFeatureApplUpdate) Where(ps ...predicate.WorkloadFeatureAppl) *WorkloadFeatureApplUpdate {
	wfau.mutation.predicates = append(wfau.mutation.predicates, ps...)
	return wfau
}

// SetFromDate sets the "from_date" field.
func (wfau *WorkloadFeatureApplUpdate) SetFromDate(t time.Time) *WorkloadFeatureApplUpdate {
	wfau.mutation.SetFromDate(t)
	return wfau
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableFromDate(t *time.Time) *WorkloadFeatureApplUpdate {
	if t != nil {
		wfau.SetFromDate(*t)
	}
	return wfau
}

// SetThruDate sets the "thru_date" field.
func (wfau *WorkloadFeatureApplUpdate) SetThruDate(t time.Time) *WorkloadFeatureApplUpdate {
	wfau.mutation.SetThruDate(t)
	return wfau
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableThruDate(t *time.Time) *WorkloadFeatureApplUpdate {
	if t != nil {
		wfau.SetThruDate(*t)
	}
	return wfau
}

// ClearThruDate clears the value of the "thru_date" field.
func (wfau *WorkloadFeatureApplUpdate) ClearThruDate() *WorkloadFeatureApplUpdate {
	wfau.mutation.ClearThruDate()
	return wfau
}

// SetSequenceNum sets the "sequence_num" field.
func (wfau *WorkloadFeatureApplUpdate) SetSequenceNum(i int) *WorkloadFeatureApplUpdate {
	wfau.mutation.ResetSequenceNum()
	wfau.mutation.SetSequenceNum(i)
	return wfau
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableSequenceNum(i *int) *WorkloadFeatureApplUpdate {
	if i != nil {
		wfau.SetSequenceNum(*i)
	}
	return wfau
}

// AddSequenceNum adds i to the "sequence_num" field.
func (wfau *WorkloadFeatureApplUpdate) AddSequenceNum(i int) *WorkloadFeatureApplUpdate {
	wfau.mutation.AddSequenceNum(i)
	return wfau
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (wfau *WorkloadFeatureApplUpdate) ClearSequenceNum() *WorkloadFeatureApplUpdate {
	wfau.mutation.ClearSequenceNum()
	return wfau
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wfau *WorkloadFeatureApplUpdate) SetWorkloadID(id int) *WorkloadFeatureApplUpdate {
	wfau.mutation.SetWorkloadID(id)
	return wfau
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableWorkloadID(id *int) *WorkloadFeatureApplUpdate {
	if id != nil {
		wfau = wfau.SetWorkloadID(*id)
	}
	return wfau
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wfau *WorkloadFeatureApplUpdate) SetWorkload(w *Workload) *WorkloadFeatureApplUpdate {
	return wfau.SetWorkloadID(w.ID)
}

// SetWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID.
func (wfau *WorkloadFeatureApplUpdate) SetWorkloadFeatureID(id int) *WorkloadFeatureApplUpdate {
	wfau.mutation.SetWorkloadFeatureID(id)
	return wfau
}

// SetNillableWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableWorkloadFeatureID(id *int) *WorkloadFeatureApplUpdate {
	if id != nil {
		wfau = wfau.SetWorkloadFeatureID(*id)
	}
	return wfau
}

// SetWorkloadFeature sets the "workload_feature" edge to the WorkloadFeature entity.
func (wfau *WorkloadFeatureApplUpdate) SetWorkloadFeature(w *WorkloadFeature) *WorkloadFeatureApplUpdate {
	return wfau.SetWorkloadFeatureID(w.ID)
}

// SetWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID.
func (wfau *WorkloadFeatureApplUpdate) SetWorkloadFeatureApplTypeID(id int) *WorkloadFeatureApplUpdate {
	wfau.mutation.SetWorkloadFeatureApplTypeID(id)
	return wfau
}

// SetNillableWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID if the given value is not nil.
func (wfau *WorkloadFeatureApplUpdate) SetNillableWorkloadFeatureApplTypeID(id *int) *WorkloadFeatureApplUpdate {
	if id != nil {
		wfau = wfau.SetWorkloadFeatureApplTypeID(*id)
	}
	return wfau
}

// SetWorkloadFeatureApplType sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity.
func (wfau *WorkloadFeatureApplUpdate) SetWorkloadFeatureApplType(w *WorkloadFeatureApplType) *WorkloadFeatureApplUpdate {
	return wfau.SetWorkloadFeatureApplTypeID(w.ID)
}

// Mutation returns the WorkloadFeatureApplMutation object of the builder.
func (wfau *WorkloadFeatureApplUpdate) Mutation() *WorkloadFeatureApplMutation {
	return wfau.mutation
}

// ClearWorkload clears the "workload" edge to the Workload entity.
func (wfau *WorkloadFeatureApplUpdate) ClearWorkload() *WorkloadFeatureApplUpdate {
	wfau.mutation.ClearWorkload()
	return wfau
}

// ClearWorkloadFeature clears the "workload_feature" edge to the WorkloadFeature entity.
func (wfau *WorkloadFeatureApplUpdate) ClearWorkloadFeature() *WorkloadFeatureApplUpdate {
	wfau.mutation.ClearWorkloadFeature()
	return wfau
}

// ClearWorkloadFeatureApplType clears the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity.
func (wfau *WorkloadFeatureApplUpdate) ClearWorkloadFeatureApplType() *WorkloadFeatureApplUpdate {
	wfau.mutation.ClearWorkloadFeatureApplType()
	return wfau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wfau *WorkloadFeatureApplUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wfau.defaults()
	if len(wfau.hooks) == 0 {
		affected, err = wfau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureApplMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfau.mutation = mutation
			affected, err = wfau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wfau.hooks) - 1; i >= 0; i-- {
			mut = wfau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfau *WorkloadFeatureApplUpdate) SaveX(ctx context.Context) int {
	affected, err := wfau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wfau *WorkloadFeatureApplUpdate) Exec(ctx context.Context) error {
	_, err := wfau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfau *WorkloadFeatureApplUpdate) ExecX(ctx context.Context) {
	if err := wfau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfau *WorkloadFeatureApplUpdate) defaults() {
	if _, ok := wfau.mutation.UpdateTime(); !ok {
		v := workloadfeatureappl.UpdateDefaultUpdateTime()
		wfau.mutation.SetUpdateTime(v)
	}
}

func (wfau *WorkloadFeatureApplUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeatureappl.Table,
			Columns: workloadfeatureappl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeatureappl.FieldID,
			},
		},
	}
	if ps := wfau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldUpdateTime,
		})
	}
	if value, ok := wfau.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldFromDate,
		})
	}
	if value, ok := wfau.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldThruDate,
		})
	}
	if wfau.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workloadfeatureappl.FieldThruDate,
		})
	}
	if value, ok := wfau.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if value, ok := wfau.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if wfau.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if wfau.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadTable,
			Columns: []string{workloadfeatureappl.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfau.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadTable,
			Columns: []string{workloadfeatureappl.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfau.mutation.WorkloadFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfau.mutation.WorkloadFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfau.mutation.WorkloadFeatureApplTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureApplTypeTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureApplTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfau.mutation.WorkloadFeatureApplTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureApplTypeTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureApplTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wfau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeatureappl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadFeatureApplUpdateOne is the builder for updating a single WorkloadFeatureAppl entity.
type WorkloadFeatureApplUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadFeatureApplMutation
}

// SetFromDate sets the "from_date" field.
func (wfauo *WorkloadFeatureApplUpdateOne) SetFromDate(t time.Time) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.SetFromDate(t)
	return wfauo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableFromDate(t *time.Time) *WorkloadFeatureApplUpdateOne {
	if t != nil {
		wfauo.SetFromDate(*t)
	}
	return wfauo
}

// SetThruDate sets the "thru_date" field.
func (wfauo *WorkloadFeatureApplUpdateOne) SetThruDate(t time.Time) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.SetThruDate(t)
	return wfauo
}

// SetNillableThruDate sets the "thru_date" field if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableThruDate(t *time.Time) *WorkloadFeatureApplUpdateOne {
	if t != nil {
		wfauo.SetThruDate(*t)
	}
	return wfauo
}

// ClearThruDate clears the value of the "thru_date" field.
func (wfauo *WorkloadFeatureApplUpdateOne) ClearThruDate() *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ClearThruDate()
	return wfauo
}

// SetSequenceNum sets the "sequence_num" field.
func (wfauo *WorkloadFeatureApplUpdateOne) SetSequenceNum(i int) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ResetSequenceNum()
	wfauo.mutation.SetSequenceNum(i)
	return wfauo
}

// SetNillableSequenceNum sets the "sequence_num" field if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableSequenceNum(i *int) *WorkloadFeatureApplUpdateOne {
	if i != nil {
		wfauo.SetSequenceNum(*i)
	}
	return wfauo
}

// AddSequenceNum adds i to the "sequence_num" field.
func (wfauo *WorkloadFeatureApplUpdateOne) AddSequenceNum(i int) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.AddSequenceNum(i)
	return wfauo
}

// ClearSequenceNum clears the value of the "sequence_num" field.
func (wfauo *WorkloadFeatureApplUpdateOne) ClearSequenceNum() *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ClearSequenceNum()
	return wfauo
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkloadID(id int) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.SetWorkloadID(id)
	return wfauo
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableWorkloadID(id *int) *WorkloadFeatureApplUpdateOne {
	if id != nil {
		wfauo = wfauo.SetWorkloadID(*id)
	}
	return wfauo
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkload(w *Workload) *WorkloadFeatureApplUpdateOne {
	return wfauo.SetWorkloadID(w.ID)
}

// SetWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkloadFeatureID(id int) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.SetWorkloadFeatureID(id)
	return wfauo
}

// SetNillableWorkloadFeatureID sets the "workload_feature" edge to the WorkloadFeature entity by ID if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableWorkloadFeatureID(id *int) *WorkloadFeatureApplUpdateOne {
	if id != nil {
		wfauo = wfauo.SetWorkloadFeatureID(*id)
	}
	return wfauo
}

// SetWorkloadFeature sets the "workload_feature" edge to the WorkloadFeature entity.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkloadFeature(w *WorkloadFeature) *WorkloadFeatureApplUpdateOne {
	return wfauo.SetWorkloadFeatureID(w.ID)
}

// SetWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkloadFeatureApplTypeID(id int) *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.SetWorkloadFeatureApplTypeID(id)
	return wfauo
}

// SetNillableWorkloadFeatureApplTypeID sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity by ID if the given value is not nil.
func (wfauo *WorkloadFeatureApplUpdateOne) SetNillableWorkloadFeatureApplTypeID(id *int) *WorkloadFeatureApplUpdateOne {
	if id != nil {
		wfauo = wfauo.SetWorkloadFeatureApplTypeID(*id)
	}
	return wfauo
}

// SetWorkloadFeatureApplType sets the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity.
func (wfauo *WorkloadFeatureApplUpdateOne) SetWorkloadFeatureApplType(w *WorkloadFeatureApplType) *WorkloadFeatureApplUpdateOne {
	return wfauo.SetWorkloadFeatureApplTypeID(w.ID)
}

// Mutation returns the WorkloadFeatureApplMutation object of the builder.
func (wfauo *WorkloadFeatureApplUpdateOne) Mutation() *WorkloadFeatureApplMutation {
	return wfauo.mutation
}

// ClearWorkload clears the "workload" edge to the Workload entity.
func (wfauo *WorkloadFeatureApplUpdateOne) ClearWorkload() *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ClearWorkload()
	return wfauo
}

// ClearWorkloadFeature clears the "workload_feature" edge to the WorkloadFeature entity.
func (wfauo *WorkloadFeatureApplUpdateOne) ClearWorkloadFeature() *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ClearWorkloadFeature()
	return wfauo
}

// ClearWorkloadFeatureApplType clears the "workload_feature_appl_type" edge to the WorkloadFeatureApplType entity.
func (wfauo *WorkloadFeatureApplUpdateOne) ClearWorkloadFeatureApplType() *WorkloadFeatureApplUpdateOne {
	wfauo.mutation.ClearWorkloadFeatureApplType()
	return wfauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wfauo *WorkloadFeatureApplUpdateOne) Select(field string, fields ...string) *WorkloadFeatureApplUpdateOne {
	wfauo.fields = append([]string{field}, fields...)
	return wfauo
}

// Save executes the query and returns the updated WorkloadFeatureAppl entity.
func (wfauo *WorkloadFeatureApplUpdateOne) Save(ctx context.Context) (*WorkloadFeatureAppl, error) {
	var (
		err  error
		node *WorkloadFeatureAppl
	)
	wfauo.defaults()
	if len(wfauo.hooks) == 0 {
		node, err = wfauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureApplMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfauo.mutation = mutation
			node, err = wfauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wfauo.hooks) - 1; i >= 0; i-- {
			mut = wfauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfauo *WorkloadFeatureApplUpdateOne) SaveX(ctx context.Context) *WorkloadFeatureAppl {
	node, err := wfauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wfauo *WorkloadFeatureApplUpdateOne) Exec(ctx context.Context) error {
	_, err := wfauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfauo *WorkloadFeatureApplUpdateOne) ExecX(ctx context.Context) {
	if err := wfauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfauo *WorkloadFeatureApplUpdateOne) defaults() {
	if _, ok := wfauo.mutation.UpdateTime(); !ok {
		v := workloadfeatureappl.UpdateDefaultUpdateTime()
		wfauo.mutation.SetUpdateTime(v)
	}
}

func (wfauo *WorkloadFeatureApplUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadFeatureAppl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeatureappl.Table,
			Columns: workloadfeatureappl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeatureappl.FieldID,
			},
		},
	}
	id, ok := wfauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadFeatureAppl.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wfauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadfeatureappl.FieldID)
		for _, f := range fields {
			if !workloadfeatureappl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadfeatureappl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wfauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldUpdateTime,
		})
	}
	if value, ok := wfauo.mutation.FromDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldFromDate,
		})
	}
	if value, ok := wfauo.mutation.ThruDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappl.FieldThruDate,
		})
	}
	if wfauo.mutation.ThruDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workloadfeatureappl.FieldThruDate,
		})
	}
	if value, ok := wfauo.mutation.SequenceNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if value, ok := wfauo.mutation.AddedSequenceNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if wfauo.mutation.SequenceNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloadfeatureappl.FieldSequenceNum,
		})
	}
	if wfauo.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadTable,
			Columns: []string{workloadfeatureappl.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfauo.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadTable,
			Columns: []string{workloadfeatureappl.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfauo.mutation.WorkloadFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfauo.mutation.WorkloadFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfauo.mutation.WorkloadFeatureApplTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureApplTypeTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureApplTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfauo.mutation.WorkloadFeatureApplTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappl.WorkloadFeatureApplTypeTable,
			Columns: []string{workloadfeatureappl.WorkloadFeatureApplTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadFeatureAppl{config: wfauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wfauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeatureappl.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
