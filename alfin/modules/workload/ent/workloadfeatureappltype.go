// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
)

// WorkloadFeatureApplType is the model entity for the WorkloadFeatureApplType schema.
type WorkloadFeatureApplType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadFeatureApplTypeQuery when eager-loading is set.
	Edges                               WorkloadFeatureApplTypeEdges `json:"edges"`
	workload_feature_appl_type_children *int
}

// WorkloadFeatureApplTypeEdges holds the relations/edges for other nodes in the graph.
type WorkloadFeatureApplTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *WorkloadFeatureApplType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*WorkloadFeatureApplType `json:"children,omitempty"`
	// WorkloadFeatureAppls holds the value of the workload_feature_appls edge.
	WorkloadFeatureAppls []*WorkloadFeatureAppl `json:"workload_feature_appls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkloadFeatureApplTypeEdges) ParentOrErr() (*WorkloadFeatureApplType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workloadfeatureappltype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadFeatureApplTypeEdges) ChildrenOrErr() ([]*WorkloadFeatureApplType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// WorkloadFeatureApplsOrErr returns the WorkloadFeatureAppls value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadFeatureApplTypeEdges) WorkloadFeatureApplsOrErr() ([]*WorkloadFeatureAppl, error) {
	if e.loadedTypes[2] {
		return e.WorkloadFeatureAppls, nil
	}
	return nil, &NotLoadedError{edge: "workload_feature_appls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkloadFeatureApplType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workloadfeatureappltype.FieldID:
			values[i] = new(sql.NullInt64)
		case workloadfeatureappltype.FieldDescription:
			values[i] = new(sql.NullString)
		case workloadfeatureappltype.FieldCreateTime, workloadfeatureappltype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case workloadfeatureappltype.ForeignKeys[0]: // workload_feature_appl_type_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkloadFeatureApplType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkloadFeatureApplType fields.
func (wfat *WorkloadFeatureApplType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workloadfeatureappltype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wfat.ID = int(value.Int64)
		case workloadfeatureappltype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wfat.CreateTime = value.Time
			}
		case workloadfeatureappltype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wfat.UpdateTime = value.Time
			}
		case workloadfeatureappltype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wfat.Description = value.String
			}
		case workloadfeatureappltype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workload_feature_appl_type_children", value)
			} else if value.Valid {
				wfat.workload_feature_appl_type_children = new(int)
				*wfat.workload_feature_appl_type_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the WorkloadFeatureApplType entity.
func (wfat *WorkloadFeatureApplType) QueryParent() *WorkloadFeatureApplTypeQuery {
	return (&WorkloadFeatureApplTypeClient{config: wfat.config}).QueryParent(wfat)
}

// QueryChildren queries the "children" edge of the WorkloadFeatureApplType entity.
func (wfat *WorkloadFeatureApplType) QueryChildren() *WorkloadFeatureApplTypeQuery {
	return (&WorkloadFeatureApplTypeClient{config: wfat.config}).QueryChildren(wfat)
}

// QueryWorkloadFeatureAppls queries the "workload_feature_appls" edge of the WorkloadFeatureApplType entity.
func (wfat *WorkloadFeatureApplType) QueryWorkloadFeatureAppls() *WorkloadFeatureApplQuery {
	return (&WorkloadFeatureApplTypeClient{config: wfat.config}).QueryWorkloadFeatureAppls(wfat)
}

// Update returns a builder for updating this WorkloadFeatureApplType.
// Note that you need to call WorkloadFeatureApplType.Unwrap() before calling this method if this WorkloadFeatureApplType
// was returned from a transaction, and the transaction was committed or rolled back.
func (wfat *WorkloadFeatureApplType) Update() *WorkloadFeatureApplTypeUpdateOne {
	return (&WorkloadFeatureApplTypeClient{config: wfat.config}).UpdateOne(wfat)
}

// Unwrap unwraps the WorkloadFeatureApplType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wfat *WorkloadFeatureApplType) Unwrap() *WorkloadFeatureApplType {
	tx, ok := wfat.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkloadFeatureApplType is not a transactional entity")
	}
	wfat.config.driver = tx.drv
	return wfat
}

// String implements the fmt.Stringer.
func (wfat *WorkloadFeatureApplType) String() string {
	var builder strings.Builder
	builder.WriteString("WorkloadFeatureApplType(")
	builder.WriteString(fmt.Sprintf("id=%v", wfat.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(wfat.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(wfat.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(wfat.Description)
	builder.WriteByte(')')
	return builder.String()
}

// WorkloadFeatureApplTypes is a parsable slice of WorkloadFeatureApplType.
type WorkloadFeatureApplTypes []*WorkloadFeatureApplType

func (wfat WorkloadFeatureApplTypes) config(cfg config) {
	for _i := range wfat {
		wfat[_i].config = cfg
	}
}
