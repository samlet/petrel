// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappl"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadfeatureappltype"
)

// WorkloadFeatureApplTypeUpdate is the builder for updating WorkloadFeatureApplType entities.
type WorkloadFeatureApplTypeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadFeatureApplTypeMutation
}

// Where adds a new predicate for the WorkloadFeatureApplTypeUpdate builder.
func (wfatu *WorkloadFeatureApplTypeUpdate) Where(ps ...predicate.WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.predicates = append(wfatu.mutation.predicates, ps...)
	return wfatu
}

// SetDescription sets the "description" field.
func (wfatu *WorkloadFeatureApplTypeUpdate) SetDescription(s string) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.SetDescription(s)
	return wfatu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wfatu *WorkloadFeatureApplTypeUpdate) SetNillableDescription(s *string) *WorkloadFeatureApplTypeUpdate {
	if s != nil {
		wfatu.SetDescription(*s)
	}
	return wfatu
}

// ClearDescription clears the value of the "description" field.
func (wfatu *WorkloadFeatureApplTypeUpdate) ClearDescription() *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.ClearDescription()
	return wfatu
}

// SetParentID sets the "parent" edge to the WorkloadFeatureApplType entity by ID.
func (wfatu *WorkloadFeatureApplTypeUpdate) SetParentID(id int) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.SetParentID(id)
	return wfatu
}

// SetNillableParentID sets the "parent" edge to the WorkloadFeatureApplType entity by ID if the given value is not nil.
func (wfatu *WorkloadFeatureApplTypeUpdate) SetNillableParentID(id *int) *WorkloadFeatureApplTypeUpdate {
	if id != nil {
		wfatu = wfatu.SetParentID(*id)
	}
	return wfatu
}

// SetParent sets the "parent" edge to the WorkloadFeatureApplType entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) SetParent(w *WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdate {
	return wfatu.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkloadFeatureApplType entity by IDs.
func (wfatu *WorkloadFeatureApplTypeUpdate) AddChildIDs(ids ...int) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.AddChildIDs(ids...)
	return wfatu
}

// AddChildren adds the "children" edges to the WorkloadFeatureApplType entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) AddChildren(w ...*WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatu.AddChildIDs(ids...)
}

// AddWorkloadFeatureApplIDs adds the "workload_feature_appls" edge to the WorkloadFeatureAppl entity by IDs.
func (wfatu *WorkloadFeatureApplTypeUpdate) AddWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.AddWorkloadFeatureApplIDs(ids...)
	return wfatu
}

// AddWorkloadFeatureAppls adds the "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) AddWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureApplTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatu.AddWorkloadFeatureApplIDs(ids...)
}

// Mutation returns the WorkloadFeatureApplTypeMutation object of the builder.
func (wfatu *WorkloadFeatureApplTypeUpdate) Mutation() *WorkloadFeatureApplTypeMutation {
	return wfatu.mutation
}

// ClearParent clears the "parent" edge to the WorkloadFeatureApplType entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) ClearParent() *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.ClearParent()
	return wfatu
}

// ClearChildren clears all "children" edges to the WorkloadFeatureApplType entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) ClearChildren() *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.ClearChildren()
	return wfatu
}

// RemoveChildIDs removes the "children" edge to WorkloadFeatureApplType entities by IDs.
func (wfatu *WorkloadFeatureApplTypeUpdate) RemoveChildIDs(ids ...int) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.RemoveChildIDs(ids...)
	return wfatu
}

// RemoveChildren removes "children" edges to WorkloadFeatureApplType entities.
func (wfatu *WorkloadFeatureApplTypeUpdate) RemoveChildren(w ...*WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatu.RemoveChildIDs(ids...)
}

// ClearWorkloadFeatureAppls clears all "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfatu *WorkloadFeatureApplTypeUpdate) ClearWorkloadFeatureAppls() *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.ClearWorkloadFeatureAppls()
	return wfatu
}

// RemoveWorkloadFeatureApplIDs removes the "workload_feature_appls" edge to WorkloadFeatureAppl entities by IDs.
func (wfatu *WorkloadFeatureApplTypeUpdate) RemoveWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureApplTypeUpdate {
	wfatu.mutation.RemoveWorkloadFeatureApplIDs(ids...)
	return wfatu
}

// RemoveWorkloadFeatureAppls removes "workload_feature_appls" edges to WorkloadFeatureAppl entities.
func (wfatu *WorkloadFeatureApplTypeUpdate) RemoveWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureApplTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatu.RemoveWorkloadFeatureApplIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wfatu *WorkloadFeatureApplTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wfatu.defaults()
	if len(wfatu.hooks) == 0 {
		affected, err = wfatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureApplTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfatu.mutation = mutation
			affected, err = wfatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wfatu.hooks) - 1; i >= 0; i-- {
			mut = wfatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfatu *WorkloadFeatureApplTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := wfatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wfatu *WorkloadFeatureApplTypeUpdate) Exec(ctx context.Context) error {
	_, err := wfatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfatu *WorkloadFeatureApplTypeUpdate) ExecX(ctx context.Context) {
	if err := wfatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfatu *WorkloadFeatureApplTypeUpdate) defaults() {
	if _, ok := wfatu.mutation.UpdateTime(); !ok {
		v := workloadfeatureappltype.UpdateDefaultUpdateTime()
		wfatu.mutation.SetUpdateTime(v)
	}
}

func (wfatu *WorkloadFeatureApplTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeatureappltype.Table,
			Columns: workloadfeatureappltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeatureappltype.FieldID,
			},
		},
	}
	if ps := wfatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfatu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappltype.FieldUpdateTime,
		})
	}
	if value, ok := wfatu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadfeatureappltype.FieldDescription,
		})
	}
	if wfatu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadfeatureappltype.FieldDescription,
		})
	}
	if wfatu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappltype.ParentTable,
			Columns: []string{workloadfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappltype.ParentTable,
			Columns: []string{workloadfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfatu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wfatu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfatu.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatu.mutation.RemovedWorkloadFeatureApplsIDs(); len(nodes) > 0 && !wfatu.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatu.mutation.WorkloadFeatureApplsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wfatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeatureappltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadFeatureApplTypeUpdateOne is the builder for updating a single WorkloadFeatureApplType entity.
type WorkloadFeatureApplTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadFeatureApplTypeMutation
}

// SetDescription sets the "description" field.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SetDescription(s string) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.SetDescription(s)
	return wfatuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SetNillableDescription(s *string) *WorkloadFeatureApplTypeUpdateOne {
	if s != nil {
		wfatuo.SetDescription(*s)
	}
	return wfatuo
}

// ClearDescription clears the value of the "description" field.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) ClearDescription() *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.ClearDescription()
	return wfatuo
}

// SetParentID sets the "parent" edge to the WorkloadFeatureApplType entity by ID.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SetParentID(id int) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.SetParentID(id)
	return wfatuo
}

// SetNillableParentID sets the "parent" edge to the WorkloadFeatureApplType entity by ID if the given value is not nil.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SetNillableParentID(id *int) *WorkloadFeatureApplTypeUpdateOne {
	if id != nil {
		wfatuo = wfatuo.SetParentID(*id)
	}
	return wfatuo
}

// SetParent sets the "parent" edge to the WorkloadFeatureApplType entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SetParent(w *WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdateOne {
	return wfatuo.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkloadFeatureApplType entity by IDs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) AddChildIDs(ids ...int) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.AddChildIDs(ids...)
	return wfatuo
}

// AddChildren adds the "children" edges to the WorkloadFeatureApplType entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) AddChildren(w ...*WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatuo.AddChildIDs(ids...)
}

// AddWorkloadFeatureApplIDs adds the "workload_feature_appls" edge to the WorkloadFeatureAppl entity by IDs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) AddWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.AddWorkloadFeatureApplIDs(ids...)
	return wfatuo
}

// AddWorkloadFeatureAppls adds the "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) AddWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureApplTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatuo.AddWorkloadFeatureApplIDs(ids...)
}

// Mutation returns the WorkloadFeatureApplTypeMutation object of the builder.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) Mutation() *WorkloadFeatureApplTypeMutation {
	return wfatuo.mutation
}

// ClearParent clears the "parent" edge to the WorkloadFeatureApplType entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) ClearParent() *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.ClearParent()
	return wfatuo
}

// ClearChildren clears all "children" edges to the WorkloadFeatureApplType entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) ClearChildren() *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.ClearChildren()
	return wfatuo
}

// RemoveChildIDs removes the "children" edge to WorkloadFeatureApplType entities by IDs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) RemoveChildIDs(ids ...int) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.RemoveChildIDs(ids...)
	return wfatuo
}

// RemoveChildren removes "children" edges to WorkloadFeatureApplType entities.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) RemoveChildren(w ...*WorkloadFeatureApplType) *WorkloadFeatureApplTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatuo.RemoveChildIDs(ids...)
}

// ClearWorkloadFeatureAppls clears all "workload_feature_appls" edges to the WorkloadFeatureAppl entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) ClearWorkloadFeatureAppls() *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.ClearWorkloadFeatureAppls()
	return wfatuo
}

// RemoveWorkloadFeatureApplIDs removes the "workload_feature_appls" edge to WorkloadFeatureAppl entities by IDs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) RemoveWorkloadFeatureApplIDs(ids ...int) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.mutation.RemoveWorkloadFeatureApplIDs(ids...)
	return wfatuo
}

// RemoveWorkloadFeatureAppls removes "workload_feature_appls" edges to WorkloadFeatureAppl entities.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) RemoveWorkloadFeatureAppls(w ...*WorkloadFeatureAppl) *WorkloadFeatureApplTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wfatuo.RemoveWorkloadFeatureApplIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) Select(field string, fields ...string) *WorkloadFeatureApplTypeUpdateOne {
	wfatuo.fields = append([]string{field}, fields...)
	return wfatuo
}

// Save executes the query and returns the updated WorkloadFeatureApplType entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) Save(ctx context.Context) (*WorkloadFeatureApplType, error) {
	var (
		err  error
		node *WorkloadFeatureApplType
	)
	wfatuo.defaults()
	if len(wfatuo.hooks) == 0 {
		node, err = wfatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadFeatureApplTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wfatuo.mutation = mutation
			node, err = wfatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wfatuo.hooks) - 1; i >= 0; i-- {
			mut = wfatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wfatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) SaveX(ctx context.Context) *WorkloadFeatureApplType {
	node, err := wfatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := wfatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) ExecX(ctx context.Context) {
	if err := wfatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wfatuo *WorkloadFeatureApplTypeUpdateOne) defaults() {
	if _, ok := wfatuo.mutation.UpdateTime(); !ok {
		v := workloadfeatureappltype.UpdateDefaultUpdateTime()
		wfatuo.mutation.SetUpdateTime(v)
	}
}

func (wfatuo *WorkloadFeatureApplTypeUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadFeatureApplType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadfeatureappltype.Table,
			Columns: workloadfeatureappltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadfeatureappltype.FieldID,
			},
		},
	}
	id, ok := wfatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadFeatureApplType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wfatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadfeatureappltype.FieldID)
		for _, f := range fields {
			if !workloadfeatureappltype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadfeatureappltype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wfatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfatuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadfeatureappltype.FieldUpdateTime,
		})
	}
	if value, ok := wfatuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadfeatureappltype.FieldDescription,
		})
	}
	if wfatuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadfeatureappltype.FieldDescription,
		})
	}
	if wfatuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappltype.ParentTable,
			Columns: []string{workloadfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadfeatureappltype.ParentTable,
			Columns: []string{workloadfeatureappltype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfatuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wfatuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.ChildrenTable,
			Columns: []string{workloadfeatureappltype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wfatuo.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatuo.mutation.RemovedWorkloadFeatureApplsIDs(); len(nodes) > 0 && !wfatuo.mutation.WorkloadFeatureApplsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wfatuo.mutation.WorkloadFeatureApplsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadfeatureappltype.WorkloadFeatureApplsTable,
			Columns: []string{workloadfeatureappltype.WorkloadFeatureApplsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadfeatureappl.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadFeatureApplType{config: wfatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wfatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadfeatureappltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
