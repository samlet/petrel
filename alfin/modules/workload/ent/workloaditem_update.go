// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloaditem"
)

// WorkloadItemUpdate is the builder for updating WorkloadItem entities.
type WorkloadItemUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadItemMutation
}

// Where adds a new predicate for the WorkloadItemUpdate builder.
func (wiu *WorkloadItemUpdate) Where(ps ...predicate.WorkloadItem) *WorkloadItemUpdate {
	wiu.mutation.predicates = append(wiu.mutation.predicates, ps...)
	return wiu
}

// SetWorkloadItemSeqID sets the "workload_item_seq_id" field.
func (wiu *WorkloadItemUpdate) SetWorkloadItemSeqID(i int) *WorkloadItemUpdate {
	wiu.mutation.ResetWorkloadItemSeqID()
	wiu.mutation.SetWorkloadItemSeqID(i)
	return wiu
}

// AddWorkloadItemSeqID adds i to the "workload_item_seq_id" field.
func (wiu *WorkloadItemUpdate) AddWorkloadItemSeqID(i int) *WorkloadItemUpdate {
	wiu.mutation.AddWorkloadItemSeqID(i)
	return wiu
}

// SetDescription sets the "description" field.
func (wiu *WorkloadItemUpdate) SetDescription(s string) *WorkloadItemUpdate {
	wiu.mutation.SetDescription(s)
	return wiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wiu *WorkloadItemUpdate) SetNillableDescription(s *string) *WorkloadItemUpdate {
	if s != nil {
		wiu.SetDescription(*s)
	}
	return wiu
}

// ClearDescription clears the value of the "description" field.
func (wiu *WorkloadItemUpdate) ClearDescription() *WorkloadItemUpdate {
	wiu.mutation.ClearDescription()
	return wiu
}

// SetAmount sets the "amount" field.
func (wiu *WorkloadItemUpdate) SetAmount(f float64) *WorkloadItemUpdate {
	wiu.mutation.ResetAmount()
	wiu.mutation.SetAmount(f)
	return wiu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wiu *WorkloadItemUpdate) SetNillableAmount(f *float64) *WorkloadItemUpdate {
	if f != nil {
		wiu.SetAmount(*f)
	}
	return wiu
}

// AddAmount adds f to the "amount" field.
func (wiu *WorkloadItemUpdate) AddAmount(f float64) *WorkloadItemUpdate {
	wiu.mutation.AddAmount(f)
	return wiu
}

// ClearAmount clears the value of the "amount" field.
func (wiu *WorkloadItemUpdate) ClearAmount() *WorkloadItemUpdate {
	wiu.mutation.ClearAmount()
	return wiu
}

// SetAmountUomID sets the "amount_uom_id" field.
func (wiu *WorkloadItemUpdate) SetAmountUomID(i int) *WorkloadItemUpdate {
	wiu.mutation.ResetAmountUomID()
	wiu.mutation.SetAmountUomID(i)
	return wiu
}

// SetNillableAmountUomID sets the "amount_uom_id" field if the given value is not nil.
func (wiu *WorkloadItemUpdate) SetNillableAmountUomID(i *int) *WorkloadItemUpdate {
	if i != nil {
		wiu.SetAmountUomID(*i)
	}
	return wiu
}

// AddAmountUomID adds i to the "amount_uom_id" field.
func (wiu *WorkloadItemUpdate) AddAmountUomID(i int) *WorkloadItemUpdate {
	wiu.mutation.AddAmountUomID(i)
	return wiu
}

// ClearAmountUomID clears the value of the "amount_uom_id" field.
func (wiu *WorkloadItemUpdate) ClearAmountUomID() *WorkloadItemUpdate {
	wiu.mutation.ClearAmountUomID()
	return wiu
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wiu *WorkloadItemUpdate) SetWorkloadID(id int) *WorkloadItemUpdate {
	wiu.mutation.SetWorkloadID(id)
	return wiu
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wiu *WorkloadItemUpdate) SetNillableWorkloadID(id *int) *WorkloadItemUpdate {
	if id != nil {
		wiu = wiu.SetWorkloadID(*id)
	}
	return wiu
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wiu *WorkloadItemUpdate) SetWorkload(w *Workload) *WorkloadItemUpdate {
	return wiu.SetWorkloadID(w.ID)
}

// Mutation returns the WorkloadItemMutation object of the builder.
func (wiu *WorkloadItemUpdate) Mutation() *WorkloadItemMutation {
	return wiu.mutation
}

// ClearWorkload clears the "workload" edge to the Workload entity.
func (wiu *WorkloadItemUpdate) ClearWorkload() *WorkloadItemUpdate {
	wiu.mutation.ClearWorkload()
	return wiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wiu *WorkloadItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wiu.defaults()
	if len(wiu.hooks) == 0 {
		affected, err = wiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wiu.mutation = mutation
			affected, err = wiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wiu.hooks) - 1; i >= 0; i-- {
			mut = wiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wiu *WorkloadItemUpdate) SaveX(ctx context.Context) int {
	affected, err := wiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wiu *WorkloadItemUpdate) Exec(ctx context.Context) error {
	_, err := wiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiu *WorkloadItemUpdate) ExecX(ctx context.Context) {
	if err := wiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wiu *WorkloadItemUpdate) defaults() {
	if _, ok := wiu.mutation.UpdateTime(); !ok {
		v := workloaditem.UpdateDefaultUpdateTime()
		wiu.mutation.SetUpdateTime(v)
	}
}

func (wiu *WorkloadItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloaditem.Table,
			Columns: workloaditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloaditem.FieldID,
			},
		},
	}
	if ps := wiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloaditem.FieldUpdateTime,
		})
	}
	if value, ok := wiu.mutation.WorkloadItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldWorkloadItemSeqID,
		})
	}
	if value, ok := wiu.mutation.AddedWorkloadItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldWorkloadItemSeqID,
		})
	}
	if value, ok := wiu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloaditem.FieldDescription,
		})
	}
	if wiu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloaditem.FieldDescription,
		})
	}
	if value, ok := wiu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workloaditem.FieldAmount,
		})
	}
	if value, ok := wiu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workloaditem.FieldAmount,
		})
	}
	if wiu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workloaditem.FieldAmount,
		})
	}
	if value, ok := wiu.mutation.AmountUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if value, ok := wiu.mutation.AddedAmountUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if wiu.mutation.AmountUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if wiu.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloaditem.WorkloadTable,
			Columns: []string{workloaditem.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloaditem.WorkloadTable,
			Columns: []string{workloaditem.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloaditem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadItemUpdateOne is the builder for updating a single WorkloadItem entity.
type WorkloadItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadItemMutation
}

// SetWorkloadItemSeqID sets the "workload_item_seq_id" field.
func (wiuo *WorkloadItemUpdateOne) SetWorkloadItemSeqID(i int) *WorkloadItemUpdateOne {
	wiuo.mutation.ResetWorkloadItemSeqID()
	wiuo.mutation.SetWorkloadItemSeqID(i)
	return wiuo
}

// AddWorkloadItemSeqID adds i to the "workload_item_seq_id" field.
func (wiuo *WorkloadItemUpdateOne) AddWorkloadItemSeqID(i int) *WorkloadItemUpdateOne {
	wiuo.mutation.AddWorkloadItemSeqID(i)
	return wiuo
}

// SetDescription sets the "description" field.
func (wiuo *WorkloadItemUpdateOne) SetDescription(s string) *WorkloadItemUpdateOne {
	wiuo.mutation.SetDescription(s)
	return wiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wiuo *WorkloadItemUpdateOne) SetNillableDescription(s *string) *WorkloadItemUpdateOne {
	if s != nil {
		wiuo.SetDescription(*s)
	}
	return wiuo
}

// ClearDescription clears the value of the "description" field.
func (wiuo *WorkloadItemUpdateOne) ClearDescription() *WorkloadItemUpdateOne {
	wiuo.mutation.ClearDescription()
	return wiuo
}

// SetAmount sets the "amount" field.
func (wiuo *WorkloadItemUpdateOne) SetAmount(f float64) *WorkloadItemUpdateOne {
	wiuo.mutation.ResetAmount()
	wiuo.mutation.SetAmount(f)
	return wiuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (wiuo *WorkloadItemUpdateOne) SetNillableAmount(f *float64) *WorkloadItemUpdateOne {
	if f != nil {
		wiuo.SetAmount(*f)
	}
	return wiuo
}

// AddAmount adds f to the "amount" field.
func (wiuo *WorkloadItemUpdateOne) AddAmount(f float64) *WorkloadItemUpdateOne {
	wiuo.mutation.AddAmount(f)
	return wiuo
}

// ClearAmount clears the value of the "amount" field.
func (wiuo *WorkloadItemUpdateOne) ClearAmount() *WorkloadItemUpdateOne {
	wiuo.mutation.ClearAmount()
	return wiuo
}

// SetAmountUomID sets the "amount_uom_id" field.
func (wiuo *WorkloadItemUpdateOne) SetAmountUomID(i int) *WorkloadItemUpdateOne {
	wiuo.mutation.ResetAmountUomID()
	wiuo.mutation.SetAmountUomID(i)
	return wiuo
}

// SetNillableAmountUomID sets the "amount_uom_id" field if the given value is not nil.
func (wiuo *WorkloadItemUpdateOne) SetNillableAmountUomID(i *int) *WorkloadItemUpdateOne {
	if i != nil {
		wiuo.SetAmountUomID(*i)
	}
	return wiuo
}

// AddAmountUomID adds i to the "amount_uom_id" field.
func (wiuo *WorkloadItemUpdateOne) AddAmountUomID(i int) *WorkloadItemUpdateOne {
	wiuo.mutation.AddAmountUomID(i)
	return wiuo
}

// ClearAmountUomID clears the value of the "amount_uom_id" field.
func (wiuo *WorkloadItemUpdateOne) ClearAmountUomID() *WorkloadItemUpdateOne {
	wiuo.mutation.ClearAmountUomID()
	return wiuo
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wiuo *WorkloadItemUpdateOne) SetWorkloadID(id int) *WorkloadItemUpdateOne {
	wiuo.mutation.SetWorkloadID(id)
	return wiuo
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wiuo *WorkloadItemUpdateOne) SetNillableWorkloadID(id *int) *WorkloadItemUpdateOne {
	if id != nil {
		wiuo = wiuo.SetWorkloadID(*id)
	}
	return wiuo
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wiuo *WorkloadItemUpdateOne) SetWorkload(w *Workload) *WorkloadItemUpdateOne {
	return wiuo.SetWorkloadID(w.ID)
}

// Mutation returns the WorkloadItemMutation object of the builder.
func (wiuo *WorkloadItemUpdateOne) Mutation() *WorkloadItemMutation {
	return wiuo.mutation
}

// ClearWorkload clears the "workload" edge to the Workload entity.
func (wiuo *WorkloadItemUpdateOne) ClearWorkload() *WorkloadItemUpdateOne {
	wiuo.mutation.ClearWorkload()
	return wiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wiuo *WorkloadItemUpdateOne) Select(field string, fields ...string) *WorkloadItemUpdateOne {
	wiuo.fields = append([]string{field}, fields...)
	return wiuo
}

// Save executes the query and returns the updated WorkloadItem entity.
func (wiuo *WorkloadItemUpdateOne) Save(ctx context.Context) (*WorkloadItem, error) {
	var (
		err  error
		node *WorkloadItem
	)
	wiuo.defaults()
	if len(wiuo.hooks) == 0 {
		node, err = wiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wiuo.mutation = mutation
			node, err = wiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wiuo.hooks) - 1; i >= 0; i-- {
			mut = wiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wiuo *WorkloadItemUpdateOne) SaveX(ctx context.Context) *WorkloadItem {
	node, err := wiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wiuo *WorkloadItemUpdateOne) Exec(ctx context.Context) error {
	_, err := wiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiuo *WorkloadItemUpdateOne) ExecX(ctx context.Context) {
	if err := wiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wiuo *WorkloadItemUpdateOne) defaults() {
	if _, ok := wiuo.mutation.UpdateTime(); !ok {
		v := workloaditem.UpdateDefaultUpdateTime()
		wiuo.mutation.SetUpdateTime(v)
	}
}

func (wiuo *WorkloadItemUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloaditem.Table,
			Columns: workloaditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloaditem.FieldID,
			},
		},
	}
	id, ok := wiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloaditem.FieldID)
		for _, f := range fields {
			if !workloaditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloaditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloaditem.FieldUpdateTime,
		})
	}
	if value, ok := wiuo.mutation.WorkloadItemSeqID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldWorkloadItemSeqID,
		})
	}
	if value, ok := wiuo.mutation.AddedWorkloadItemSeqID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldWorkloadItemSeqID,
		})
	}
	if value, ok := wiuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloaditem.FieldDescription,
		})
	}
	if wiuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloaditem.FieldDescription,
		})
	}
	if value, ok := wiuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workloaditem.FieldAmount,
		})
	}
	if value, ok := wiuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: workloaditem.FieldAmount,
		})
	}
	if wiuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: workloaditem.FieldAmount,
		})
	}
	if value, ok := wiuo.mutation.AmountUomID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if value, ok := wiuo.mutation.AddedAmountUomID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if wiuo.mutation.AmountUomIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workloaditem.FieldAmountUomID,
		})
	}
	if wiuo.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloaditem.WorkloadTable,
			Columns: []string{workloaditem.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloaditem.WorkloadTable,
			Columns: []string{workloaditem.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadItem{config: wiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloaditem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
