// Code generated by entc, DO NOT EDIT.

package workloadstatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// StatusDate applies equality check predicate on the "status_date" field. It's identical to StatusDateEQ.
func StatusDate(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDate), v))
	})
}

// StatusEndDate applies equality check predicate on the "status_end_date" field. It's identical to StatusEndDateEQ.
func StatusEndDate(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusEndDate), v))
	})
}

// ChangeByUserLoginID applies equality check predicate on the "change_by_user_login_id" field. It's identical to ChangeByUserLoginIDEQ.
func ChangeByUserLoginID(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// StatusDateEQ applies the EQ predicate on the "status_date" field.
func StatusDateEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDate), v))
	})
}

// StatusDateNEQ applies the NEQ predicate on the "status_date" field.
func StatusDateNEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDate), v))
	})
}

// StatusDateIn applies the In predicate on the "status_date" field.
func StatusDateIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusDate), v...))
	})
}

// StatusDateNotIn applies the NotIn predicate on the "status_date" field.
func StatusDateNotIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusDate), v...))
	})
}

// StatusDateGT applies the GT predicate on the "status_date" field.
func StatusDateGT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDate), v))
	})
}

// StatusDateGTE applies the GTE predicate on the "status_date" field.
func StatusDateGTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDate), v))
	})
}

// StatusDateLT applies the LT predicate on the "status_date" field.
func StatusDateLT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDate), v))
	})
}

// StatusDateLTE applies the LTE predicate on the "status_date" field.
func StatusDateLTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDate), v))
	})
}

// StatusEndDateEQ applies the EQ predicate on the "status_end_date" field.
func StatusEndDateEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateNEQ applies the NEQ predicate on the "status_end_date" field.
func StatusEndDateNEQ(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateIn applies the In predicate on the "status_end_date" field.
func StatusEndDateIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusEndDate), v...))
	})
}

// StatusEndDateNotIn applies the NotIn predicate on the "status_end_date" field.
func StatusEndDateNotIn(vs ...time.Time) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusEndDate), v...))
	})
}

// StatusEndDateGT applies the GT predicate on the "status_end_date" field.
func StatusEndDateGT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateGTE applies the GTE predicate on the "status_end_date" field.
func StatusEndDateGTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateLT applies the LT predicate on the "status_end_date" field.
func StatusEndDateLT(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateLTE applies the LTE predicate on the "status_end_date" field.
func StatusEndDateLTE(v time.Time) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusEndDate), v))
	})
}

// StatusEndDateIsNil applies the IsNil predicate on the "status_end_date" field.
func StatusEndDateIsNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusEndDate)))
	})
}

// StatusEndDateNotNil applies the NotNil predicate on the "status_end_date" field.
func StatusEndDateNotNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusEndDate)))
	})
}

// ChangeByUserLoginIDEQ applies the EQ predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDEQ(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDNEQ applies the NEQ predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNEQ(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDIn applies the In predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDIn(vs ...string) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChangeByUserLoginID), v...))
	})
}

// ChangeByUserLoginIDNotIn applies the NotIn predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNotIn(vs ...string) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChangeByUserLoginID), v...))
	})
}

// ChangeByUserLoginIDGT applies the GT predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDGT(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDGTE applies the GTE predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDGTE(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDLT applies the LT predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDLT(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDLTE applies the LTE predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDLTE(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDContains applies the Contains predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDContains(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDHasPrefix applies the HasPrefix predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDHasPrefix(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDHasSuffix applies the HasSuffix predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDHasSuffix(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDIsNil applies the IsNil predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDIsNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChangeByUserLoginID)))
	})
}

// ChangeByUserLoginIDNotNil applies the NotNil predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDNotNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChangeByUserLoginID)))
	})
}

// ChangeByUserLoginIDEqualFold applies the EqualFold predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDEqualFold(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChangeByUserLoginID), v))
	})
}

// ChangeByUserLoginIDContainsFold applies the ContainsFold predicate on the "change_by_user_login_id" field.
func ChangeByUserLoginIDContainsFold(v string) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChangeByUserLoginID), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.WorkloadStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// StatusIDIsNil applies the IsNil predicate on the "status_id" field.
func StatusIDIsNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusID)))
	})
}

// StatusIDNotNil applies the NotNil predicate on the "status_id" field.
func StatusIDNotNil() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusID)))
	})
}

// HasWorkload applies the HasEdge predicate on the "workload" edge.
func HasWorkload() predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkloadTable, WorkloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadWith applies the HasEdge predicate on the "workload" edge with a given conditions (other predicates).
func HasWorkloadWith(preds ...predicate.Workload) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkloadInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkloadTable, WorkloadColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkloadStatus) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkloadStatus) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkloadStatus) predicate.WorkloadStatus {
	return predicate.WorkloadStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
