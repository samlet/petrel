// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadstatus"
)

// WorkloadStatusCreate is the builder for creating a WorkloadStatus entity.
type WorkloadStatusCreate struct {
	config
	mutation *WorkloadStatusMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wsc *WorkloadStatusCreate) SetCreateTime(t time.Time) *WorkloadStatusCreate {
	wsc.mutation.SetCreateTime(t)
	return wsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableCreateTime(t *time.Time) *WorkloadStatusCreate {
	if t != nil {
		wsc.SetCreateTime(*t)
	}
	return wsc
}

// SetUpdateTime sets the "update_time" field.
func (wsc *WorkloadStatusCreate) SetUpdateTime(t time.Time) *WorkloadStatusCreate {
	wsc.mutation.SetUpdateTime(t)
	return wsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableUpdateTime(t *time.Time) *WorkloadStatusCreate {
	if t != nil {
		wsc.SetUpdateTime(*t)
	}
	return wsc
}

// SetStatusDate sets the "status_date" field.
func (wsc *WorkloadStatusCreate) SetStatusDate(t time.Time) *WorkloadStatusCreate {
	wsc.mutation.SetStatusDate(t)
	return wsc
}

// SetNillableStatusDate sets the "status_date" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableStatusDate(t *time.Time) *WorkloadStatusCreate {
	if t != nil {
		wsc.SetStatusDate(*t)
	}
	return wsc
}

// SetStatusEndDate sets the "status_end_date" field.
func (wsc *WorkloadStatusCreate) SetStatusEndDate(t time.Time) *WorkloadStatusCreate {
	wsc.mutation.SetStatusEndDate(t)
	return wsc
}

// SetNillableStatusEndDate sets the "status_end_date" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableStatusEndDate(t *time.Time) *WorkloadStatusCreate {
	if t != nil {
		wsc.SetStatusEndDate(*t)
	}
	return wsc
}

// SetChangeByUserLoginID sets the "change_by_user_login_id" field.
func (wsc *WorkloadStatusCreate) SetChangeByUserLoginID(s string) *WorkloadStatusCreate {
	wsc.mutation.SetChangeByUserLoginID(s)
	return wsc
}

// SetNillableChangeByUserLoginID sets the "change_by_user_login_id" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableChangeByUserLoginID(s *string) *WorkloadStatusCreate {
	if s != nil {
		wsc.SetChangeByUserLoginID(*s)
	}
	return wsc
}

// SetStatusID sets the "status_id" field.
func (wsc *WorkloadStatusCreate) SetStatusID(i int) *WorkloadStatusCreate {
	wsc.mutation.SetStatusID(i)
	return wsc
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableStatusID(i *int) *WorkloadStatusCreate {
	if i != nil {
		wsc.SetStatusID(*i)
	}
	return wsc
}

// SetWorkloadID sets the "workload" edge to the Workload entity by ID.
func (wsc *WorkloadStatusCreate) SetWorkloadID(id int) *WorkloadStatusCreate {
	wsc.mutation.SetWorkloadID(id)
	return wsc
}

// SetNillableWorkloadID sets the "workload" edge to the Workload entity by ID if the given value is not nil.
func (wsc *WorkloadStatusCreate) SetNillableWorkloadID(id *int) *WorkloadStatusCreate {
	if id != nil {
		wsc = wsc.SetWorkloadID(*id)
	}
	return wsc
}

// SetWorkload sets the "workload" edge to the Workload entity.
func (wsc *WorkloadStatusCreate) SetWorkload(w *Workload) *WorkloadStatusCreate {
	return wsc.SetWorkloadID(w.ID)
}

// Mutation returns the WorkloadStatusMutation object of the builder.
func (wsc *WorkloadStatusCreate) Mutation() *WorkloadStatusMutation {
	return wsc.mutation
}

// Save creates the WorkloadStatus in the database.
func (wsc *WorkloadStatusCreate) Save(ctx context.Context) (*WorkloadStatus, error) {
	var (
		err  error
		node *WorkloadStatus
	)
	wsc.defaults()
	if len(wsc.hooks) == 0 {
		if err = wsc.check(); err != nil {
			return nil, err
		}
		node, err = wsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wsc.check(); err != nil {
				return nil, err
			}
			wsc.mutation = mutation
			node, err = wsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wsc.hooks) - 1; i >= 0; i-- {
			mut = wsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WorkloadStatusCreate) SaveX(ctx context.Context) *WorkloadStatus {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wsc *WorkloadStatusCreate) defaults() {
	if _, ok := wsc.mutation.CreateTime(); !ok {
		v := workloadstatus.DefaultCreateTime()
		wsc.mutation.SetCreateTime(v)
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		v := workloadstatus.DefaultUpdateTime()
		wsc.mutation.SetUpdateTime(v)
	}
	if _, ok := wsc.mutation.StatusDate(); !ok {
		v := workloadstatus.DefaultStatusDate()
		wsc.mutation.SetStatusDate(v)
	}
	if _, ok := wsc.mutation.StatusEndDate(); !ok {
		v := workloadstatus.DefaultStatusEndDate()
		wsc.mutation.SetStatusEndDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WorkloadStatusCreate) check() error {
	if _, ok := wsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := wsc.mutation.StatusDate(); !ok {
		return &ValidationError{Name: "status_date", err: errors.New("ent: missing required field \"status_date\"")}
	}
	return nil
}

func (wsc *WorkloadStatusCreate) sqlSave(ctx context.Context) (*WorkloadStatus, error) {
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wsc *WorkloadStatusCreate) createSpec() (*WorkloadStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkloadStatus{config: wsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workloadstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadstatus.FieldID,
			},
		}
	)
	if value, ok := wsc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadstatus.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wsc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadstatus.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wsc.mutation.StatusDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadstatus.FieldStatusDate,
		})
		_node.StatusDate = value
	}
	if value, ok := wsc.mutation.StatusEndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadstatus.FieldStatusEndDate,
		})
		_node.StatusEndDate = value
	}
	if value, ok := wsc.mutation.ChangeByUserLoginID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadstatus.FieldChangeByUserLoginID,
		})
		_node.ChangeByUserLoginID = value
	}
	if value, ok := wsc.mutation.StatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workloadstatus.FieldStatusID,
		})
		_node.StatusID = value
	}
	if nodes := wsc.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadstatus.WorkloadTable,
			Columns: []string{workloadstatus.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workload_workload_statuses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkloadStatusCreateBulk is the builder for creating many WorkloadStatus entities in bulk.
type WorkloadStatusCreateBulk struct {
	config
	builders []*WorkloadStatusCreate
}

// Save creates the WorkloadStatus entities in the database.
func (wscb *WorkloadStatusCreateBulk) Save(ctx context.Context) ([]*WorkloadStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WorkloadStatus, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkloadStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WorkloadStatusCreateBulk) SaveX(ctx context.Context) []*WorkloadStatus {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
