// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"
)

// WorkloadType is the model entity for the WorkloadType schema.
type WorkloadType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadTypeQuery when eager-loading is set.
	Edges                  WorkloadTypeEdges `json:"edges"`
	workload_type_children *int
}

// WorkloadTypeEdges holds the relations/edges for other nodes in the graph.
type WorkloadTypeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *WorkloadType `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*WorkloadType `json:"children,omitempty"`
	// Workloads holds the value of the workloads edge.
	Workloads []*Workload `json:"workloads,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkloadTypeEdges) ParentOrErr() (*WorkloadType, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workloadtype.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadTypeEdges) ChildrenOrErr() ([]*WorkloadType, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// WorkloadsOrErr returns the Workloads value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadTypeEdges) WorkloadsOrErr() ([]*Workload, error) {
	if e.loadedTypes[2] {
		return e.Workloads, nil
	}
	return nil, &NotLoadedError{edge: "workloads"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkloadType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workloadtype.FieldID:
			values[i] = new(sql.NullInt64)
		case workloadtype.FieldDescription:
			values[i] = new(sql.NullString)
		case workloadtype.FieldCreateTime, workloadtype.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case workloadtype.ForeignKeys[0]: // workload_type_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkloadType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkloadType fields.
func (wt *WorkloadType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workloadtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wt.ID = int(value.Int64)
		case workloadtype.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wt.CreateTime = value.Time
			}
		case workloadtype.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wt.UpdateTime = value.Time
			}
		case workloadtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wt.Description = value.String
			}
		case workloadtype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workload_type_children", value)
			} else if value.Valid {
				wt.workload_type_children = new(int)
				*wt.workload_type_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the WorkloadType entity.
func (wt *WorkloadType) QueryParent() *WorkloadTypeQuery {
	return (&WorkloadTypeClient{config: wt.config}).QueryParent(wt)
}

// QueryChildren queries the "children" edge of the WorkloadType entity.
func (wt *WorkloadType) QueryChildren() *WorkloadTypeQuery {
	return (&WorkloadTypeClient{config: wt.config}).QueryChildren(wt)
}

// QueryWorkloads queries the "workloads" edge of the WorkloadType entity.
func (wt *WorkloadType) QueryWorkloads() *WorkloadQuery {
	return (&WorkloadTypeClient{config: wt.config}).QueryWorkloads(wt)
}

// Update returns a builder for updating this WorkloadType.
// Note that you need to call WorkloadType.Unwrap() before calling this method if this WorkloadType
// was returned from a transaction, and the transaction was committed or rolled back.
func (wt *WorkloadType) Update() *WorkloadTypeUpdateOne {
	return (&WorkloadTypeClient{config: wt.config}).UpdateOne(wt)
}

// Unwrap unwraps the WorkloadType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wt *WorkloadType) Unwrap() *WorkloadType {
	tx, ok := wt.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkloadType is not a transactional entity")
	}
	wt.config.driver = tx.drv
	return wt
}

// String implements the fmt.Stringer.
func (wt *WorkloadType) String() string {
	var builder strings.Builder
	builder.WriteString("WorkloadType(")
	builder.WriteString(fmt.Sprintf("id=%v", wt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(wt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(wt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(wt.Description)
	builder.WriteByte(')')
	return builder.String()
}

// WorkloadTypes is a parsable slice of WorkloadType.
type WorkloadTypes []*WorkloadType

func (wt WorkloadTypes) config(cfg config) {
	for _i := range wt {
		wt[_i].config = cfg
	}
}
