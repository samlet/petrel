// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samlet/petrel/alfin/modules/workload/ent/predicate"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workload"
	"github.com/samlet/petrel/alfin/modules/workload/ent/workloadtype"
)

// WorkloadTypeUpdate is the builder for updating WorkloadType entities.
type WorkloadTypeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadTypeMutation
}

// Where adds a new predicate for the WorkloadTypeUpdate builder.
func (wtu *WorkloadTypeUpdate) Where(ps ...predicate.WorkloadType) *WorkloadTypeUpdate {
	wtu.mutation.predicates = append(wtu.mutation.predicates, ps...)
	return wtu
}

// SetDescription sets the "description" field.
func (wtu *WorkloadTypeUpdate) SetDescription(s string) *WorkloadTypeUpdate {
	wtu.mutation.SetDescription(s)
	return wtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wtu *WorkloadTypeUpdate) SetNillableDescription(s *string) *WorkloadTypeUpdate {
	if s != nil {
		wtu.SetDescription(*s)
	}
	return wtu
}

// ClearDescription clears the value of the "description" field.
func (wtu *WorkloadTypeUpdate) ClearDescription() *WorkloadTypeUpdate {
	wtu.mutation.ClearDescription()
	return wtu
}

// SetParentID sets the "parent" edge to the WorkloadType entity by ID.
func (wtu *WorkloadTypeUpdate) SetParentID(id int) *WorkloadTypeUpdate {
	wtu.mutation.SetParentID(id)
	return wtu
}

// SetNillableParentID sets the "parent" edge to the WorkloadType entity by ID if the given value is not nil.
func (wtu *WorkloadTypeUpdate) SetNillableParentID(id *int) *WorkloadTypeUpdate {
	if id != nil {
		wtu = wtu.SetParentID(*id)
	}
	return wtu
}

// SetParent sets the "parent" edge to the WorkloadType entity.
func (wtu *WorkloadTypeUpdate) SetParent(w *WorkloadType) *WorkloadTypeUpdate {
	return wtu.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkloadType entity by IDs.
func (wtu *WorkloadTypeUpdate) AddChildIDs(ids ...int) *WorkloadTypeUpdate {
	wtu.mutation.AddChildIDs(ids...)
	return wtu
}

// AddChildren adds the "children" edges to the WorkloadType entity.
func (wtu *WorkloadTypeUpdate) AddChildren(w ...*WorkloadType) *WorkloadTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtu.AddChildIDs(ids...)
}

// AddWorkloadIDs adds the "workloads" edge to the Workload entity by IDs.
func (wtu *WorkloadTypeUpdate) AddWorkloadIDs(ids ...int) *WorkloadTypeUpdate {
	wtu.mutation.AddWorkloadIDs(ids...)
	return wtu
}

// AddWorkloads adds the "workloads" edges to the Workload entity.
func (wtu *WorkloadTypeUpdate) AddWorkloads(w ...*Workload) *WorkloadTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtu.AddWorkloadIDs(ids...)
}

// Mutation returns the WorkloadTypeMutation object of the builder.
func (wtu *WorkloadTypeUpdate) Mutation() *WorkloadTypeMutation {
	return wtu.mutation
}

// ClearParent clears the "parent" edge to the WorkloadType entity.
func (wtu *WorkloadTypeUpdate) ClearParent() *WorkloadTypeUpdate {
	wtu.mutation.ClearParent()
	return wtu
}

// ClearChildren clears all "children" edges to the WorkloadType entity.
func (wtu *WorkloadTypeUpdate) ClearChildren() *WorkloadTypeUpdate {
	wtu.mutation.ClearChildren()
	return wtu
}

// RemoveChildIDs removes the "children" edge to WorkloadType entities by IDs.
func (wtu *WorkloadTypeUpdate) RemoveChildIDs(ids ...int) *WorkloadTypeUpdate {
	wtu.mutation.RemoveChildIDs(ids...)
	return wtu
}

// RemoveChildren removes "children" edges to WorkloadType entities.
func (wtu *WorkloadTypeUpdate) RemoveChildren(w ...*WorkloadType) *WorkloadTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtu.RemoveChildIDs(ids...)
}

// ClearWorkloads clears all "workloads" edges to the Workload entity.
func (wtu *WorkloadTypeUpdate) ClearWorkloads() *WorkloadTypeUpdate {
	wtu.mutation.ClearWorkloads()
	return wtu
}

// RemoveWorkloadIDs removes the "workloads" edge to Workload entities by IDs.
func (wtu *WorkloadTypeUpdate) RemoveWorkloadIDs(ids ...int) *WorkloadTypeUpdate {
	wtu.mutation.RemoveWorkloadIDs(ids...)
	return wtu
}

// RemoveWorkloads removes "workloads" edges to Workload entities.
func (wtu *WorkloadTypeUpdate) RemoveWorkloads(w ...*Workload) *WorkloadTypeUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtu.RemoveWorkloadIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wtu *WorkloadTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wtu.defaults()
	if len(wtu.hooks) == 0 {
		affected, err = wtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wtu.mutation = mutation
			affected, err = wtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wtu.hooks) - 1; i >= 0; i-- {
			mut = wtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wtu *WorkloadTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := wtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wtu *WorkloadTypeUpdate) Exec(ctx context.Context) error {
	_, err := wtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtu *WorkloadTypeUpdate) ExecX(ctx context.Context) {
	if err := wtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtu *WorkloadTypeUpdate) defaults() {
	if _, ok := wtu.mutation.UpdateTime(); !ok {
		v := workloadtype.UpdateDefaultUpdateTime()
		wtu.mutation.SetUpdateTime(v)
	}
}

func (wtu *WorkloadTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadtype.Table,
			Columns: workloadtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadtype.FieldID,
			},
		},
	}
	if ps := wtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadtype.FieldUpdateTime,
		})
	}
	if value, ok := wtu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadtype.FieldDescription,
		})
	}
	if wtu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadtype.FieldDescription,
		})
	}
	if wtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadtype.ParentTable,
			Columns: []string{workloadtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadtype.ParentTable,
			Columns: []string{workloadtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wtu.mutation.WorkloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.RemovedWorkloadsIDs(); len(nodes) > 0 && !wtu.mutation.WorkloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtu.mutation.WorkloadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkloadTypeUpdateOne is the builder for updating a single WorkloadType entity.
type WorkloadTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadTypeMutation
}

// SetDescription sets the "description" field.
func (wtuo *WorkloadTypeUpdateOne) SetDescription(s string) *WorkloadTypeUpdateOne {
	wtuo.mutation.SetDescription(s)
	return wtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wtuo *WorkloadTypeUpdateOne) SetNillableDescription(s *string) *WorkloadTypeUpdateOne {
	if s != nil {
		wtuo.SetDescription(*s)
	}
	return wtuo
}

// ClearDescription clears the value of the "description" field.
func (wtuo *WorkloadTypeUpdateOne) ClearDescription() *WorkloadTypeUpdateOne {
	wtuo.mutation.ClearDescription()
	return wtuo
}

// SetParentID sets the "parent" edge to the WorkloadType entity by ID.
func (wtuo *WorkloadTypeUpdateOne) SetParentID(id int) *WorkloadTypeUpdateOne {
	wtuo.mutation.SetParentID(id)
	return wtuo
}

// SetNillableParentID sets the "parent" edge to the WorkloadType entity by ID if the given value is not nil.
func (wtuo *WorkloadTypeUpdateOne) SetNillableParentID(id *int) *WorkloadTypeUpdateOne {
	if id != nil {
		wtuo = wtuo.SetParentID(*id)
	}
	return wtuo
}

// SetParent sets the "parent" edge to the WorkloadType entity.
func (wtuo *WorkloadTypeUpdateOne) SetParent(w *WorkloadType) *WorkloadTypeUpdateOne {
	return wtuo.SetParentID(w.ID)
}

// AddChildIDs adds the "children" edge to the WorkloadType entity by IDs.
func (wtuo *WorkloadTypeUpdateOne) AddChildIDs(ids ...int) *WorkloadTypeUpdateOne {
	wtuo.mutation.AddChildIDs(ids...)
	return wtuo
}

// AddChildren adds the "children" edges to the WorkloadType entity.
func (wtuo *WorkloadTypeUpdateOne) AddChildren(w ...*WorkloadType) *WorkloadTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtuo.AddChildIDs(ids...)
}

// AddWorkloadIDs adds the "workloads" edge to the Workload entity by IDs.
func (wtuo *WorkloadTypeUpdateOne) AddWorkloadIDs(ids ...int) *WorkloadTypeUpdateOne {
	wtuo.mutation.AddWorkloadIDs(ids...)
	return wtuo
}

// AddWorkloads adds the "workloads" edges to the Workload entity.
func (wtuo *WorkloadTypeUpdateOne) AddWorkloads(w ...*Workload) *WorkloadTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtuo.AddWorkloadIDs(ids...)
}

// Mutation returns the WorkloadTypeMutation object of the builder.
func (wtuo *WorkloadTypeUpdateOne) Mutation() *WorkloadTypeMutation {
	return wtuo.mutation
}

// ClearParent clears the "parent" edge to the WorkloadType entity.
func (wtuo *WorkloadTypeUpdateOne) ClearParent() *WorkloadTypeUpdateOne {
	wtuo.mutation.ClearParent()
	return wtuo
}

// ClearChildren clears all "children" edges to the WorkloadType entity.
func (wtuo *WorkloadTypeUpdateOne) ClearChildren() *WorkloadTypeUpdateOne {
	wtuo.mutation.ClearChildren()
	return wtuo
}

// RemoveChildIDs removes the "children" edge to WorkloadType entities by IDs.
func (wtuo *WorkloadTypeUpdateOne) RemoveChildIDs(ids ...int) *WorkloadTypeUpdateOne {
	wtuo.mutation.RemoveChildIDs(ids...)
	return wtuo
}

// RemoveChildren removes "children" edges to WorkloadType entities.
func (wtuo *WorkloadTypeUpdateOne) RemoveChildren(w ...*WorkloadType) *WorkloadTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtuo.RemoveChildIDs(ids...)
}

// ClearWorkloads clears all "workloads" edges to the Workload entity.
func (wtuo *WorkloadTypeUpdateOne) ClearWorkloads() *WorkloadTypeUpdateOne {
	wtuo.mutation.ClearWorkloads()
	return wtuo
}

// RemoveWorkloadIDs removes the "workloads" edge to Workload entities by IDs.
func (wtuo *WorkloadTypeUpdateOne) RemoveWorkloadIDs(ids ...int) *WorkloadTypeUpdateOne {
	wtuo.mutation.RemoveWorkloadIDs(ids...)
	return wtuo
}

// RemoveWorkloads removes "workloads" edges to Workload entities.
func (wtuo *WorkloadTypeUpdateOne) RemoveWorkloads(w ...*Workload) *WorkloadTypeUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtuo.RemoveWorkloadIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wtuo *WorkloadTypeUpdateOne) Select(field string, fields ...string) *WorkloadTypeUpdateOne {
	wtuo.fields = append([]string{field}, fields...)
	return wtuo
}

// Save executes the query and returns the updated WorkloadType entity.
func (wtuo *WorkloadTypeUpdateOne) Save(ctx context.Context) (*WorkloadType, error) {
	var (
		err  error
		node *WorkloadType
	)
	wtuo.defaults()
	if len(wtuo.hooks) == 0 {
		node, err = wtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkloadTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wtuo.mutation = mutation
			node, err = wtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wtuo.hooks) - 1; i >= 0; i-- {
			mut = wtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wtuo *WorkloadTypeUpdateOne) SaveX(ctx context.Context) *WorkloadType {
	node, err := wtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wtuo *WorkloadTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := wtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtuo *WorkloadTypeUpdateOne) ExecX(ctx context.Context) {
	if err := wtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtuo *WorkloadTypeUpdateOne) defaults() {
	if _, ok := wtuo.mutation.UpdateTime(); !ok {
		v := workloadtype.UpdateDefaultUpdateTime()
		wtuo.mutation.SetUpdateTime(v)
	}
}

func (wtuo *WorkloadTypeUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workloadtype.Table,
			Columns: workloadtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workloadtype.FieldID,
			},
		},
	}
	id, ok := wtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkloadType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadtype.FieldID)
		for _, f := range fields {
			if !workloadtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workloadtype.FieldUpdateTime,
		})
	}
	if value, ok := wtuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workloadtype.FieldDescription,
		})
	}
	if wtuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workloadtype.FieldDescription,
		})
	}
	if wtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadtype.ParentTable,
			Columns: []string{workloadtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workloadtype.ParentTable,
			Columns: []string{workloadtype.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !wtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.ChildrenTable,
			Columns: []string{workloadtype.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workloadtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wtuo.mutation.WorkloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.RemovedWorkloadsIDs(); len(nodes) > 0 && !wtuo.mutation.WorkloadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtuo.mutation.WorkloadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workloadtype.WorkloadsTable,
			Columns: []string{workloadtype.WorkloadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadType{config: wtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadtype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
