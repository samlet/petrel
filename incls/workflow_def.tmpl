package main

import (
    "time"
    "context"

    "go.uber.org/cadence/activity"
    "go.uber.org/cadence/workflow"
    "go.uber.org/zap"
)

type (
    flowInfo struct {
        Owner string
        Bindings   map[string]interface{}
    }
)

// ApplicationName is the task list for this workflow
const ApplicationName = "{{.Name}}Group"

/**
* Activities used by file processing {{.Name}} workflow.
*/
const (
{{- range .Activities}}
    {{.Name}}ActivityName = "{{.Name}}Activity"
{{- end}}
)

// This is registration process where you register all your workflows
// and activity function handlers.
func init() {
    workflow.Register({{.Name}}Workflow)
{{- range .Activities}}
    activity.RegisterWithOptions(
        {{.Name}}Activity,
        activity.RegisterOptions{Name: {{.Name}}ActivityName},
    )
{{- end}}
}

// {{.Name}} Workflow Decider.
func {{.Name}}Workflow(ctx workflow.Context, fInfo *flowInfo) error {
    ao := workflow.ActivityOptions{
        ScheduleToStartTimeout: time.Minute,
        StartToCloseTimeout:    time.Minute,
        HeartbeatTimeout:       time.Second * 20,
    }
    ctx = workflow.WithActivityOptions(ctx, ao)

    logger := workflow.GetLogger(ctx)
    var err error
{{range .Activities}}
    // Run "{{.Name}}"
    err = workflow.ExecuteActivity(ctx, {{.Name}}ActivityName, *fInfo).Get(ctx, &fInfo)
    if err != nil {
        logger.Error("Activity '{{.Name}}' failed.", zap.Error(err))
        return err
    }
{{end}}

    logger.Info("Workflow completed.", zap.String("Result", "OK"))
    return nil
}

{{range .Activities}}
// {{.Name}} Activity.
func {{.Name}}Activity(ctx context.Context, fInfo flowInfo) (*flowInfo, error) {
    processedInfo := &flowInfo{Owner: fInfo.Owner, Bindings: fInfo.Bindings}
    return processedInfo, nil
}
{{end}}

