package main

import (
    "flag"
    "time"

    "github.com/pborman/uuid"
    "github.com/samlet/petrel/routines/common"
    "go.uber.org/cadence/client"
    "go.uber.org/cadence/worker"
)

// This needs to be done as part of a bootstrap step when the process starts.
// The workers are supposed to be long running.
func startWorkers(h *common.SampleHelper) {
    // Configure worker options.
    workerOptions := worker.Options{
        MetricsScope:          h.Scope,
        Logger:                h.Logger,
        // EnableLoggingInReplay: true,
        // EnableSessionWorker:   true,
    }
    h.StartWorkers(h.Config.DomainName, ApplicationName, workerOptions)

    // Host Specific activities processing case
    // workerOptions.DisableWorkflowWorker = true
    // h.StartWorkers(h.Config.DomainName, HostID, workerOptions)
}

func startWorkflow(h *common.SampleHelper, fInfo *flowInfo) {
    workflowOptions := client.StartWorkflowOptions{
        ID:                              "{{.Name}}_" + uuid.New(),
        TaskList:                        ApplicationName,
        ExecutionStartToCloseTimeout:    time.Minute,
        DecisionTaskStartToCloseTimeout: time.Minute,
    }
    h.StartWorkflow(workflowOptions, {{.Name}}Workflow, fInfo)
}

func main() {
    var mode string
    flag.StringVar(&mode, "m", "trigger", "Mode is worker or trigger.")
    flag.Parse()

    var h common.SampleHelper
    h.SetupServiceConfig()

    switch mode {
    case "worker":
        startWorkers(&h)

        // The workers are supposed to be long running process that should not exit.
        // Use select{} to block indefinitely for samples, you can quit by CMD+C.
        select {}
    case "trigger":
        startWorkflow(&h, &flowInfo{Owner:uuid.New()})
    }
}
